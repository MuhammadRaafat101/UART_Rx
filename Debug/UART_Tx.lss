
UART_Tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ede  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00002ede  00002f52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002094  00000000  00000000  00002f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ef3  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005eff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000603f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000061af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a64b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e6       	ldi	r26, 0x6C	; 108
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e6       	ldi	r24, 0x6C	; 108
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:

#include "LCD.h"


int main(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2e 97       	sbiw	r28, 0x0e	; 14
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
//DDRC &= ~(1<<PIN4);
	LCD_init();
     b4a:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <LCD_init>
	DIO_init(1);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	0e 94 38 06 	call	0xc70	; 0xc70 <DIO_init>
	UART_Init();
     b54:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <UART_Init>

LCD_gotoRawCol(0,0);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <LCD_gotoRawCol>
LCD_displayStrRowCol(0,0,"NEW DATA : ");
     b60:	20 e6       	ldi	r18, 0x60	; 96
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	a9 01       	movw	r20, r18
     b6a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <LCD_displayStrRowCol>

	while(1)
	{

		while(!(UCSRA&(1<<RXC)));
     b6e:	eb e2       	ldi	r30, 0x2B	; 43
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 23       	and	r24, r24
     b76:	dc f7       	brge	.-10     	; 0xb6e <main+0x38>
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	aa e7       	ldi	r26, 0x7A	; 122
     b7e:	b3 e4       	ldi	r27, 0x43	; 67
     b80:	8b 87       	std	Y+11, r24	; 0x0b
     b82:	9c 87       	std	Y+12, r25	; 0x0c
     b84:	ad 87       	std	Y+13, r26	; 0x0d
     b86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b88:	6b 85       	ldd	r22, Y+11	; 0x0b
     b8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     b8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	4a ef       	ldi	r20, 0xFA	; 250
     b96:	54 e4       	ldi	r21, 0x44	; 68
     b98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b9c:	dc 01       	movw	r26, r24
     b9e:	cb 01       	movw	r24, r22
     ba0:	8f 83       	std	Y+7, r24	; 0x07
     ba2:	98 87       	std	Y+8, r25	; 0x08
     ba4:	a9 87       	std	Y+9, r26	; 0x09
     ba6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ba8:	6f 81       	ldd	r22, Y+7	; 0x07
     baa:	78 85       	ldd	r23, Y+8	; 0x08
     bac:	89 85       	ldd	r24, Y+9	; 0x09
     bae:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e8       	ldi	r20, 0x80	; 128
     bb6:	5f e3       	ldi	r21, 0x3F	; 63
     bb8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bbc:	88 23       	and	r24, r24
     bbe:	2c f4       	brge	.+10     	; 0xbca <main+0x94>
		__ticks = 1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	9e 83       	std	Y+6, r25	; 0x06
     bc6:	8d 83       	std	Y+5, r24	; 0x05
     bc8:	3f c0       	rjmp	.+126    	; 0xc48 <main+0x112>
	else if (__tmp > 65535)
     bca:	6f 81       	ldd	r22, Y+7	; 0x07
     bcc:	78 85       	ldd	r23, Y+8	; 0x08
     bce:	89 85       	ldd	r24, Y+9	; 0x09
     bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	3f ef       	ldi	r19, 0xFF	; 255
     bd6:	4f e7       	ldi	r20, 0x7F	; 127
     bd8:	57 e4       	ldi	r21, 0x47	; 71
     bda:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bde:	18 16       	cp	r1, r24
     be0:	4c f5       	brge	.+82     	; 0xc34 <main+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be2:	6b 85       	ldd	r22, Y+11	; 0x0b
     be4:	7c 85       	ldd	r23, Y+12	; 0x0c
     be6:	8d 85       	ldd	r24, Y+13	; 0x0d
     be8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e2       	ldi	r20, 0x20	; 32
     bf0:	51 e4       	ldi	r21, 0x41	; 65
     bf2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bf6:	dc 01       	movw	r26, r24
     bf8:	cb 01       	movw	r24, r22
     bfa:	bc 01       	movw	r22, r24
     bfc:	cd 01       	movw	r24, r26
     bfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	9e 83       	std	Y+6, r25	; 0x06
     c08:	8d 83       	std	Y+5, r24	; 0x05
     c0a:	0f c0       	rjmp	.+30     	; 0xc2a <main+0xf4>
     c0c:	88 ec       	ldi	r24, 0xC8	; 200
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9c 83       	std	Y+4, r25	; 0x04
     c12:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	9c 81       	ldd	r25, Y+4	; 0x04
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <main+0xe2>
     c1c:	9c 83       	std	Y+4, r25	; 0x04
     c1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c20:	8d 81       	ldd	r24, Y+5	; 0x05
     c22:	9e 81       	ldd	r25, Y+6	; 0x06
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	9e 83       	std	Y+6, r25	; 0x06
     c28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	69 f7       	brne	.-38     	; 0xc0c <main+0xd6>
     c32:	14 c0       	rjmp	.+40     	; 0xc5c <main+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c34:	6f 81       	ldd	r22, Y+7	; 0x07
     c36:	78 85       	ldd	r23, Y+8	; 0x08
     c38:	89 85       	ldd	r24, Y+9	; 0x09
     c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	9e 83       	std	Y+6, r25	; 0x06
     c46:	8d 83       	std	Y+5, r24	; 0x05
     c48:	8d 81       	ldd	r24, Y+5	; 0x05
     c4a:	9e 81       	ldd	r25, Y+6	; 0x06
     c4c:	9a 83       	std	Y+2, r25	; 0x02
     c4e:	89 83       	std	Y+1, r24	; 0x01
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	9a 81       	ldd	r25, Y+2	; 0x02
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <main+0x11e>
     c58:	9a 83       	std	Y+2, r25	; 0x02
     c5a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LCD_gotoRawCol(0,10);
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	6a e0       	ldi	r22, 0x0A	; 10
     c60:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <LCD_gotoRawCol>
		LCD_displayChar(UDR);
     c64:	ec e2       	ldi	r30, 0x2C	; 44
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_displayChar>
     c6e:	7f cf       	rjmp	.-258    	; 0xb6e <main+0x38>

00000c70 <DIO_init>:
#include "registers.h"
#include "stdtypes.h"
#include "DIO_cnfg.h"

Std_Func_t DIO_init (PINS_t input)
{
     c70:	df 93       	push	r29
     c72:	cf 93       	push	r28
     c74:	00 d0       	rcall	.+0      	; 0xc76 <DIO_init+0x6>
     c76:	00 d0       	rcall	.+0      	; 0xc78 <DIO_init+0x8>
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	8a 83       	std	Y+2, r24	; 0x02
	Std_Func_t retval = OK;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	89 83       	std	Y+1, r24	; 0x01
	if (input <= MAX_NUM_OF_PINS)
     c82:	8a 81       	ldd	r24, Y+2	; 0x02
     c84:	81 32       	cpi	r24, 0x21	; 33
     c86:	08 f0       	brcs	.+2      	; 0xc8a <DIO_init+0x1a>
     c88:	9a c5       	rjmp	.+2868   	; 0x17be <DIO_init+0xb4e>
	{
		DIO_cnfg_arr[input].IS_init_arr = INITIALIZED;
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	c9 01       	movw	r24, r18
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	82 0f       	add	r24, r18
     c98:	93 1f       	adc	r25, r19
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	fc 01       	movw	r30, r24
     ca0:	e7 58       	subi	r30, 0x87	; 135
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	80 83       	st	Z, r24
		switch(DIO_cnfg_arr[input].PORT)
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	c9 01       	movw	r24, r18
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	82 0f       	add	r24, r18
     cb6:	93 1f       	adc	r25, r19
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	fc 01       	movw	r30, r24
     cbe:	ec 58       	subi	r30, 0x8C	; 140
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	80 81       	ld	r24, Z
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	3c 83       	std	Y+4, r19	; 0x04
     cca:	2b 83       	std	Y+3, r18	; 0x03
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	91 05       	cpc	r25, r1
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <DIO_init+0x68>
     cd6:	6a c1       	rjmp	.+724    	; 0xfac <DIO_init+0x33c>
     cd8:	2b 81       	ldd	r18, Y+3	; 0x03
     cda:	3c 81       	ldd	r19, Y+4	; 0x04
     cdc:	22 30       	cpi	r18, 0x02	; 2
     cde:	31 05       	cpc	r19, r1
     ce0:	2c f4       	brge	.+10     	; 0xcec <DIO_init+0x7c>
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	9c 81       	ldd	r25, Y+4	; 0x04
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	71 f0       	breq	.+28     	; 0xd06 <DIO_init+0x96>
     cea:	59 c5       	rjmp	.+2738   	; 0x179e <DIO_init+0xb2e>
     cec:	2b 81       	ldd	r18, Y+3	; 0x03
     cee:	3c 81       	ldd	r19, Y+4	; 0x04
     cf0:	22 30       	cpi	r18, 0x02	; 2
     cf2:	31 05       	cpc	r19, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <DIO_init+0x88>
     cf6:	ad c2       	rjmp	.+1370   	; 0x1252 <DIO_init+0x5e2>
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	9c 81       	ldd	r25, Y+4	; 0x04
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	91 05       	cpc	r25, r1
     d00:	09 f4       	brne	.+2      	; 0xd04 <DIO_init+0x94>
     d02:	fa c3       	rjmp	.+2036   	; 0x14f8 <DIO_init+0x888>
     d04:	4c c5       	rjmp	.+2712   	; 0x179e <DIO_init+0xb2e>
		{
		case PORT_A:
			if(DIO_cnfg_arr[input].DIR == OUTPUT)
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	c9 01       	movw	r24, r18
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	82 0f       	add	r24, r18
     d14:	93 1f       	adc	r25, r19
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	fc 01       	movw	r30, r24
     d1e:	ec 58       	subi	r30, 0x8C	; 140
     d20:	ff 4f       	sbci	r31, 0xFF	; 255
     d22:	80 81       	ld	r24, Z
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	09 f0       	breq	.+2      	; 0xd2a <DIO_init+0xba>
     d28:	8f c0       	rjmp	.+286    	; 0xe48 <DIO_init+0x1d8>
			{
				REG_DDRA |=(1u<<DIO_cnfg_arr[input].PIN);
     d2a:	aa e3       	ldi	r26, 0x3A	; 58
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ea e3       	ldi	r30, 0x3A	; 58
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	40 81       	ld	r20, Z
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	c9 01       	movw	r24, r18
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	82 0f       	add	r24, r18
     d42:	93 1f       	adc	r25, r19
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	fc 01       	movw	r30, r24
     d4a:	eb 58       	subi	r30, 0x8B	; 139
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	80 81       	ld	r24, Z
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <DIO_init+0xee>
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	2a 95       	dec	r18
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <DIO_init+0xea>
     d62:	84 2b       	or	r24, r20
     d64:	8c 93       	st	X, r24
				if (DIO_cnfg_arr[input].OUT == HIGH)
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	c9 01       	movw	r24, r18
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	82 0f       	add	r24, r18
     d74:	93 1f       	adc	r25, r19
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	fc 01       	movw	r30, r24
     d7c:	e9 58       	subi	r30, 0x89	; 137
     d7e:	ff 4f       	sbci	r31, 0xFF	; 255
     d80:	80 81       	ld	r24, Z
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	01 f5       	brne	.+64     	; 0xdc6 <DIO_init+0x156>
				{
					REG_PORTA |=(1u<<DIO_cnfg_arr[input].PIN);
     d86:	ab e3       	ldi	r26, 0x3B	; 59
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	eb e3       	ldi	r30, 0x3B	; 59
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	40 81       	ld	r20, Z
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	c9 01       	movw	r24, r18
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	82 0f       	add	r24, r18
     d9e:	93 1f       	adc	r25, r19
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	fc 01       	movw	r30, r24
     da6:	eb 58       	subi	r30, 0x8B	; 139
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	80 81       	ld	r24, Z
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	02 2e       	mov	r0, r18
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <DIO_init+0x14c>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	0a 94       	dec	r0
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <DIO_init+0x148>
     dc0:	84 2b       	or	r24, r20
     dc2:	8c 93       	st	X, r24
     dc4:	0a c5       	rjmp	.+2580   	; 0x17da <DIO_init+0xb6a>
				}
				else if (DIO_cnfg_arr[input].OUT == LOW)
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	c9 01       	movw	r24, r18
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	82 0f       	add	r24, r18
     dd4:	93 1f       	adc	r25, r19
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	fc 01       	movw	r30, r24
     ddc:	e9 58       	subi	r30, 0x89	; 137
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	80 81       	ld	r24, Z
     de2:	88 23       	and	r24, r24
     de4:	09 f5       	brne	.+66     	; 0xe28 <DIO_init+0x1b8>
				{
					REG_PORTA &=~(1u<<DIO_cnfg_arr[input].PIN);
     de6:	ab e3       	ldi	r26, 0x3B	; 59
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	eb e3       	ldi	r30, 0x3B	; 59
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	40 81       	ld	r20, Z
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	c9 01       	movw	r24, r18
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	82 0f       	add	r24, r18
     dfe:	93 1f       	adc	r25, r19
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	fc 01       	movw	r30, r24
     e06:	eb 58       	subi	r30, 0x8B	; 139
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	80 81       	ld	r24, Z
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_init+0x1ac>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_init+0x1a8>
     e20:	80 95       	com	r24
     e22:	84 23       	and	r24, r20
     e24:	8c 93       	st	X, r24
     e26:	d9 c4       	rjmp	.+2482   	; 0x17da <DIO_init+0xb6a>
				}
				else
				{
					DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	c9 01       	movw	r24, r18
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	82 0f       	add	r24, r18
     e36:	93 1f       	adc	r25, r19
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	fc 01       	movw	r30, r24
     e3e:	e7 58       	subi	r30, 0x87	; 135
     e40:	ff 4f       	sbci	r31, 0xFF	; 255
     e42:	10 82       	st	Z, r1
					retval = NOK;
     e44:	19 82       	std	Y+1, r1	; 0x01
     e46:	c9 c4       	rjmp	.+2450   	; 0x17da <DIO_init+0xb6a>
				}
			}
			else if(DIO_cnfg_arr[input].DIR == INPUT)
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	c9 01       	movw	r24, r18
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	82 0f       	add	r24, r18
     e56:	93 1f       	adc	r25, r19
     e58:	01 96       	adiw	r24, 0x01	; 1
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	fc 01       	movw	r30, r24
     e60:	ec 58       	subi	r30, 0x8C	; 140
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	80 81       	ld	r24, Z
     e66:	88 23       	and	r24, r24
     e68:	09 f0       	breq	.+2      	; 0xe6c <DIO_init+0x1fc>
     e6a:	90 c0       	rjmp	.+288    	; 0xf8c <DIO_init+0x31c>
			{
				REG_DDRA &=~(1u<<DIO_cnfg_arr[input].PIN);
     e6c:	aa e3       	ldi	r26, 0x3A	; 58
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ea e3       	ldi	r30, 0x3A	; 58
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	40 81       	ld	r20, Z
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	c9 01       	movw	r24, r18
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	82 0f       	add	r24, r18
     e84:	93 1f       	adc	r25, r19
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	fc 01       	movw	r30, r24
     e8c:	eb 58       	subi	r30, 0x8B	; 139
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	80 81       	ld	r24, Z
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <DIO_init+0x230>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	2a 95       	dec	r18
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <DIO_init+0x22c>
     ea4:	80 95       	com	r24
     ea6:	84 23       	and	r24, r20
     ea8:	8c 93       	st	X, r24
				if (DIO_cnfg_arr[input].RES == PULLUP)
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	c9 01       	movw	r24, r18
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	82 0f       	add	r24, r18
     eb8:	93 1f       	adc	r25, r19
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	fc 01       	movw	r30, r24
     ec0:	e8 58       	subi	r30, 0x88	; 136
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	80 81       	ld	r24, Z
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	01 f5       	brne	.+64     	; 0xf0a <DIO_init+0x29a>
				{
					REG_PORTA |=(1u<<DIO_cnfg_arr[input].PIN);
     eca:	ab e3       	ldi	r26, 0x3B	; 59
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	eb e3       	ldi	r30, 0x3B	; 59
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	40 81       	ld	r20, Z
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	c9 01       	movw	r24, r18
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	82 0f       	add	r24, r18
     ee2:	93 1f       	adc	r25, r19
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	fc 01       	movw	r30, r24
     eea:	eb 58       	subi	r30, 0x8B	; 139
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	80 81       	ld	r24, Z
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_init+0x290>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_init+0x28c>
     f04:	84 2b       	or	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	68 c4       	rjmp	.+2256   	; 0x17da <DIO_init+0xb6a>
				}
				else if (DIO_cnfg_arr[input].RES == EXTRES)
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	c9 01       	movw	r24, r18
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	82 0f       	add	r24, r18
     f18:	93 1f       	adc	r25, r19
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	fc 01       	movw	r30, r24
     f20:	e8 58       	subi	r30, 0x88	; 136
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	80 81       	ld	r24, Z
     f26:	88 23       	and	r24, r24
     f28:	09 f5       	brne	.+66     	; 0xf6c <DIO_init+0x2fc>
				{
					REG_PORTA &=~(1u<<DIO_cnfg_arr[input].PIN);
     f2a:	ab e3       	ldi	r26, 0x3B	; 59
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	eb e3       	ldi	r30, 0x3B	; 59
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	40 81       	ld	r20, Z
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	c9 01       	movw	r24, r18
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	82 0f       	add	r24, r18
     f42:	93 1f       	adc	r25, r19
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	fc 01       	movw	r30, r24
     f4a:	eb 58       	subi	r30, 0x8B	; 139
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	80 81       	ld	r24, Z
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_init+0x2f0>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_init+0x2ec>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	37 c4       	rjmp	.+2158   	; 0x17da <DIO_init+0xb6a>
				}
				else
				{
					DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	c9 01       	movw	r24, r18
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	82 0f       	add	r24, r18
     f7a:	93 1f       	adc	r25, r19
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	fc 01       	movw	r30, r24
     f82:	e7 58       	subi	r30, 0x87	; 135
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	10 82       	st	Z, r1
					retval = NOK;
     f88:	19 82       	std	Y+1, r1	; 0x01
     f8a:	27 c4       	rjmp	.+2126   	; 0x17da <DIO_init+0xb6a>
				}
			}
			else
			{
				DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	c9 01       	movw	r24, r18
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	82 0f       	add	r24, r18
     f9a:	93 1f       	adc	r25, r19
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	fc 01       	movw	r30, r24
     fa2:	e7 58       	subi	r30, 0x87	; 135
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	10 82       	st	Z, r1
				retval = NOK;
     fa8:	19 82       	std	Y+1, r1	; 0x01
     faa:	17 c4       	rjmp	.+2094   	; 0x17da <DIO_init+0xb6a>
			}
			break;
		case PORT_B:
			if(DIO_cnfg_arr[input].DIR == OUTPUT)
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	c9 01       	movw	r24, r18
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	82 0f       	add	r24, r18
     fba:	93 1f       	adc	r25, r19
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	fc 01       	movw	r30, r24
     fc4:	ec 58       	subi	r30, 0x8C	; 140
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	80 81       	ld	r24, Z
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <DIO_init+0x360>
     fce:	8f c0       	rjmp	.+286    	; 0x10ee <DIO_init+0x47e>
			{
				REG_DDRB |=(1u<<DIO_cnfg_arr[input].PIN);
     fd0:	a7 e3       	ldi	r26, 0x37	; 55
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e7 e3       	ldi	r30, 0x37	; 55
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	40 81       	ld	r20, Z
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	c9 01       	movw	r24, r18
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	82 0f       	add	r24, r18
     fe8:	93 1f       	adc	r25, r19
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	fc 01       	movw	r30, r24
     ff0:	eb 58       	subi	r30, 0x8B	; 139
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	80 81       	ld	r24, Z
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <DIO_init+0x394>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	2a 95       	dec	r18
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <DIO_init+0x390>
    1008:	84 2b       	or	r24, r20
    100a:	8c 93       	st	X, r24
				if (DIO_cnfg_arr[input].OUT == HIGH)
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	c9 01       	movw	r24, r18
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	82 0f       	add	r24, r18
    101a:	93 1f       	adc	r25, r19
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	fc 01       	movw	r30, r24
    1022:	e9 58       	subi	r30, 0x89	; 137
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	80 81       	ld	r24, Z
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	01 f5       	brne	.+64     	; 0x106c <DIO_init+0x3fc>
				{
					REG_PORTB |=(1u<<DIO_cnfg_arr[input].PIN);
    102c:	a8 e3       	ldi	r26, 0x38	; 56
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e8 e3       	ldi	r30, 0x38	; 56
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	40 81       	ld	r20, Z
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	c9 01       	movw	r24, r18
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	82 0f       	add	r24, r18
    1044:	93 1f       	adc	r25, r19
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	fc 01       	movw	r30, r24
    104c:	eb 58       	subi	r30, 0x8B	; 139
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	80 81       	ld	r24, Z
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_init+0x3f2>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <DIO_init+0x3ee>
    1066:	84 2b       	or	r24, r20
    1068:	8c 93       	st	X, r24
    106a:	b7 c3       	rjmp	.+1902   	; 0x17da <DIO_init+0xb6a>
				}
				else if (DIO_cnfg_arr[input].OUT == LOW)
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	c9 01       	movw	r24, r18
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	82 0f       	add	r24, r18
    107a:	93 1f       	adc	r25, r19
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	fc 01       	movw	r30, r24
    1082:	e9 58       	subi	r30, 0x89	; 137
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	80 81       	ld	r24, Z
    1088:	88 23       	and	r24, r24
    108a:	09 f5       	brne	.+66     	; 0x10ce <DIO_init+0x45e>
				{
					REG_PORTB &=~(1u<<DIO_cnfg_arr[input].PIN);
    108c:	a8 e3       	ldi	r26, 0x38	; 56
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e8 e3       	ldi	r30, 0x38	; 56
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	40 81       	ld	r20, Z
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	c9 01       	movw	r24, r18
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	82 0f       	add	r24, r18
    10a4:	93 1f       	adc	r25, r19
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	fc 01       	movw	r30, r24
    10ac:	eb 58       	subi	r30, 0x8B	; 139
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	80 81       	ld	r24, Z
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_init+0x452>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_init+0x44e>
    10c6:	80 95       	com	r24
    10c8:	84 23       	and	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	86 c3       	rjmp	.+1804   	; 0x17da <DIO_init+0xb6a>
				}
				else
				{
					DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	c9 01       	movw	r24, r18
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	82 0f       	add	r24, r18
    10dc:	93 1f       	adc	r25, r19
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	fc 01       	movw	r30, r24
    10e4:	e7 58       	subi	r30, 0x87	; 135
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	10 82       	st	Z, r1
					retval = NOK;
    10ea:	19 82       	std	Y+1, r1	; 0x01
    10ec:	76 c3       	rjmp	.+1772   	; 0x17da <DIO_init+0xb6a>
				}
			}
			else if(DIO_cnfg_arr[input].DIR == INPUT)
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	c9 01       	movw	r24, r18
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	82 0f       	add	r24, r18
    10fc:	93 1f       	adc	r25, r19
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	fc 01       	movw	r30, r24
    1106:	ec 58       	subi	r30, 0x8C	; 140
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	80 81       	ld	r24, Z
    110c:	88 23       	and	r24, r24
    110e:	09 f0       	breq	.+2      	; 0x1112 <DIO_init+0x4a2>
    1110:	90 c0       	rjmp	.+288    	; 0x1232 <DIO_init+0x5c2>
			{
				REG_DDRB &=~(1u<<DIO_cnfg_arr[input].PIN);
    1112:	a7 e3       	ldi	r26, 0x37	; 55
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e7 e3       	ldi	r30, 0x37	; 55
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	40 81       	ld	r20, Z
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	c9 01       	movw	r24, r18
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	82 0f       	add	r24, r18
    112a:	93 1f       	adc	r25, r19
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	fc 01       	movw	r30, r24
    1132:	eb 58       	subi	r30, 0x8B	; 139
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	80 81       	ld	r24, Z
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_init+0x4d6>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	2a 95       	dec	r18
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_init+0x4d2>
    114a:	80 95       	com	r24
    114c:	84 23       	and	r24, r20
    114e:	8c 93       	st	X, r24
				if (DIO_cnfg_arr[input].RES == PULLUP)
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	c9 01       	movw	r24, r18
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	82 0f       	add	r24, r18
    115e:	93 1f       	adc	r25, r19
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	fc 01       	movw	r30, r24
    1166:	e8 58       	subi	r30, 0x88	; 136
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	80 81       	ld	r24, Z
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	01 f5       	brne	.+64     	; 0x11b0 <DIO_init+0x540>
				{
					REG_PORTB |=(1u<<DIO_cnfg_arr[input].PIN);
    1170:	a8 e3       	ldi	r26, 0x38	; 56
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e8 e3       	ldi	r30, 0x38	; 56
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	40 81       	ld	r20, Z
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	c9 01       	movw	r24, r18
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	82 0f       	add	r24, r18
    1188:	93 1f       	adc	r25, r19
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	fc 01       	movw	r30, r24
    1190:	eb 58       	subi	r30, 0x8B	; 139
    1192:	ff 4f       	sbci	r31, 0xFF	; 255
    1194:	80 81       	ld	r24, Z
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_init+0x536>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_init+0x532>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	15 c3       	rjmp	.+1578   	; 0x17da <DIO_init+0xb6a>
				}
				else if (DIO_cnfg_arr[input].RES == EXTRES)
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	c9 01       	movw	r24, r18
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	82 0f       	add	r24, r18
    11be:	93 1f       	adc	r25, r19
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	fc 01       	movw	r30, r24
    11c6:	e8 58       	subi	r30, 0x88	; 136
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	80 81       	ld	r24, Z
    11cc:	88 23       	and	r24, r24
    11ce:	09 f5       	brne	.+66     	; 0x1212 <DIO_init+0x5a2>
				{
					REG_PORTB &=~(1u<<DIO_cnfg_arr[input].PIN);
    11d0:	a8 e3       	ldi	r26, 0x38	; 56
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e8 e3       	ldi	r30, 0x38	; 56
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	40 81       	ld	r20, Z
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	c9 01       	movw	r24, r18
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	82 0f       	add	r24, r18
    11e8:	93 1f       	adc	r25, r19
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	fc 01       	movw	r30, r24
    11f0:	eb 58       	subi	r30, 0x8B	; 139
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 81       	ld	r24, Z
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_init+0x596>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_init+0x592>
    120a:	80 95       	com	r24
    120c:	84 23       	and	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	e4 c2       	rjmp	.+1480   	; 0x17da <DIO_init+0xb6a>
				}
				else
				{
					DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	c9 01       	movw	r24, r18
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	82 0f       	add	r24, r18
    1220:	93 1f       	adc	r25, r19
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	fc 01       	movw	r30, r24
    1228:	e7 58       	subi	r30, 0x87	; 135
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	10 82       	st	Z, r1
					retval = NOK;
    122e:	19 82       	std	Y+1, r1	; 0x01
    1230:	d4 c2       	rjmp	.+1448   	; 0x17da <DIO_init+0xb6a>
				}
			}
			else
			{
				DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	c9 01       	movw	r24, r18
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	82 0f       	add	r24, r18
    1240:	93 1f       	adc	r25, r19
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	fc 01       	movw	r30, r24
    1248:	e7 58       	subi	r30, 0x87	; 135
    124a:	ff 4f       	sbci	r31, 0xFF	; 255
    124c:	10 82       	st	Z, r1
				retval = NOK;
    124e:	19 82       	std	Y+1, r1	; 0x01
    1250:	c4 c2       	rjmp	.+1416   	; 0x17da <DIO_init+0xb6a>
			}
			break;
		case PORT_C:
			if(DIO_cnfg_arr[input].DIR == OUTPUT)
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	c9 01       	movw	r24, r18
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	82 0f       	add	r24, r18
    1260:	93 1f       	adc	r25, r19
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	fc 01       	movw	r30, r24
    126a:	ec 58       	subi	r30, 0x8C	; 140
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	80 81       	ld	r24, Z
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	09 f0       	breq	.+2      	; 0x1276 <DIO_init+0x606>
    1274:	8f c0       	rjmp	.+286    	; 0x1394 <DIO_init+0x724>
			{
				REG_DDRC |=(1u<<DIO_cnfg_arr[input].PIN);
    1276:	a4 e3       	ldi	r26, 0x34	; 52
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e4 e3       	ldi	r30, 0x34	; 52
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	40 81       	ld	r20, Z
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	c9 01       	movw	r24, r18
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	82 0f       	add	r24, r18
    128e:	93 1f       	adc	r25, r19
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	fc 01       	movw	r30, r24
    1296:	eb 58       	subi	r30, 0x8B	; 139
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	80 81       	ld	r24, Z
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_init+0x63a>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	2a 95       	dec	r18
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_init+0x636>
    12ae:	84 2b       	or	r24, r20
    12b0:	8c 93       	st	X, r24
				if (DIO_cnfg_arr[input].OUT == HIGH)
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	c9 01       	movw	r24, r18
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	82 0f       	add	r24, r18
    12c0:	93 1f       	adc	r25, r19
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	fc 01       	movw	r30, r24
    12c8:	e9 58       	subi	r30, 0x89	; 137
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	80 81       	ld	r24, Z
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	01 f5       	brne	.+64     	; 0x1312 <DIO_init+0x6a2>
				{
					REG_PORTC |=(1u<<DIO_cnfg_arr[input].PIN);
    12d2:	a5 e3       	ldi	r26, 0x35	; 53
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e5 e3       	ldi	r30, 0x35	; 53
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	40 81       	ld	r20, Z
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	c9 01       	movw	r24, r18
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	82 0f       	add	r24, r18
    12ea:	93 1f       	adc	r25, r19
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	fc 01       	movw	r30, r24
    12f2:	eb 58       	subi	r30, 0x8B	; 139
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	80 81       	ld	r24, Z
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_init+0x698>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_init+0x694>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	64 c2       	rjmp	.+1224   	; 0x17da <DIO_init+0xb6a>
				}
				else if (DIO_cnfg_arr[input].OUT == LOW)
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	c9 01       	movw	r24, r18
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	82 0f       	add	r24, r18
    1320:	93 1f       	adc	r25, r19
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	fc 01       	movw	r30, r24
    1328:	e9 58       	subi	r30, 0x89	; 137
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	80 81       	ld	r24, Z
    132e:	88 23       	and	r24, r24
    1330:	09 f5       	brne	.+66     	; 0x1374 <DIO_init+0x704>
				{
					REG_PORTC &=~(1u<<DIO_cnfg_arr[input].PIN);
    1332:	a5 e3       	ldi	r26, 0x35	; 53
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e5 e3       	ldi	r30, 0x35	; 53
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	40 81       	ld	r20, Z
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	c9 01       	movw	r24, r18
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	82 0f       	add	r24, r18
    134a:	93 1f       	adc	r25, r19
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	fc 01       	movw	r30, r24
    1352:	eb 58       	subi	r30, 0x8B	; 139
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	80 81       	ld	r24, Z
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_init+0x6f8>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_init+0x6f4>
    136c:	80 95       	com	r24
    136e:	84 23       	and	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	33 c2       	rjmp	.+1126   	; 0x17da <DIO_init+0xb6a>
				}
				else
				{
					DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	c9 01       	movw	r24, r18
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	82 0f       	add	r24, r18
    1382:	93 1f       	adc	r25, r19
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	fc 01       	movw	r30, r24
    138a:	e7 58       	subi	r30, 0x87	; 135
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	10 82       	st	Z, r1
					retval = NOK;
    1390:	19 82       	std	Y+1, r1	; 0x01
    1392:	23 c2       	rjmp	.+1094   	; 0x17da <DIO_init+0xb6a>
				}
			}
			else if(DIO_cnfg_arr[input].DIR == INPUT)
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	c9 01       	movw	r24, r18
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	82 0f       	add	r24, r18
    13a2:	93 1f       	adc	r25, r19
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	fc 01       	movw	r30, r24
    13ac:	ec 58       	subi	r30, 0x8C	; 140
    13ae:	ff 4f       	sbci	r31, 0xFF	; 255
    13b0:	80 81       	ld	r24, Z
    13b2:	88 23       	and	r24, r24
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <DIO_init+0x748>
    13b6:	90 c0       	rjmp	.+288    	; 0x14d8 <DIO_init+0x868>
			{
				REG_DDRC &=~(1u<<DIO_cnfg_arr[input].PIN);
    13b8:	a4 e3       	ldi	r26, 0x34	; 52
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e4 e3       	ldi	r30, 0x34	; 52
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	40 81       	ld	r20, Z
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	c9 01       	movw	r24, r18
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	82 0f       	add	r24, r18
    13d0:	93 1f       	adc	r25, r19
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	fc 01       	movw	r30, r24
    13d8:	eb 58       	subi	r30, 0x8B	; 139
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	80 81       	ld	r24, Z
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_init+0x77c>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	2a 95       	dec	r18
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_init+0x778>
    13f0:	80 95       	com	r24
    13f2:	84 23       	and	r24, r20
    13f4:	8c 93       	st	X, r24
				if (DIO_cnfg_arr[input].RES == PULLUP)
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	c9 01       	movw	r24, r18
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	82 0f       	add	r24, r18
    1404:	93 1f       	adc	r25, r19
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	fc 01       	movw	r30, r24
    140c:	e8 58       	subi	r30, 0x88	; 136
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	80 81       	ld	r24, Z
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	01 f5       	brne	.+64     	; 0x1456 <DIO_init+0x7e6>
				{
					REG_PORTC |=(1u<<DIO_cnfg_arr[input].PIN);
    1416:	a5 e3       	ldi	r26, 0x35	; 53
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e5 e3       	ldi	r30, 0x35	; 53
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	40 81       	ld	r20, Z
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	c9 01       	movw	r24, r18
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	82 0f       	add	r24, r18
    142e:	93 1f       	adc	r25, r19
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	fc 01       	movw	r30, r24
    1436:	eb 58       	subi	r30, 0x8B	; 139
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	80 81       	ld	r24, Z
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 2e       	mov	r0, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <DIO_init+0x7dc>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	0a 94       	dec	r0
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <DIO_init+0x7d8>
    1450:	84 2b       	or	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	c2 c1       	rjmp	.+900    	; 0x17da <DIO_init+0xb6a>
				}
				else if (DIO_cnfg_arr[input].RES == EXTRES)
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	c9 01       	movw	r24, r18
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	82 0f       	add	r24, r18
    1464:	93 1f       	adc	r25, r19
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	fc 01       	movw	r30, r24
    146c:	e8 58       	subi	r30, 0x88	; 136
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	80 81       	ld	r24, Z
    1472:	88 23       	and	r24, r24
    1474:	09 f5       	brne	.+66     	; 0x14b8 <DIO_init+0x848>
				{
					REG_PORTC &=~(1u<<DIO_cnfg_arr[input].PIN);
    1476:	a5 e3       	ldi	r26, 0x35	; 53
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e5 e3       	ldi	r30, 0x35	; 53
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	40 81       	ld	r20, Z
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	c9 01       	movw	r24, r18
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	82 0f       	add	r24, r18
    148e:	93 1f       	adc	r25, r19
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	fc 01       	movw	r30, r24
    1496:	eb 58       	subi	r30, 0x8B	; 139
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	80 81       	ld	r24, Z
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_init+0x83c>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_init+0x838>
    14b0:	80 95       	com	r24
    14b2:	84 23       	and	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	91 c1       	rjmp	.+802    	; 0x17da <DIO_init+0xb6a>
				}
				else
				{
					DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	c9 01       	movw	r24, r18
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	82 0f       	add	r24, r18
    14c6:	93 1f       	adc	r25, r19
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	fc 01       	movw	r30, r24
    14ce:	e7 58       	subi	r30, 0x87	; 135
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	10 82       	st	Z, r1
					retval = NOK;
    14d4:	19 82       	std	Y+1, r1	; 0x01
    14d6:	81 c1       	rjmp	.+770    	; 0x17da <DIO_init+0xb6a>
				}
			}
			else
			{
				DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	c9 01       	movw	r24, r18
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	82 0f       	add	r24, r18
    14e6:	93 1f       	adc	r25, r19
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	fc 01       	movw	r30, r24
    14ee:	e7 58       	subi	r30, 0x87	; 135
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	10 82       	st	Z, r1
				retval = NOK;
    14f4:	19 82       	std	Y+1, r1	; 0x01
    14f6:	71 c1       	rjmp	.+738    	; 0x17da <DIO_init+0xb6a>
			}
			break;
		case PORT_D:
			if(DIO_cnfg_arr[input].DIR == OUTPUT)
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	c9 01       	movw	r24, r18
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	82 0f       	add	r24, r18
    1506:	93 1f       	adc	r25, r19
    1508:	01 96       	adiw	r24, 0x01	; 1
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	fc 01       	movw	r30, r24
    1510:	ec 58       	subi	r30, 0x8C	; 140
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	80 81       	ld	r24, Z
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	09 f0       	breq	.+2      	; 0x151c <DIO_init+0x8ac>
    151a:	8f c0       	rjmp	.+286    	; 0x163a <DIO_init+0x9ca>
			{
				REG_DDRD |=(1u<<DIO_cnfg_arr[input].PIN);
    151c:	a1 e3       	ldi	r26, 0x31	; 49
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e1 e3       	ldi	r30, 0x31	; 49
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	40 81       	ld	r20, Z
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	c9 01       	movw	r24, r18
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	82 0f       	add	r24, r18
    1534:	93 1f       	adc	r25, r19
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	fc 01       	movw	r30, r24
    153c:	eb 58       	subi	r30, 0x8B	; 139
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	80 81       	ld	r24, Z
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <DIO_init+0x8e0>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	2a 95       	dec	r18
    1552:	e2 f7       	brpl	.-8      	; 0x154c <DIO_init+0x8dc>
    1554:	84 2b       	or	r24, r20
    1556:	8c 93       	st	X, r24
				if (DIO_cnfg_arr[input].OUT == HIGH)
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	c9 01       	movw	r24, r18
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	82 0f       	add	r24, r18
    1566:	93 1f       	adc	r25, r19
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	fc 01       	movw	r30, r24
    156e:	e9 58       	subi	r30, 0x89	; 137
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	80 81       	ld	r24, Z
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	01 f5       	brne	.+64     	; 0x15b8 <DIO_init+0x948>
				{
					REG_PORTD |=(1u<<DIO_cnfg_arr[input].PIN);
    1578:	a2 e3       	ldi	r26, 0x32	; 50
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e2 e3       	ldi	r30, 0x32	; 50
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	40 81       	ld	r20, Z
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	c9 01       	movw	r24, r18
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	82 0f       	add	r24, r18
    1590:	93 1f       	adc	r25, r19
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	fc 01       	movw	r30, r24
    1598:	eb 58       	subi	r30, 0x8B	; 139
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	80 81       	ld	r24, Z
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	02 2e       	mov	r0, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <DIO_init+0x93e>
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	0a 94       	dec	r0
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <DIO_init+0x93a>
    15b2:	84 2b       	or	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	11 c1       	rjmp	.+546    	; 0x17da <DIO_init+0xb6a>
				}
				else if (DIO_cnfg_arr[input].OUT == LOW)
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	c9 01       	movw	r24, r18
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	82 0f       	add	r24, r18
    15c6:	93 1f       	adc	r25, r19
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	fc 01       	movw	r30, r24
    15ce:	e9 58       	subi	r30, 0x89	; 137
    15d0:	ff 4f       	sbci	r31, 0xFF	; 255
    15d2:	80 81       	ld	r24, Z
    15d4:	88 23       	and	r24, r24
    15d6:	09 f5       	brne	.+66     	; 0x161a <DIO_init+0x9aa>
				{
					REG_PORTD &=~(1u<<DIO_cnfg_arr[input].PIN);
    15d8:	a2 e3       	ldi	r26, 0x32	; 50
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e2 e3       	ldi	r30, 0x32	; 50
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	40 81       	ld	r20, Z
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	c9 01       	movw	r24, r18
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	82 0f       	add	r24, r18
    15f0:	93 1f       	adc	r25, r19
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	fc 01       	movw	r30, r24
    15f8:	eb 58       	subi	r30, 0x8B	; 139
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	80 81       	ld	r24, Z
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <DIO_init+0x99e>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <DIO_init+0x99a>
    1612:	80 95       	com	r24
    1614:	84 23       	and	r24, r20
    1616:	8c 93       	st	X, r24
    1618:	e0 c0       	rjmp	.+448    	; 0x17da <DIO_init+0xb6a>
				}
				else
				{
					DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	c9 01       	movw	r24, r18
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	82 0f       	add	r24, r18
    1628:	93 1f       	adc	r25, r19
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	fc 01       	movw	r30, r24
    1630:	e7 58       	subi	r30, 0x87	; 135
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	10 82       	st	Z, r1
					retval = NOK;
    1636:	19 82       	std	Y+1, r1	; 0x01
    1638:	d0 c0       	rjmp	.+416    	; 0x17da <DIO_init+0xb6a>
				}
			}
			else if(DIO_cnfg_arr[input].DIR == INPUT)
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	c9 01       	movw	r24, r18
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	82 0f       	add	r24, r18
    1648:	93 1f       	adc	r25, r19
    164a:	01 96       	adiw	r24, 0x01	; 1
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	fc 01       	movw	r30, r24
    1652:	ec 58       	subi	r30, 0x8C	; 140
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	80 81       	ld	r24, Z
    1658:	88 23       	and	r24, r24
    165a:	09 f0       	breq	.+2      	; 0x165e <DIO_init+0x9ee>
    165c:	90 c0       	rjmp	.+288    	; 0x177e <DIO_init+0xb0e>
			{
				REG_DDRD &=~(1u<<DIO_cnfg_arr[input].PIN);
    165e:	a1 e3       	ldi	r26, 0x31	; 49
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e1 e3       	ldi	r30, 0x31	; 49
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	40 81       	ld	r20, Z
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	c9 01       	movw	r24, r18
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	82 0f       	add	r24, r18
    1676:	93 1f       	adc	r25, r19
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	fc 01       	movw	r30, r24
    167e:	eb 58       	subi	r30, 0x8B	; 139
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	80 81       	ld	r24, Z
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <DIO_init+0xa22>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	2a 95       	dec	r18
    1694:	e2 f7       	brpl	.-8      	; 0x168e <DIO_init+0xa1e>
    1696:	80 95       	com	r24
    1698:	84 23       	and	r24, r20
    169a:	8c 93       	st	X, r24
				if (DIO_cnfg_arr[input].RES == PULLUP)
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	c9 01       	movw	r24, r18
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	82 0f       	add	r24, r18
    16aa:	93 1f       	adc	r25, r19
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	fc 01       	movw	r30, r24
    16b2:	e8 58       	subi	r30, 0x88	; 136
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	80 81       	ld	r24, Z
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	01 f5       	brne	.+64     	; 0x16fc <DIO_init+0xa8c>
				{
					REG_PORTD |=(1u<<DIO_cnfg_arr[input].PIN);
    16bc:	a2 e3       	ldi	r26, 0x32	; 50
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e2 e3       	ldi	r30, 0x32	; 50
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	40 81       	ld	r20, Z
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	c9 01       	movw	r24, r18
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	82 0f       	add	r24, r18
    16d4:	93 1f       	adc	r25, r19
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	fc 01       	movw	r30, r24
    16dc:	eb 58       	subi	r30, 0x8B	; 139
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 81       	ld	r24, Z
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <DIO_init+0xa82>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <DIO_init+0xa7e>
    16f6:	84 2b       	or	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	6f c0       	rjmp	.+222    	; 0x17da <DIO_init+0xb6a>
				}
				else if (DIO_cnfg_arr[input].RES == EXTRES)
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	c9 01       	movw	r24, r18
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	82 0f       	add	r24, r18
    170a:	93 1f       	adc	r25, r19
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	fc 01       	movw	r30, r24
    1712:	e8 58       	subi	r30, 0x88	; 136
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	80 81       	ld	r24, Z
    1718:	88 23       	and	r24, r24
    171a:	09 f5       	brne	.+66     	; 0x175e <DIO_init+0xaee>
				{
					REG_PORTD &=~(1u<<DIO_cnfg_arr[input].PIN);
    171c:	a2 e3       	ldi	r26, 0x32	; 50
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e2 e3       	ldi	r30, 0x32	; 50
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	40 81       	ld	r20, Z
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	c9 01       	movw	r24, r18
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	82 0f       	add	r24, r18
    1734:	93 1f       	adc	r25, r19
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	fc 01       	movw	r30, r24
    173c:	eb 58       	subi	r30, 0x8B	; 139
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	80 81       	ld	r24, Z
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	02 2e       	mov	r0, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <DIO_init+0xae2>
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	0a 94       	dec	r0
    1754:	e2 f7       	brpl	.-8      	; 0x174e <DIO_init+0xade>
    1756:	80 95       	com	r24
    1758:	84 23       	and	r24, r20
    175a:	8c 93       	st	X, r24
    175c:	3e c0       	rjmp	.+124    	; 0x17da <DIO_init+0xb6a>
				}
				else
				{
					DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	c9 01       	movw	r24, r18
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	82 0f       	add	r24, r18
    176c:	93 1f       	adc	r25, r19
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	fc 01       	movw	r30, r24
    1774:	e7 58       	subi	r30, 0x87	; 135
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	10 82       	st	Z, r1
					retval = NOK;
    177a:	19 82       	std	Y+1, r1	; 0x01
    177c:	2e c0       	rjmp	.+92     	; 0x17da <DIO_init+0xb6a>
				}
			}
			else
			{
				DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	c9 01       	movw	r24, r18
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	82 0f       	add	r24, r18
    178c:	93 1f       	adc	r25, r19
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	fc 01       	movw	r30, r24
    1794:	e7 58       	subi	r30, 0x87	; 135
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	10 82       	st	Z, r1
				retval = NOK;
    179a:	19 82       	std	Y+1, r1	; 0x01
    179c:	1e c0       	rjmp	.+60     	; 0x17da <DIO_init+0xb6a>
			}
			break;
		default:
			DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	c9 01       	movw	r24, r18
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	82 0f       	add	r24, r18
    17ac:	93 1f       	adc	r25, r19
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	fc 01       	movw	r30, r24
    17b4:	e7 58       	subi	r30, 0x87	; 135
    17b6:	ff 4f       	sbci	r31, 0xFF	; 255
    17b8:	10 82       	st	Z, r1
			retval = NOK;
    17ba:	19 82       	std	Y+1, r1	; 0x01
    17bc:	0e c0       	rjmp	.+28     	; 0x17da <DIO_init+0xb6a>
		}
	}
	else
	{
		DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	c9 01       	movw	r24, r18
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	82 0f       	add	r24, r18
    17cc:	93 1f       	adc	r25, r19
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	fc 01       	movw	r30, r24
    17d4:	e7 58       	subi	r30, 0x87	; 135
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	10 82       	st	Z, r1
	}
	retval = NOK;
    17da:	19 82       	std	Y+1, r1	; 0x01
	return retval;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <DIO_read>:

Std_Func_t DIO_read (uint8 port,uint8 pin)
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <DIO_read+0x6>
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <DIO_read+0x8>
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <DIO_read+0xa>
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	8a 83       	std	Y+2, r24	; 0x02
    17fc:	6b 83       	std	Y+3, r22	; 0x03
	Std_Func_t retval = OK;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	89 83       	std	Y+1, r24	; 0x01

	switch (port)
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	3e 83       	std	Y+6, r19	; 0x06
    180a:	2d 83       	std	Y+5, r18	; 0x05
    180c:	4d 81       	ldd	r20, Y+5	; 0x05
    180e:	5e 81       	ldd	r21, Y+6	; 0x06
    1810:	41 30       	cpi	r20, 0x01	; 1
    1812:	51 05       	cpc	r21, r1
    1814:	79 f1       	breq	.+94     	; 0x1874 <DIO_read+0x88>
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	82 30       	cpi	r24, 0x02	; 2
    181c:	91 05       	cpc	r25, r1
    181e:	34 f4       	brge	.+12     	; 0x182c <DIO_read+0x40>
    1820:	2d 81       	ldd	r18, Y+5	; 0x05
    1822:	3e 81       	ldd	r19, Y+6	; 0x06
    1824:	21 15       	cp	r18, r1
    1826:	31 05       	cpc	r19, r1
    1828:	69 f0       	breq	.+26     	; 0x1844 <DIO_read+0x58>
    182a:	6c c0       	rjmp	.+216    	; 0x1904 <DIO_read+0x118>
    182c:	4d 81       	ldd	r20, Y+5	; 0x05
    182e:	5e 81       	ldd	r21, Y+6	; 0x06
    1830:	42 30       	cpi	r20, 0x02	; 2
    1832:	51 05       	cpc	r21, r1
    1834:	b9 f1       	breq	.+110    	; 0x18a4 <DIO_read+0xb8>
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	83 30       	cpi	r24, 0x03	; 3
    183c:	91 05       	cpc	r25, r1
    183e:	09 f4       	brne	.+2      	; 0x1842 <DIO_read+0x56>
    1840:	49 c0       	rjmp	.+146    	; 0x18d4 <DIO_read+0xe8>
    1842:	60 c0       	rjmp	.+192    	; 0x1904 <DIO_read+0x118>
	{
	case PORT_A:
		if((REG_PINA) & (1<<(pin)))
    1844:	e9 e3       	ldi	r30, 0x39	; 57
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	88 2f       	mov	r24, r24
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	a9 01       	movw	r20, r18
    1856:	02 c0       	rjmp	.+4      	; 0x185c <DIO_read+0x70>
    1858:	55 95       	asr	r21
    185a:	47 95       	ror	r20
    185c:	8a 95       	dec	r24
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <DIO_read+0x6c>
    1860:	ca 01       	movw	r24, r20
    1862:	81 70       	andi	r24, 0x01	; 1
    1864:	90 70       	andi	r25, 0x00	; 0
    1866:	88 23       	and	r24, r24
    1868:	19 f0       	breq	.+6      	; 0x1870 <DIO_read+0x84>
		{
			return 1;
    186a:	51 e0       	ldi	r21, 0x01	; 1
    186c:	5c 83       	std	Y+4, r21	; 0x04
    186e:	4c c0       	rjmp	.+152    	; 0x1908 <DIO_read+0x11c>
		}
		else
		{
			return 0;
    1870:	1c 82       	std	Y+4, r1	; 0x04
    1872:	4a c0       	rjmp	.+148    	; 0x1908 <DIO_read+0x11c>
		}
		break;
	case PORT_B:
		if((REG_PINB) & (1<<(pin)))
    1874:	e6 e3       	ldi	r30, 0x36	; 54
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	88 2f       	mov	r24, r24
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a9 01       	movw	r20, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <DIO_read+0xa0>
    1888:	55 95       	asr	r21
    188a:	47 95       	ror	r20
    188c:	8a 95       	dec	r24
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <DIO_read+0x9c>
    1890:	ca 01       	movw	r24, r20
    1892:	81 70       	andi	r24, 0x01	; 1
    1894:	90 70       	andi	r25, 0x00	; 0
    1896:	88 23       	and	r24, r24
    1898:	19 f0       	breq	.+6      	; 0x18a0 <DIO_read+0xb4>
		{
			return 1;
    189a:	51 e0       	ldi	r21, 0x01	; 1
    189c:	5c 83       	std	Y+4, r21	; 0x04
    189e:	34 c0       	rjmp	.+104    	; 0x1908 <DIO_read+0x11c>
		}
		else
		{
			return 0;
    18a0:	1c 82       	std	Y+4, r1	; 0x04
    18a2:	32 c0       	rjmp	.+100    	; 0x1908 <DIO_read+0x11c>
		}
		break;
	case PORT_C:
		if((REG_PINC) & (1<<(pin)))
    18a4:	e3 e3       	ldi	r30, 0x33	; 51
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a9 01       	movw	r20, r18
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <DIO_read+0xd0>
    18b8:	55 95       	asr	r21
    18ba:	47 95       	ror	r20
    18bc:	8a 95       	dec	r24
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <DIO_read+0xcc>
    18c0:	ca 01       	movw	r24, r20
    18c2:	81 70       	andi	r24, 0x01	; 1
    18c4:	90 70       	andi	r25, 0x00	; 0
    18c6:	88 23       	and	r24, r24
    18c8:	19 f0       	breq	.+6      	; 0x18d0 <DIO_read+0xe4>
		{
			return 1;
    18ca:	51 e0       	ldi	r21, 0x01	; 1
    18cc:	5c 83       	std	Y+4, r21	; 0x04
    18ce:	1c c0       	rjmp	.+56     	; 0x1908 <DIO_read+0x11c>
		}
		else
		{
			return 0;
    18d0:	1c 82       	std	Y+4, r1	; 0x04
    18d2:	1a c0       	rjmp	.+52     	; 0x1908 <DIO_read+0x11c>
		}
		break;
	case PORT_D:
		if((REG_PIND) & (1<<(pin)))
    18d4:	e0 e3       	ldi	r30, 0x30	; 48
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	88 2f       	mov	r24, r24
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a9 01       	movw	r20, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <DIO_read+0x100>
    18e8:	55 95       	asr	r21
    18ea:	47 95       	ror	r20
    18ec:	8a 95       	dec	r24
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <DIO_read+0xfc>
    18f0:	ca 01       	movw	r24, r20
    18f2:	81 70       	andi	r24, 0x01	; 1
    18f4:	90 70       	andi	r25, 0x00	; 0
    18f6:	88 23       	and	r24, r24
    18f8:	19 f0       	breq	.+6      	; 0x1900 <DIO_read+0x114>
						{
							return 1;
    18fa:	51 e0       	ldi	r21, 0x01	; 1
    18fc:	5c 83       	std	Y+4, r21	; 0x04
    18fe:	04 c0       	rjmp	.+8      	; 0x1908 <DIO_read+0x11c>
						}
						else
						{
							return 0;
    1900:	1c 82       	std	Y+4, r1	; 0x04
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <DIO_read+0x11c>
						}
		break;
	}

	return retval;
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	8c 83       	std	Y+4, r24	; 0x04
    1908:	8c 81       	ldd	r24, Y+4	; 0x04
}
    190a:	26 96       	adiw	r28, 0x06	; 6
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <DIO_write>:

Std_Func_t DIO_write (uint8 port,uint8 pin,uint8 val, PINS_t input)
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	27 97       	sbiw	r28, 0x07	; 7
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	8a 83       	std	Y+2, r24	; 0x02
    1932:	6b 83       	std	Y+3, r22	; 0x03
    1934:	4c 83       	std	Y+4, r20	; 0x04
    1936:	2d 83       	std	Y+5, r18	; 0x05
	Std_Func_t retval = OK;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	89 83       	std	Y+1, r24	; 0x01
	if ((DIO_cnfg_arr[input].PORT == port)&&(DIO_cnfg_arr[input].PIN == pin))
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	c9 01       	movw	r24, r18
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	82 0f       	add	r24, r18
    194a:	93 1f       	adc	r25, r19
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	fc 01       	movw	r30, r24
    1952:	ec 58       	subi	r30, 0x8C	; 140
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	90 81       	ld	r25, Z
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	98 17       	cp	r25, r24
    195c:	09 f0       	breq	.+2      	; 0x1960 <DIO_write+0x44>
    195e:	08 c1       	rjmp	.+528    	; 0x1b70 <DIO_write+0x254>
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	c9 01       	movw	r24, r18
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	82 0f       	add	r24, r18
    196e:	93 1f       	adc	r25, r19
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	fc 01       	movw	r30, r24
    1976:	eb 58       	subi	r30, 0x8B	; 139
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	90 81       	ld	r25, Z
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	98 17       	cp	r25, r24
    1980:	09 f0       	breq	.+2      	; 0x1984 <DIO_write+0x68>
    1982:	f6 c0       	rjmp	.+492    	; 0x1b70 <DIO_write+0x254>
	{
		if(((DIO_cnfg_arr[input].IS_init_arr == INITIALIZED))
    1984:	8d 81       	ldd	r24, Y+5	; 0x05
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	c9 01       	movw	r24, r18
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	82 0f       	add	r24, r18
    1992:	93 1f       	adc	r25, r19
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	fc 01       	movw	r30, r24
    199a:	e7 58       	subi	r30, 0x87	; 135
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	80 81       	ld	r24, Z
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	09 f0       	breq	.+2      	; 0x19a6 <DIO_write+0x8a>
    19a4:	e3 c0       	rjmp	.+454    	; 0x1b6c <DIO_write+0x250>
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	c9 01       	movw	r24, r18
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	82 0f       	add	r24, r18
    19b4:	93 1f       	adc	r25, r19
    19b6:	01 96       	adiw	r24, 0x01	; 1
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	fc 01       	movw	r30, r24
    19be:	ec 58       	subi	r30, 0x8C	; 140
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	80 81       	ld	r24, Z
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	09 f0       	breq	.+2      	; 0x19ca <DIO_write+0xae>
    19c8:	d1 c0       	rjmp	.+418    	; 0x1b6c <DIO_write+0x250>
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	21 f0       	breq	.+8      	; 0x19d8 <DIO_write+0xbc>
    19d0:	8c 81       	ldd	r24, Y+4	; 0x04
    19d2:	88 23       	and	r24, r24
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <DIO_write+0xbc>
    19d6:	ca c0       	rjmp	.+404    	; 0x1b6c <DIO_write+0x250>
				&&(DIO_cnfg_arr[input].DIR == OUTPUT)
				&&((val == HIGH)||(val == LOW)))
		{
			switch (port)
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	3f 83       	std	Y+7, r19	; 0x07
    19e0:	2e 83       	std	Y+6, r18	; 0x06
    19e2:	8e 81       	ldd	r24, Y+6	; 0x06
    19e4:	9f 81       	ldd	r25, Y+7	; 0x07
    19e6:	81 30       	cpi	r24, 0x01	; 1
    19e8:	91 05       	cpc	r25, r1
    19ea:	09 f4       	brne	.+2      	; 0x19ee <DIO_write+0xd2>
    19ec:	41 c0       	rjmp	.+130    	; 0x1a70 <DIO_write+0x154>
    19ee:	2e 81       	ldd	r18, Y+6	; 0x06
    19f0:	3f 81       	ldd	r19, Y+7	; 0x07
    19f2:	22 30       	cpi	r18, 0x02	; 2
    19f4:	31 05       	cpc	r19, r1
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <DIO_write+0xe6>
    19f8:	8e 81       	ldd	r24, Y+6	; 0x06
    19fa:	9f 81       	ldd	r25, Y+7	; 0x07
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	71 f0       	breq	.+28     	; 0x1a1c <DIO_write+0x100>
    1a00:	b8 c0       	rjmp	.+368    	; 0x1b72 <DIO_write+0x256>
    1a02:	2e 81       	ldd	r18, Y+6	; 0x06
    1a04:	3f 81       	ldd	r19, Y+7	; 0x07
    1a06:	22 30       	cpi	r18, 0x02	; 2
    1a08:	31 05       	cpc	r19, r1
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <DIO_write+0xf2>
    1a0c:	5b c0       	rjmp	.+182    	; 0x1ac4 <DIO_write+0x1a8>
    1a0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a10:	9f 81       	ldd	r25, Y+7	; 0x07
    1a12:	83 30       	cpi	r24, 0x03	; 3
    1a14:	91 05       	cpc	r25, r1
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <DIO_write+0xfe>
    1a18:	7f c0       	rjmp	.+254    	; 0x1b18 <DIO_write+0x1fc>
    1a1a:	ab c0       	rjmp	.+342    	; 0x1b72 <DIO_write+0x256>
			{
			case PORT_A:
				if (val == HIGH)
    1a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	99 f4       	brne	.+38     	; 0x1a48 <DIO_write+0x12c>
				{
					REG_PORTA |=(1u<<pin);
    1a22:	ab e3       	ldi	r26, 0x3B	; 59
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	eb e3       	ldi	r30, 0x3B	; 59
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	40 81       	ld	r20, Z
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <DIO_write+0x122>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <DIO_write+0x11e>
    1a42:	84 2b       	or	r24, r20
    1a44:	8c 93       	st	X, r24
    1a46:	95 c0       	rjmp	.+298    	; 0x1b72 <DIO_write+0x256>
				}
				else
				{
					REG_PORTA &=~(1u<<pin);
    1a48:	ab e3       	ldi	r26, 0x3B	; 59
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	eb e3       	ldi	r30, 0x3B	; 59
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	40 81       	ld	r20, Z
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <DIO_write+0x148>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <DIO_write+0x144>
    1a68:	80 95       	com	r24
    1a6a:	84 23       	and	r24, r20
    1a6c:	8c 93       	st	X, r24
    1a6e:	81 c0       	rjmp	.+258    	; 0x1b72 <DIO_write+0x256>
				}
				break;
			case PORT_B:
				if (val == HIGH)
    1a70:	8c 81       	ldd	r24, Y+4	; 0x04
    1a72:	81 30       	cpi	r24, 0x01	; 1
    1a74:	99 f4       	brne	.+38     	; 0x1a9c <DIO_write+0x180>
				{
					REG_PORTB |=(1u<<pin);
    1a76:	a8 e3       	ldi	r26, 0x38	; 56
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e8 e3       	ldi	r30, 0x38	; 56
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	40 81       	ld	r20, Z
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	02 2e       	mov	r0, r18
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <DIO_write+0x176>
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	0a 94       	dec	r0
    1a94:	e2 f7       	brpl	.-8      	; 0x1a8e <DIO_write+0x172>
    1a96:	84 2b       	or	r24, r20
    1a98:	8c 93       	st	X, r24
    1a9a:	6b c0       	rjmp	.+214    	; 0x1b72 <DIO_write+0x256>
				}
				else
				{
					REG_PORTB &=~(1u<<pin);
    1a9c:	a8 e3       	ldi	r26, 0x38	; 56
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e8 e3       	ldi	r30, 0x38	; 56
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	40 81       	ld	r20, Z
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	02 2e       	mov	r0, r18
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <DIO_write+0x19c>
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	0a 94       	dec	r0
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <DIO_write+0x198>
    1abc:	80 95       	com	r24
    1abe:	84 23       	and	r24, r20
    1ac0:	8c 93       	st	X, r24
    1ac2:	57 c0       	rjmp	.+174    	; 0x1b72 <DIO_write+0x256>
				}
				break;
			case PORT_C:
				if (val == HIGH)
    1ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac6:	81 30       	cpi	r24, 0x01	; 1
    1ac8:	99 f4       	brne	.+38     	; 0x1af0 <DIO_write+0x1d4>
				{
					REG_PORTC |=(1u<<pin);
    1aca:	a5 e3       	ldi	r26, 0x35	; 53
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e5 e3       	ldi	r30, 0x35	; 53
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	40 81       	ld	r20, Z
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	02 2e       	mov	r0, r18
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <DIO_write+0x1ca>
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	0a 94       	dec	r0
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <DIO_write+0x1c6>
    1aea:	84 2b       	or	r24, r20
    1aec:	8c 93       	st	X, r24
    1aee:	41 c0       	rjmp	.+130    	; 0x1b72 <DIO_write+0x256>
				}
				else
				{
					REG_PORTC &=~(1u<<pin);
    1af0:	a5 e3       	ldi	r26, 0x35	; 53
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e5 e3       	ldi	r30, 0x35	; 53
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	40 81       	ld	r20, Z
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	02 2e       	mov	r0, r18
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <DIO_write+0x1f0>
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	0a 94       	dec	r0
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <DIO_write+0x1ec>
    1b10:	80 95       	com	r24
    1b12:	84 23       	and	r24, r20
    1b14:	8c 93       	st	X, r24
    1b16:	2d c0       	rjmp	.+90     	; 0x1b72 <DIO_write+0x256>
				}
				break;
			case PORT_D:
				if (val == HIGH)
    1b18:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1a:	81 30       	cpi	r24, 0x01	; 1
    1b1c:	99 f4       	brne	.+38     	; 0x1b44 <DIO_write+0x228>
				{
					REG_PORTD |=(1u<<pin);
    1b1e:	a2 e3       	ldi	r26, 0x32	; 50
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e2 e3       	ldi	r30, 0x32	; 50
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	40 81       	ld	r20, Z
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	02 2e       	mov	r0, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <DIO_write+0x21e>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	0a 94       	dec	r0
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <DIO_write+0x21a>
    1b3e:	84 2b       	or	r24, r20
    1b40:	8c 93       	st	X, r24
    1b42:	17 c0       	rjmp	.+46     	; 0x1b72 <DIO_write+0x256>
				}
				else
				{
					REG_PORTD &=~(1u<<pin);
    1b44:	a2 e3       	ldi	r26, 0x32	; 50
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e2 e3       	ldi	r30, 0x32	; 50
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	40 81       	ld	r20, Z
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	02 2e       	mov	r0, r18
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <DIO_write+0x244>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	0a 94       	dec	r0
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <DIO_write+0x240>
    1b64:	80 95       	com	r24
    1b66:	84 23       	and	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	03 c0       	rjmp	.+6      	; 0x1b72 <DIO_write+0x256>
				break;
			}
		}
		else
		{
			retval = NOK;
    1b6c:	19 82       	std	Y+1, r1	; 0x01
    1b6e:	01 c0       	rjmp	.+2      	; 0x1b72 <DIO_write+0x256>
		}
	}
	else
	{
		retval = NOK;
    1b70:	19 82       	std	Y+1, r1	; 0x01
	}
	return retval;
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b74:	27 96       	adiw	r28, 0x07	; 7
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	08 95       	ret

00001b86 <LCD_init>:

#include"LCD.h"



void LCD_init(void){
    1b86:	df 93       	push	r29
    1b88:	cf 93       	push	r28
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
   /* set the control pins as output pins*/
	DIRECTION_CTRL_PINS |=(1<<RS)|(1<<RW)|(1<<E);
    1b8e:	aa e3       	ldi	r26, 0x3A	; 58
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	ea e3       	ldi	r30, 0x3A	; 58
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	8e 60       	ori	r24, 0x0E	; 14
    1b9a:	8c 93       	st	X, r24
     #ifdef FIRST_PINS
	         DIRECTION_DATA_PINS|=0x0F;
	         LCD_sendCommand(BITS_4_MODES);
	         LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
     #else
	         DIRECTION_DATA_PINS|=0xF0;
    1b9c:	aa e3       	ldi	r26, 0x3A	; 58
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	ea e3       	ldi	r30, 0x3A	; 58
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	80 6f       	ori	r24, 0xF0	; 240
    1ba8:	8c 93       	st	X, r24
	         LCD_sendCommand(BITS_4_MODES);
    1baa:	82 e0       	ldi	r24, 0x02	; 2
    1bac:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_sendCommand>
	         LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    1bb0:	88 e2       	ldi	r24, 0x28	; 40
    1bb2:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_sendCommand>
#endif



	/*display on cursor off*/
	LCD_sendCommand(CURSOR_OFF);
    1bb6:	8c e0       	ldi	r24, 0x0C	; 12
    1bb8:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_sendCommand>
	/* clear the screen first*/
	LCD_sendCommand(CLEAR_LCD);
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_sendCommand>
}
    1bc2:	cf 91       	pop	r28
    1bc4:	df 91       	pop	r29
    1bc6:	08 95       	ret

00001bc8 <LCD_sendCommand>:

void LCD_sendCommand(unit8 command){
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	c3 56       	subi	r28, 0x63	; 99
    1bd6:	d0 40       	sbci	r29, 0x00	; 0
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	fe 01       	movw	r30, r28
    1be4:	ed 59       	subi	r30, 0x9D	; 157
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	80 83       	st	Z, r24
	/*make RS=0 to send command*/
	Pin_clear(CTRL_OUTPUT_PINS  ,RS);
    1bea:	ab e3       	ldi	r26, 0x3B	; 59
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	eb e3       	ldi	r30, 0x3B	; 59
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	8d 7f       	andi	r24, 0xFD	; 253
    1bf6:	8c 93       	st	X, r24
	/*make RW=0 to write command*/
	Pin_clear(CTRL_OUTPUT_PINS ,RW);
    1bf8:	ab e3       	ldi	r26, 0x3B	; 59
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	eb e3       	ldi	r30, 0x3B	; 59
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	8b 7f       	andi	r24, 0xFB	; 251
    1c04:	8c 93       	st	X, r24
    1c06:	fe 01       	movw	r30, r28
    1c08:	e1 5a       	subi	r30, 0xA1	; 161
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a0 e8       	ldi	r26, 0x80	; 128
    1c12:	bf e3       	ldi	r27, 0x3F	; 63
    1c14:	80 83       	st	Z, r24
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	a2 83       	std	Z+2, r26	; 0x02
    1c1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1c:	8e 01       	movw	r16, r28
    1c1e:	05 5a       	subi	r16, 0xA5	; 165
    1c20:	1f 4f       	sbci	r17, 0xFF	; 255
    1c22:	fe 01       	movw	r30, r28
    1c24:	e1 5a       	subi	r30, 0xA1	; 161
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	60 81       	ld	r22, Z
    1c2a:	71 81       	ldd	r23, Z+1	; 0x01
    1c2c:	82 81       	ldd	r24, Z+2	; 0x02
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	4a ef       	ldi	r20, 0xFA	; 250
    1c36:	54 e4       	ldi	r21, 0x44	; 68
    1c38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	f8 01       	movw	r30, r16
    1c42:	80 83       	st	Z, r24
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	a2 83       	std	Z+2, r26	; 0x02
    1c48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e5 5a       	subi	r30, 0xA5	; 165
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e8       	ldi	r20, 0x80	; 128
    1c5e:	5f e3       	ldi	r21, 0x3F	; 63
    1c60:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c64:	88 23       	and	r24, r24
    1c66:	44 f4       	brge	.+16     	; 0x1c78 <LCD_sendCommand+0xb0>
		__ticks = 1;
    1c68:	fe 01       	movw	r30, r28
    1c6a:	e7 5a       	subi	r30, 0xA7	; 167
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	91 83       	std	Z+1, r25	; 0x01
    1c74:	80 83       	st	Z, r24
    1c76:	64 c0       	rjmp	.+200    	; 0x1d40 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1c78:	fe 01       	movw	r30, r28
    1c7a:	e5 5a       	subi	r30, 0xA5	; 165
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	60 81       	ld	r22, Z
    1c80:	71 81       	ldd	r23, Z+1	; 0x01
    1c82:	82 81       	ldd	r24, Z+2	; 0x02
    1c84:	93 81       	ldd	r25, Z+3	; 0x03
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	3f ef       	ldi	r19, 0xFF	; 255
    1c8a:	4f e7       	ldi	r20, 0x7F	; 127
    1c8c:	57 e4       	ldi	r21, 0x47	; 71
    1c8e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c92:	18 16       	cp	r1, r24
    1c94:	0c f0       	brlt	.+2      	; 0x1c98 <LCD_sendCommand+0xd0>
    1c96:	43 c0       	rjmp	.+134    	; 0x1d1e <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e1 5a       	subi	r30, 0xA1	; 161
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	60 81       	ld	r22, Z
    1ca0:	71 81       	ldd	r23, Z+1	; 0x01
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	93 81       	ldd	r25, Z+3	; 0x03
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e2       	ldi	r20, 0x20	; 32
    1cac:	51 e4       	ldi	r21, 0x41	; 65
    1cae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	8e 01       	movw	r16, r28
    1cb8:	07 5a       	subi	r16, 0xA7	; 167
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	f8 01       	movw	r30, r16
    1cca:	91 83       	std	Z+1, r25	; 0x01
    1ccc:	80 83       	st	Z, r24
    1cce:	1f c0       	rjmp	.+62     	; 0x1d0e <LCD_sendCommand+0x146>
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	e9 5a       	subi	r30, 0xA9	; 169
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	88 ec       	ldi	r24, 0xC8	; 200
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	91 83       	std	Z+1, r25	; 0x01
    1cdc:	80 83       	st	Z, r24
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e9 5a       	subi	r30, 0xA9	; 169
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 81       	ld	r24, Z
    1ce6:	91 81       	ldd	r25, Z+1	; 0x01
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <LCD_sendCommand+0x120>
    1cec:	fe 01       	movw	r30, r28
    1cee:	e9 5a       	subi	r30, 0xA9	; 169
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	91 83       	std	Z+1, r25	; 0x01
    1cf4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf6:	de 01       	movw	r26, r28
    1cf8:	a7 5a       	subi	r26, 0xA7	; 167
    1cfa:	bf 4f       	sbci	r27, 0xFF	; 255
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e7 5a       	subi	r30, 0xA7	; 167
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	11 96       	adiw	r26, 0x01	; 1
    1d0a:	9c 93       	st	X, r25
    1d0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0e:	fe 01       	movw	r30, r28
    1d10:	e7 5a       	subi	r30, 0xA7	; 167
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	80 81       	ld	r24, Z
    1d16:	91 81       	ldd	r25, Z+1	; 0x01
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	d1 f6       	brne	.-76     	; 0x1cd0 <LCD_sendCommand+0x108>
    1d1c:	27 c0       	rjmp	.+78     	; 0x1d6c <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1e:	8e 01       	movw	r16, r28
    1d20:	07 5a       	subi	r16, 0xA7	; 167
    1d22:	1f 4f       	sbci	r17, 0xFF	; 255
    1d24:	fe 01       	movw	r30, r28
    1d26:	e5 5a       	subi	r30, 0xA5	; 165
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	60 81       	ld	r22, Z
    1d2c:	71 81       	ldd	r23, Z+1	; 0x01
    1d2e:	82 81       	ldd	r24, Z+2	; 0x02
    1d30:	93 81       	ldd	r25, Z+3	; 0x03
    1d32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	91 83       	std	Z+1, r25	; 0x01
    1d3e:	80 83       	st	Z, r24
    1d40:	de 01       	movw	r26, r28
    1d42:	ab 5a       	subi	r26, 0xAB	; 171
    1d44:	bf 4f       	sbci	r27, 0xFF	; 255
    1d46:	fe 01       	movw	r30, r28
    1d48:	e7 5a       	subi	r30, 0xA7	; 167
    1d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4c:	80 81       	ld	r24, Z
    1d4e:	91 81       	ldd	r25, Z+1	; 0x01
    1d50:	8d 93       	st	X+, r24
    1d52:	9c 93       	st	X, r25
    1d54:	fe 01       	movw	r30, r28
    1d56:	eb 5a       	subi	r30, 0xAB	; 171
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	80 81       	ld	r24, Z
    1d5c:	91 81       	ldd	r25, Z+1	; 0x01
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <LCD_sendCommand+0x196>
    1d62:	fe 01       	movw	r30, r28
    1d64:	eb 5a       	subi	r30, 0xAB	; 171
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	91 83       	std	Z+1, r25	; 0x01
    1d6a:	80 83       	st	Z, r24
	/*wait tas before enabling 50ns */
	_delay_ms(1);
	/* Enable =1 */
	Pin_output(CTRL_OUTPUT_PINS  ,E);
    1d6c:	ab e3       	ldi	r26, 0x3B	; 59
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	eb e3       	ldi	r30, 0x3B	; 59
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	88 60       	ori	r24, 0x08	; 8
    1d78:	8c 93       	st	X, r24
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	ef 5a       	subi	r30, 0xAF	; 175
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	a0 e8       	ldi	r26, 0x80	; 128
    1d86:	bf e3       	ldi	r27, 0x3F	; 63
    1d88:	80 83       	st	Z, r24
    1d8a:	91 83       	std	Z+1, r25	; 0x01
    1d8c:	a2 83       	std	Z+2, r26	; 0x02
    1d8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d90:	8e 01       	movw	r16, r28
    1d92:	03 5b       	subi	r16, 0xB3	; 179
    1d94:	1f 4f       	sbci	r17, 0xFF	; 255
    1d96:	fe 01       	movw	r30, r28
    1d98:	ef 5a       	subi	r30, 0xAF	; 175
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	60 81       	ld	r22, Z
    1d9e:	71 81       	ldd	r23, Z+1	; 0x01
    1da0:	82 81       	ldd	r24, Z+2	; 0x02
    1da2:	93 81       	ldd	r25, Z+3	; 0x03
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	4a ef       	ldi	r20, 0xFA	; 250
    1daa:	54 e4       	ldi	r21, 0x44	; 68
    1dac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	f8 01       	movw	r30, r16
    1db6:	80 83       	st	Z, r24
    1db8:	91 83       	std	Z+1, r25	; 0x01
    1dba:	a2 83       	std	Z+2, r26	; 0x02
    1dbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e3 5b       	subi	r30, 0xB3	; 179
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	60 81       	ld	r22, Z
    1dc6:	71 81       	ldd	r23, Z+1	; 0x01
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e8       	ldi	r20, 0x80	; 128
    1dd2:	5f e3       	ldi	r21, 0x3F	; 63
    1dd4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dd8:	88 23       	and	r24, r24
    1dda:	44 f4       	brge	.+16     	; 0x1dec <LCD_sendCommand+0x224>
		__ticks = 1;
    1ddc:	fe 01       	movw	r30, r28
    1dde:	e5 5b       	subi	r30, 0xB5	; 181
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	91 83       	std	Z+1, r25	; 0x01
    1de8:	80 83       	st	Z, r24
    1dea:	64 c0       	rjmp	.+200    	; 0x1eb4 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1dec:	fe 01       	movw	r30, r28
    1dee:	e3 5b       	subi	r30, 0xB3	; 179
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	60 81       	ld	r22, Z
    1df4:	71 81       	ldd	r23, Z+1	; 0x01
    1df6:	82 81       	ldd	r24, Z+2	; 0x02
    1df8:	93 81       	ldd	r25, Z+3	; 0x03
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	3f ef       	ldi	r19, 0xFF	; 255
    1dfe:	4f e7       	ldi	r20, 0x7F	; 127
    1e00:	57 e4       	ldi	r21, 0x47	; 71
    1e02:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e06:	18 16       	cp	r1, r24
    1e08:	0c f0       	brlt	.+2      	; 0x1e0c <LCD_sendCommand+0x244>
    1e0a:	43 c0       	rjmp	.+134    	; 0x1e92 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	ef 5a       	subi	r30, 0xAF	; 175
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	60 81       	ld	r22, Z
    1e14:	71 81       	ldd	r23, Z+1	; 0x01
    1e16:	82 81       	ldd	r24, Z+2	; 0x02
    1e18:	93 81       	ldd	r25, Z+3	; 0x03
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	40 e2       	ldi	r20, 0x20	; 32
    1e20:	51 e4       	ldi	r21, 0x41	; 65
    1e22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	8e 01       	movw	r16, r28
    1e2c:	05 5b       	subi	r16, 0xB5	; 181
    1e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e30:	bc 01       	movw	r22, r24
    1e32:	cd 01       	movw	r24, r26
    1e34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	f8 01       	movw	r30, r16
    1e3e:	91 83       	std	Z+1, r25	; 0x01
    1e40:	80 83       	st	Z, r24
    1e42:	1f c0       	rjmp	.+62     	; 0x1e82 <LCD_sendCommand+0x2ba>
    1e44:	fe 01       	movw	r30, r28
    1e46:	e7 5b       	subi	r30, 0xB7	; 183
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	88 ec       	ldi	r24, 0xC8	; 200
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	91 83       	std	Z+1, r25	; 0x01
    1e50:	80 83       	st	Z, r24
    1e52:	fe 01       	movw	r30, r28
    1e54:	e7 5b       	subi	r30, 0xB7	; 183
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <LCD_sendCommand+0x294>
    1e60:	fe 01       	movw	r30, r28
    1e62:	e7 5b       	subi	r30, 0xB7	; 183
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	91 83       	std	Z+1, r25	; 0x01
    1e68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6a:	de 01       	movw	r26, r28
    1e6c:	a5 5b       	subi	r26, 0xB5	; 181
    1e6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e70:	fe 01       	movw	r30, r28
    1e72:	e5 5b       	subi	r30, 0xB5	; 181
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	80 81       	ld	r24, Z
    1e78:	91 81       	ldd	r25, Z+1	; 0x01
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	11 96       	adiw	r26, 0x01	; 1
    1e7e:	9c 93       	st	X, r25
    1e80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e82:	fe 01       	movw	r30, r28
    1e84:	e5 5b       	subi	r30, 0xB5	; 181
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	d1 f6       	brne	.-76     	; 0x1e44 <LCD_sendCommand+0x27c>
    1e90:	27 c0       	rjmp	.+78     	; 0x1ee0 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e92:	8e 01       	movw	r16, r28
    1e94:	05 5b       	subi	r16, 0xB5	; 181
    1e96:	1f 4f       	sbci	r17, 0xFF	; 255
    1e98:	fe 01       	movw	r30, r28
    1e9a:	e3 5b       	subi	r30, 0xB3	; 179
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	60 81       	ld	r22, Z
    1ea0:	71 81       	ldd	r23, Z+1	; 0x01
    1ea2:	82 81       	ldd	r24, Z+2	; 0x02
    1ea4:	93 81       	ldd	r25, Z+3	; 0x03
    1ea6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	f8 01       	movw	r30, r16
    1eb0:	91 83       	std	Z+1, r25	; 0x01
    1eb2:	80 83       	st	Z, r24
    1eb4:	de 01       	movw	r26, r28
    1eb6:	a9 5b       	subi	r26, 0xB9	; 185
    1eb8:	bf 4f       	sbci	r27, 0xFF	; 255
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e5 5b       	subi	r30, 0xB5	; 181
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	80 81       	ld	r24, Z
    1ec2:	91 81       	ldd	r25, Z+1	; 0x01
    1ec4:	8d 93       	st	X+, r24
    1ec6:	9c 93       	st	X, r25
    1ec8:	fe 01       	movw	r30, r28
    1eca:	e9 5b       	subi	r30, 0xB9	; 185
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	80 81       	ld	r24, Z
    1ed0:	91 81       	ldd	r25, Z+1	; 0x01
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <LCD_sendCommand+0x30a>
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e9 5b       	subi	r30, 0xB9	; 185
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	91 83       	std	Z+1, r25	; 0x01
    1ede:	80 83       	st	Z, r24

	   /*	DATA_OUTPUT_PINS = (DATA_OUTPUT_PINS & 0xF0) | ((command & 0xF0) >> 4);*/
	   	    TAKE_FTCOMMAND(DATA_OUTPUT_PINS,command);
     #else
	   	/*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS & 0x0F) | (command & 0xF0);*/
	   	  TAKE_FTCOMMAND(DATA_OUTPUT_PINS,command);
    1ee0:	ab e3       	ldi	r26, 0x3B	; 59
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	eb e3       	ldi	r30, 0x3B	; 59
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	98 2f       	mov	r25, r24
    1eec:	9f 70       	andi	r25, 0x0F	; 15
    1eee:	fe 01       	movw	r30, r28
    1ef0:	ed 59       	subi	r30, 0x9D	; 157
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 81       	ld	r24, Z
    1ef6:	80 7f       	andi	r24, 0xF0	; 240
    1ef8:	89 2b       	or	r24, r25
    1efa:	8c 93       	st	X, r24
    1efc:	fe 01       	movw	r30, r28
    1efe:	ed 5b       	subi	r30, 0xBD	; 189
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a0 e8       	ldi	r26, 0x80	; 128
    1f08:	bf e3       	ldi	r27, 0x3F	; 63
    1f0a:	80 83       	st	Z, r24
    1f0c:	91 83       	std	Z+1, r25	; 0x01
    1f0e:	a2 83       	std	Z+2, r26	; 0x02
    1f10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f12:	8e 01       	movw	r16, r28
    1f14:	01 5c       	subi	r16, 0xC1	; 193
    1f16:	1f 4f       	sbci	r17, 0xFF	; 255
    1f18:	fe 01       	movw	r30, r28
    1f1a:	ed 5b       	subi	r30, 0xBD	; 189
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	60 81       	ld	r22, Z
    1f20:	71 81       	ldd	r23, Z+1	; 0x01
    1f22:	82 81       	ldd	r24, Z+2	; 0x02
    1f24:	93 81       	ldd	r25, Z+3	; 0x03
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	4a ef       	ldi	r20, 0xFA	; 250
    1f2c:	54 e4       	ldi	r21, 0x44	; 68
    1f2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	f8 01       	movw	r30, r16
    1f38:	80 83       	st	Z, r24
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	a2 83       	std	Z+2, r26	; 0x02
    1f3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f40:	fe 01       	movw	r30, r28
    1f42:	ff 96       	adiw	r30, 0x3f	; 63
    1f44:	60 81       	ld	r22, Z
    1f46:	71 81       	ldd	r23, Z+1	; 0x01
    1f48:	82 81       	ldd	r24, Z+2	; 0x02
    1f4a:	93 81       	ldd	r25, Z+3	; 0x03
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e8       	ldi	r20, 0x80	; 128
    1f52:	5f e3       	ldi	r21, 0x3F	; 63
    1f54:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f58:	88 23       	and	r24, r24
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <LCD_sendCommand+0x39e>
		__ticks = 1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9e af       	std	Y+62, r25	; 0x3e
    1f62:	8d af       	std	Y+61, r24	; 0x3d
    1f64:	46 c0       	rjmp	.+140    	; 0x1ff2 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1f66:	fe 01       	movw	r30, r28
    1f68:	ff 96       	adiw	r30, 0x3f	; 63
    1f6a:	60 81       	ld	r22, Z
    1f6c:	71 81       	ldd	r23, Z+1	; 0x01
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	3f ef       	ldi	r19, 0xFF	; 255
    1f76:	4f e7       	ldi	r20, 0x7F	; 127
    1f78:	57 e4       	ldi	r21, 0x47	; 71
    1f7a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f7e:	18 16       	cp	r1, r24
    1f80:	64 f5       	brge	.+88     	; 0x1fda <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f82:	fe 01       	movw	r30, r28
    1f84:	ed 5b       	subi	r30, 0xBD	; 189
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e2       	ldi	r20, 0x20	; 32
    1f96:	51 e4       	ldi	r21, 0x41	; 65
    1f98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9e af       	std	Y+62, r25	; 0x3e
    1fae:	8d af       	std	Y+61, r24	; 0x3d
    1fb0:	0f c0       	rjmp	.+30     	; 0x1fd0 <LCD_sendCommand+0x408>
    1fb2:	88 ec       	ldi	r24, 0xC8	; 200
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9c af       	std	Y+60, r25	; 0x3c
    1fb8:	8b af       	std	Y+59, r24	; 0x3b
    1fba:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fbc:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <LCD_sendCommand+0x3f6>
    1fc2:	9c af       	std	Y+60, r25	; 0x3c
    1fc4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	9e af       	std	Y+62, r25	; 0x3e
    1fce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fd2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	69 f7       	brne	.-38     	; 0x1fb2 <LCD_sendCommand+0x3ea>
    1fd8:	16 c0       	rjmp	.+44     	; 0x2006 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fda:	fe 01       	movw	r30, r28
    1fdc:	ff 96       	adiw	r30, 0x3f	; 63
    1fde:	60 81       	ld	r22, Z
    1fe0:	71 81       	ldd	r23, Z+1	; 0x01
    1fe2:	82 81       	ldd	r24, Z+2	; 0x02
    1fe4:	93 81       	ldd	r25, Z+3	; 0x03
    1fe6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	9e af       	std	Y+62, r25	; 0x3e
    1ff0:	8d af       	std	Y+61, r24	; 0x3d
    1ff2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ff4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ff6:	9a af       	std	Y+58, r25	; 0x3a
    1ff8:	89 af       	std	Y+57, r24	; 0x39
    1ffa:	89 ad       	ldd	r24, Y+57	; 0x39
    1ffc:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <LCD_sendCommand+0x436>
    2002:	9a af       	std	Y+58, r25	; 0x3a
    2004:	89 af       	std	Y+57, r24	; 0x39
     #endif

	/*wait tdpw to make enable =0 */
	_delay_ms(1);
	/* make enable =0*/
	Pin_clear(CTRL_OUTPUT_PINS,E);
    2006:	ab e3       	ldi	r26, 0x3B	; 59
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	eb e3       	ldi	r30, 0x3B	; 59
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	87 7f       	andi	r24, 0xF7	; 247
    2012:	8c 93       	st	X, r24
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	a0 e8       	ldi	r26, 0x80	; 128
    201a:	bf e3       	ldi	r27, 0x3F	; 63
    201c:	8d ab       	std	Y+53, r24	; 0x35
    201e:	9e ab       	std	Y+54, r25	; 0x36
    2020:	af ab       	std	Y+55, r26	; 0x37
    2022:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2024:	6d a9       	ldd	r22, Y+53	; 0x35
    2026:	7e a9       	ldd	r23, Y+54	; 0x36
    2028:	8f a9       	ldd	r24, Y+55	; 0x37
    202a:	98 ad       	ldd	r25, Y+56	; 0x38
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	4a ef       	ldi	r20, 0xFA	; 250
    2032:	54 e4       	ldi	r21, 0x44	; 68
    2034:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	89 ab       	std	Y+49, r24	; 0x31
    203e:	9a ab       	std	Y+50, r25	; 0x32
    2040:	ab ab       	std	Y+51, r26	; 0x33
    2042:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2044:	69 a9       	ldd	r22, Y+49	; 0x31
    2046:	7a a9       	ldd	r23, Y+50	; 0x32
    2048:	8b a9       	ldd	r24, Y+51	; 0x33
    204a:	9c a9       	ldd	r25, Y+52	; 0x34
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e8       	ldi	r20, 0x80	; 128
    2052:	5f e3       	ldi	r21, 0x3F	; 63
    2054:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2058:	88 23       	and	r24, r24
    205a:	2c f4       	brge	.+10     	; 0x2066 <LCD_sendCommand+0x49e>
		__ticks = 1;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	98 ab       	std	Y+48, r25	; 0x30
    2062:	8f a7       	std	Y+47, r24	; 0x2f
    2064:	3f c0       	rjmp	.+126    	; 0x20e4 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    2066:	69 a9       	ldd	r22, Y+49	; 0x31
    2068:	7a a9       	ldd	r23, Y+50	; 0x32
    206a:	8b a9       	ldd	r24, Y+51	; 0x33
    206c:	9c a9       	ldd	r25, Y+52	; 0x34
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	3f ef       	ldi	r19, 0xFF	; 255
    2072:	4f e7       	ldi	r20, 0x7F	; 127
    2074:	57 e4       	ldi	r21, 0x47	; 71
    2076:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    207a:	18 16       	cp	r1, r24
    207c:	4c f5       	brge	.+82     	; 0x20d0 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207e:	6d a9       	ldd	r22, Y+53	; 0x35
    2080:	7e a9       	ldd	r23, Y+54	; 0x36
    2082:	8f a9       	ldd	r24, Y+55	; 0x37
    2084:	98 ad       	ldd	r25, Y+56	; 0x38
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e2       	ldi	r20, 0x20	; 32
    208c:	51 e4       	ldi	r21, 0x41	; 65
    208e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	bc 01       	movw	r22, r24
    2098:	cd 01       	movw	r24, r26
    209a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	98 ab       	std	Y+48, r25	; 0x30
    20a4:	8f a7       	std	Y+47, r24	; 0x2f
    20a6:	0f c0       	rjmp	.+30     	; 0x20c6 <LCD_sendCommand+0x4fe>
    20a8:	88 ec       	ldi	r24, 0xC8	; 200
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	9e a7       	std	Y+46, r25	; 0x2e
    20ae:	8d a7       	std	Y+45, r24	; 0x2d
    20b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    20b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <LCD_sendCommand+0x4ec>
    20b8:	9e a7       	std	Y+46, r25	; 0x2e
    20ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    20be:	98 a9       	ldd	r25, Y+48	; 0x30
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	98 ab       	std	Y+48, r25	; 0x30
    20c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20c8:	98 a9       	ldd	r25, Y+48	; 0x30
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	69 f7       	brne	.-38     	; 0x20a8 <LCD_sendCommand+0x4e0>
    20ce:	14 c0       	rjmp	.+40     	; 0x20f8 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d0:	69 a9       	ldd	r22, Y+49	; 0x31
    20d2:	7a a9       	ldd	r23, Y+50	; 0x32
    20d4:	8b a9       	ldd	r24, Y+51	; 0x33
    20d6:	9c a9       	ldd	r25, Y+52	; 0x34
    20d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	98 ab       	std	Y+48, r25	; 0x30
    20e2:	8f a7       	std	Y+47, r24	; 0x2f
    20e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20e6:	98 a9       	ldd	r25, Y+48	; 0x30
    20e8:	9c a7       	std	Y+44, r25	; 0x2c
    20ea:	8b a7       	std	Y+43, r24	; 0x2b
    20ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    20ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	f1 f7       	brne	.-4      	; 0x20f0 <LCD_sendCommand+0x528>
    20f4:	9c a7       	std	Y+44, r25	; 0x2c
    20f6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/*start enabling again*/

		/* Enable =1 */
		Pin_output(CTRL_OUTPUT_PINS  ,E);
    20f8:	ab e3       	ldi	r26, 0x3B	; 59
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	eb e3       	ldi	r30, 0x3B	; 59
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	88 60       	ori	r24, 0x08	; 8
    2104:	8c 93       	st	X, r24
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a0 e8       	ldi	r26, 0x80	; 128
    210c:	bf e3       	ldi	r27, 0x3F	; 63
    210e:	8f a3       	std	Y+39, r24	; 0x27
    2110:	98 a7       	std	Y+40, r25	; 0x28
    2112:	a9 a7       	std	Y+41, r26	; 0x29
    2114:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2116:	6f a1       	ldd	r22, Y+39	; 0x27
    2118:	78 a5       	ldd	r23, Y+40	; 0x28
    211a:	89 a5       	ldd	r24, Y+41	; 0x29
    211c:	9a a5       	ldd	r25, Y+42	; 0x2a
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	4a ef       	ldi	r20, 0xFA	; 250
    2124:	54 e4       	ldi	r21, 0x44	; 68
    2126:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	8b a3       	std	Y+35, r24	; 0x23
    2130:	9c a3       	std	Y+36, r25	; 0x24
    2132:	ad a3       	std	Y+37, r26	; 0x25
    2134:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2136:	6b a1       	ldd	r22, Y+35	; 0x23
    2138:	7c a1       	ldd	r23, Y+36	; 0x24
    213a:	8d a1       	ldd	r24, Y+37	; 0x25
    213c:	9e a1       	ldd	r25, Y+38	; 0x26
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e8       	ldi	r20, 0x80	; 128
    2144:	5f e3       	ldi	r21, 0x3F	; 63
    2146:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    214a:	88 23       	and	r24, r24
    214c:	2c f4       	brge	.+10     	; 0x2158 <LCD_sendCommand+0x590>
		__ticks = 1;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9a a3       	std	Y+34, r25	; 0x22
    2154:	89 a3       	std	Y+33, r24	; 0x21
    2156:	3f c0       	rjmp	.+126    	; 0x21d6 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    2158:	6b a1       	ldd	r22, Y+35	; 0x23
    215a:	7c a1       	ldd	r23, Y+36	; 0x24
    215c:	8d a1       	ldd	r24, Y+37	; 0x25
    215e:	9e a1       	ldd	r25, Y+38	; 0x26
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	3f ef       	ldi	r19, 0xFF	; 255
    2164:	4f e7       	ldi	r20, 0x7F	; 127
    2166:	57 e4       	ldi	r21, 0x47	; 71
    2168:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    216c:	18 16       	cp	r1, r24
    216e:	4c f5       	brge	.+82     	; 0x21c2 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2170:	6f a1       	ldd	r22, Y+39	; 0x27
    2172:	78 a5       	ldd	r23, Y+40	; 0x28
    2174:	89 a5       	ldd	r24, Y+41	; 0x29
    2176:	9a a5       	ldd	r25, Y+42	; 0x2a
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e2       	ldi	r20, 0x20	; 32
    217e:	51 e4       	ldi	r21, 0x41	; 65
    2180:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	9a a3       	std	Y+34, r25	; 0x22
    2196:	89 a3       	std	Y+33, r24	; 0x21
    2198:	0f c0       	rjmp	.+30     	; 0x21b8 <LCD_sendCommand+0x5f0>
    219a:	88 ec       	ldi	r24, 0xC8	; 200
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	98 a3       	std	Y+32, r25	; 0x20
    21a0:	8f 8f       	std	Y+31, r24	; 0x1f
    21a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21a4:	98 a1       	ldd	r25, Y+32	; 0x20
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <LCD_sendCommand+0x5de>
    21aa:	98 a3       	std	Y+32, r25	; 0x20
    21ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ae:	89 a1       	ldd	r24, Y+33	; 0x21
    21b0:	9a a1       	ldd	r25, Y+34	; 0x22
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	9a a3       	std	Y+34, r25	; 0x22
    21b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b8:	89 a1       	ldd	r24, Y+33	; 0x21
    21ba:	9a a1       	ldd	r25, Y+34	; 0x22
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	69 f7       	brne	.-38     	; 0x219a <LCD_sendCommand+0x5d2>
    21c0:	14 c0       	rjmp	.+40     	; 0x21ea <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c2:	6b a1       	ldd	r22, Y+35	; 0x23
    21c4:	7c a1       	ldd	r23, Y+36	; 0x24
    21c6:	8d a1       	ldd	r24, Y+37	; 0x25
    21c8:	9e a1       	ldd	r25, Y+38	; 0x26
    21ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9a a3       	std	Y+34, r25	; 0x22
    21d4:	89 a3       	std	Y+33, r24	; 0x21
    21d6:	89 a1       	ldd	r24, Y+33	; 0x21
    21d8:	9a a1       	ldd	r25, Y+34	; 0x22
    21da:	9e 8f       	std	Y+30, r25	; 0x1e
    21dc:	8d 8f       	std	Y+29, r24	; 0x1d
    21de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <LCD_sendCommand+0x61a>
    21e6:	9e 8f       	std	Y+30, r25	; 0x1e
    21e8:	8d 8f       	std	Y+29, r24	; 0x1d
		    TAKE_SCCOMMAND(DATA_OUTPUT_PINS,command);
     #else

	        /*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS&0x0F)|((command&0x0F)<<4);*/

	        TAKE_SCCOMMAND(DATA_OUTPUT_PINS,command);
    21ea:	ab e3       	ldi	r26, 0x3B	; 59
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	eb e3       	ldi	r30, 0x3B	; 59
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	28 2f       	mov	r18, r24
    21f6:	2f 70       	andi	r18, 0x0F	; 15
    21f8:	fe 01       	movw	r30, r28
    21fa:	ed 59       	subi	r30, 0x9D	; 157
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 81       	ld	r24, Z
    2200:	88 2f       	mov	r24, r24
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	82 95       	swap	r24
    2206:	92 95       	swap	r25
    2208:	90 7f       	andi	r25, 0xF0	; 240
    220a:	98 27       	eor	r25, r24
    220c:	80 7f       	andi	r24, 0xF0	; 240
    220e:	98 27       	eor	r25, r24
    2210:	82 2b       	or	r24, r18
    2212:	8c 93       	st	X, r24
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a0 e8       	ldi	r26, 0x80	; 128
    221a:	bf e3       	ldi	r27, 0x3F	; 63
    221c:	89 8f       	std	Y+25, r24	; 0x19
    221e:	9a 8f       	std	Y+26, r25	; 0x1a
    2220:	ab 8f       	std	Y+27, r26	; 0x1b
    2222:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2224:	69 8d       	ldd	r22, Y+25	; 0x19
    2226:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2228:	8b 8d       	ldd	r24, Y+27	; 0x1b
    222a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	4a ef       	ldi	r20, 0xFA	; 250
    2232:	54 e4       	ldi	r21, 0x44	; 68
    2234:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	8d 8b       	std	Y+21, r24	; 0x15
    223e:	9e 8b       	std	Y+22, r25	; 0x16
    2240:	af 8b       	std	Y+23, r26	; 0x17
    2242:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2244:	6d 89       	ldd	r22, Y+21	; 0x15
    2246:	7e 89       	ldd	r23, Y+22	; 0x16
    2248:	8f 89       	ldd	r24, Y+23	; 0x17
    224a:	98 8d       	ldd	r25, Y+24	; 0x18
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	2c f4       	brge	.+10     	; 0x2266 <LCD_sendCommand+0x69e>
		__ticks = 1;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	9c 8b       	std	Y+20, r25	; 0x14
    2262:	8b 8b       	std	Y+19, r24	; 0x13
    2264:	3f c0       	rjmp	.+126    	; 0x22e4 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    2266:	6d 89       	ldd	r22, Y+21	; 0x15
    2268:	7e 89       	ldd	r23, Y+22	; 0x16
    226a:	8f 89       	ldd	r24, Y+23	; 0x17
    226c:	98 8d       	ldd	r25, Y+24	; 0x18
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	3f ef       	ldi	r19, 0xFF	; 255
    2272:	4f e7       	ldi	r20, 0x7F	; 127
    2274:	57 e4       	ldi	r21, 0x47	; 71
    2276:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    227a:	18 16       	cp	r1, r24
    227c:	4c f5       	brge	.+82     	; 0x22d0 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227e:	69 8d       	ldd	r22, Y+25	; 0x19
    2280:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2282:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2284:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9c 8b       	std	Y+20, r25	; 0x14
    22a4:	8b 8b       	std	Y+19, r24	; 0x13
    22a6:	0f c0       	rjmp	.+30     	; 0x22c6 <LCD_sendCommand+0x6fe>
    22a8:	88 ec       	ldi	r24, 0xC8	; 200
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9a 8b       	std	Y+18, r25	; 0x12
    22ae:	89 8b       	std	Y+17, r24	; 0x11
    22b0:	89 89       	ldd	r24, Y+17	; 0x11
    22b2:	9a 89       	ldd	r25, Y+18	; 0x12
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <LCD_sendCommand+0x6ec>
    22b8:	9a 8b       	std	Y+18, r25	; 0x12
    22ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22bc:	8b 89       	ldd	r24, Y+19	; 0x13
    22be:	9c 89       	ldd	r25, Y+20	; 0x14
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	9c 8b       	std	Y+20, r25	; 0x14
    22c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c6:	8b 89       	ldd	r24, Y+19	; 0x13
    22c8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	69 f7       	brne	.-38     	; 0x22a8 <LCD_sendCommand+0x6e0>
    22ce:	14 c0       	rjmp	.+40     	; 0x22f8 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d0:	6d 89       	ldd	r22, Y+21	; 0x15
    22d2:	7e 89       	ldd	r23, Y+22	; 0x16
    22d4:	8f 89       	ldd	r24, Y+23	; 0x17
    22d6:	98 8d       	ldd	r25, Y+24	; 0x18
    22d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9c 8b       	std	Y+20, r25	; 0x14
    22e2:	8b 8b       	std	Y+19, r24	; 0x13
    22e4:	8b 89       	ldd	r24, Y+19	; 0x13
    22e6:	9c 89       	ldd	r25, Y+20	; 0x14
    22e8:	98 8b       	std	Y+16, r25	; 0x10
    22ea:	8f 87       	std	Y+15, r24	; 0x0f
    22ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ee:	98 89       	ldd	r25, Y+16	; 0x10
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <LCD_sendCommand+0x728>
    22f4:	98 8b       	std	Y+16, r25	; 0x10
    22f6:	8f 87       	std	Y+15, r24	; 0x0f

#endif
	        /*wait tdpw to make enable =0 */
	        	_delay_ms(1);
	        	/* make enable =0*/
	        	Pin_clear(CTRL_OUTPUT_PINS,E);
    22f8:	ab e3       	ldi	r26, 0x3B	; 59
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	eb e3       	ldi	r30, 0x3B	; 59
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	87 7f       	andi	r24, 0xF7	; 247
    2304:	8c 93       	st	X, r24
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	a0 e8       	ldi	r26, 0x80	; 128
    230c:	bf e3       	ldi	r27, 0x3F	; 63
    230e:	8b 87       	std	Y+11, r24	; 0x0b
    2310:	9c 87       	std	Y+12, r25	; 0x0c
    2312:	ad 87       	std	Y+13, r26	; 0x0d
    2314:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2316:	6b 85       	ldd	r22, Y+11	; 0x0b
    2318:	7c 85       	ldd	r23, Y+12	; 0x0c
    231a:	8d 85       	ldd	r24, Y+13	; 0x0d
    231c:	9e 85       	ldd	r25, Y+14	; 0x0e
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	4a ef       	ldi	r20, 0xFA	; 250
    2324:	54 e4       	ldi	r21, 0x44	; 68
    2326:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	8f 83       	std	Y+7, r24	; 0x07
    2330:	98 87       	std	Y+8, r25	; 0x08
    2332:	a9 87       	std	Y+9, r26	; 0x09
    2334:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2336:	6f 81       	ldd	r22, Y+7	; 0x07
    2338:	78 85       	ldd	r23, Y+8	; 0x08
    233a:	89 85       	ldd	r24, Y+9	; 0x09
    233c:	9a 85       	ldd	r25, Y+10	; 0x0a
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    234a:	88 23       	and	r24, r24
    234c:	2c f4       	brge	.+10     	; 0x2358 <LCD_sendCommand+0x790>
		__ticks = 1;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	8d 83       	std	Y+5, r24	; 0x05
    2356:	3f c0       	rjmp	.+126    	; 0x23d6 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    2358:	6f 81       	ldd	r22, Y+7	; 0x07
    235a:	78 85       	ldd	r23, Y+8	; 0x08
    235c:	89 85       	ldd	r24, Y+9	; 0x09
    235e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	3f ef       	ldi	r19, 0xFF	; 255
    2364:	4f e7       	ldi	r20, 0x7F	; 127
    2366:	57 e4       	ldi	r21, 0x47	; 71
    2368:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    236c:	18 16       	cp	r1, r24
    236e:	4c f5       	brge	.+82     	; 0x23c2 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2370:	6b 85       	ldd	r22, Y+11	; 0x0b
    2372:	7c 85       	ldd	r23, Y+12	; 0x0c
    2374:	8d 85       	ldd	r24, Y+13	; 0x0d
    2376:	9e 85       	ldd	r25, Y+14	; 0x0e
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e2       	ldi	r20, 0x20	; 32
    237e:	51 e4       	ldi	r21, 0x41	; 65
    2380:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
    2398:	0f c0       	rjmp	.+30     	; 0x23b8 <LCD_sendCommand+0x7f0>
    239a:	88 ec       	ldi	r24, 0xC8	; 200
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9c 83       	std	Y+4, r25	; 0x04
    23a0:	8b 83       	std	Y+3, r24	; 0x03
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	9c 81       	ldd	r25, Y+4	; 0x04
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <LCD_sendCommand+0x7de>
    23aa:	9c 83       	std	Y+4, r25	; 0x04
    23ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ae:	8d 81       	ldd	r24, Y+5	; 0x05
    23b0:	9e 81       	ldd	r25, Y+6	; 0x06
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	9e 83       	std	Y+6, r25	; 0x06
    23b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	9e 81       	ldd	r25, Y+6	; 0x06
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	69 f7       	brne	.-38     	; 0x239a <LCD_sendCommand+0x7d2>
    23c0:	14 c0       	rjmp	.+40     	; 0x23ea <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c2:	6f 81       	ldd	r22, Y+7	; 0x07
    23c4:	78 85       	ldd	r23, Y+8	; 0x08
    23c6:	89 85       	ldd	r24, Y+9	; 0x09
    23c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9e 83       	std	Y+6, r25	; 0x06
    23d4:	8d 83       	std	Y+5, r24	; 0x05
    23d6:	8d 81       	ldd	r24, Y+5	; 0x05
    23d8:	9e 81       	ldd	r25, Y+6	; 0x06
    23da:	9a 83       	std	Y+2, r25	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <LCD_sendCommand+0x81a>
    23e6:	9a 83       	std	Y+2, r25	; 0x02
    23e8:	89 83       	std	Y+1, r24	; 0x01
	        	/*wait th 13ns */
	        	_delay_ms(1);


}
    23ea:	cd 59       	subi	r28, 0x9D	; 157
    23ec:	df 4f       	sbci	r29, 0xFF	; 255
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	1f 91       	pop	r17
    23fe:	0f 91       	pop	r16
    2400:	08 95       	ret

00002402 <LCD_displayChar>:
#endif




  void LCD_displayChar(unit8 data){
    2402:	0f 93       	push	r16
    2404:	1f 93       	push	r17
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	c3 56       	subi	r28, 0x63	; 99
    2410:	d0 40       	sbci	r29, 0x00	; 0
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	fe 01       	movw	r30, r28
    241e:	ed 59       	subi	r30, 0x9D	; 157
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	80 83       	st	Z, r24
	/*make RS=1 to send data*/
	Pin_output(CTRL_OUTPUT_PINS  ,RS);
    2424:	ab e3       	ldi	r26, 0x3B	; 59
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	eb e3       	ldi	r30, 0x3B	; 59
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	82 60       	ori	r24, 0x02	; 2
    2430:	8c 93       	st	X, r24
	/*make RW=0 to write command*/
	Pin_clear(CTRL_OUTPUT_PINS  ,RW);
    2432:	ab e3       	ldi	r26, 0x3B	; 59
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	eb e3       	ldi	r30, 0x3B	; 59
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	8b 7f       	andi	r24, 0xFB	; 251
    243e:	8c 93       	st	X, r24
    2440:	fe 01       	movw	r30, r28
    2442:	e1 5a       	subi	r30, 0xA1	; 161
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	a0 e8       	ldi	r26, 0x80	; 128
    244c:	bf e3       	ldi	r27, 0x3F	; 63
    244e:	80 83       	st	Z, r24
    2450:	91 83       	std	Z+1, r25	; 0x01
    2452:	a2 83       	std	Z+2, r26	; 0x02
    2454:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2456:	8e 01       	movw	r16, r28
    2458:	05 5a       	subi	r16, 0xA5	; 165
    245a:	1f 4f       	sbci	r17, 0xFF	; 255
    245c:	fe 01       	movw	r30, r28
    245e:	e1 5a       	subi	r30, 0xA1	; 161
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	60 81       	ld	r22, Z
    2464:	71 81       	ldd	r23, Z+1	; 0x01
    2466:	82 81       	ldd	r24, Z+2	; 0x02
    2468:	93 81       	ldd	r25, Z+3	; 0x03
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	4a ef       	ldi	r20, 0xFA	; 250
    2470:	54 e4       	ldi	r21, 0x44	; 68
    2472:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	f8 01       	movw	r30, r16
    247c:	80 83       	st	Z, r24
    247e:	91 83       	std	Z+1, r25	; 0x01
    2480:	a2 83       	std	Z+2, r26	; 0x02
    2482:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2484:	fe 01       	movw	r30, r28
    2486:	e5 5a       	subi	r30, 0xA5	; 165
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	60 81       	ld	r22, Z
    248c:	71 81       	ldd	r23, Z+1	; 0x01
    248e:	82 81       	ldd	r24, Z+2	; 0x02
    2490:	93 81       	ldd	r25, Z+3	; 0x03
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e8       	ldi	r20, 0x80	; 128
    2498:	5f e3       	ldi	r21, 0x3F	; 63
    249a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    249e:	88 23       	and	r24, r24
    24a0:	44 f4       	brge	.+16     	; 0x24b2 <LCD_displayChar+0xb0>
		__ticks = 1;
    24a2:	fe 01       	movw	r30, r28
    24a4:	e7 5a       	subi	r30, 0xA7	; 167
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	91 83       	std	Z+1, r25	; 0x01
    24ae:	80 83       	st	Z, r24
    24b0:	64 c0       	rjmp	.+200    	; 0x257a <LCD_displayChar+0x178>
	else if (__tmp > 65535)
    24b2:	fe 01       	movw	r30, r28
    24b4:	e5 5a       	subi	r30, 0xA5	; 165
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	3f ef       	ldi	r19, 0xFF	; 255
    24c4:	4f e7       	ldi	r20, 0x7F	; 127
    24c6:	57 e4       	ldi	r21, 0x47	; 71
    24c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24cc:	18 16       	cp	r1, r24
    24ce:	0c f0       	brlt	.+2      	; 0x24d2 <LCD_displayChar+0xd0>
    24d0:	43 c0       	rjmp	.+134    	; 0x2558 <LCD_displayChar+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d2:	fe 01       	movw	r30, r28
    24d4:	e1 5a       	subi	r30, 0xA1	; 161
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	60 81       	ld	r22, Z
    24da:	71 81       	ldd	r23, Z+1	; 0x01
    24dc:	82 81       	ldd	r24, Z+2	; 0x02
    24de:	93 81       	ldd	r25, Z+3	; 0x03
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e2       	ldi	r20, 0x20	; 32
    24e6:	51 e4       	ldi	r21, 0x41	; 65
    24e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	8e 01       	movw	r16, r28
    24f2:	07 5a       	subi	r16, 0xA7	; 167
    24f4:	1f 4f       	sbci	r17, 0xFF	; 255
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	f8 01       	movw	r30, r16
    2504:	91 83       	std	Z+1, r25	; 0x01
    2506:	80 83       	st	Z, r24
    2508:	1f c0       	rjmp	.+62     	; 0x2548 <LCD_displayChar+0x146>
    250a:	fe 01       	movw	r30, r28
    250c:	e9 5a       	subi	r30, 0xA9	; 169
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	88 ec       	ldi	r24, 0xC8	; 200
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	91 83       	std	Z+1, r25	; 0x01
    2516:	80 83       	st	Z, r24
    2518:	fe 01       	movw	r30, r28
    251a:	e9 5a       	subi	r30, 0xA9	; 169
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	80 81       	ld	r24, Z
    2520:	91 81       	ldd	r25, Z+1	; 0x01
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	f1 f7       	brne	.-4      	; 0x2522 <LCD_displayChar+0x120>
    2526:	fe 01       	movw	r30, r28
    2528:	e9 5a       	subi	r30, 0xA9	; 169
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	91 83       	std	Z+1, r25	; 0x01
    252e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2530:	de 01       	movw	r26, r28
    2532:	a7 5a       	subi	r26, 0xA7	; 167
    2534:	bf 4f       	sbci	r27, 0xFF	; 255
    2536:	fe 01       	movw	r30, r28
    2538:	e7 5a       	subi	r30, 0xA7	; 167
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	80 81       	ld	r24, Z
    253e:	91 81       	ldd	r25, Z+1	; 0x01
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	11 96       	adiw	r26, 0x01	; 1
    2544:	9c 93       	st	X, r25
    2546:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2548:	fe 01       	movw	r30, r28
    254a:	e7 5a       	subi	r30, 0xA7	; 167
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 81       	ld	r24, Z
    2550:	91 81       	ldd	r25, Z+1	; 0x01
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	d1 f6       	brne	.-76     	; 0x250a <LCD_displayChar+0x108>
    2556:	27 c0       	rjmp	.+78     	; 0x25a6 <LCD_displayChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2558:	8e 01       	movw	r16, r28
    255a:	07 5a       	subi	r16, 0xA7	; 167
    255c:	1f 4f       	sbci	r17, 0xFF	; 255
    255e:	fe 01       	movw	r30, r28
    2560:	e5 5a       	subi	r30, 0xA5	; 165
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	60 81       	ld	r22, Z
    2566:	71 81       	ldd	r23, Z+1	; 0x01
    2568:	82 81       	ldd	r24, Z+2	; 0x02
    256a:	93 81       	ldd	r25, Z+3	; 0x03
    256c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	f8 01       	movw	r30, r16
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	80 83       	st	Z, r24
    257a:	de 01       	movw	r26, r28
    257c:	ab 5a       	subi	r26, 0xAB	; 171
    257e:	bf 4f       	sbci	r27, 0xFF	; 255
    2580:	fe 01       	movw	r30, r28
    2582:	e7 5a       	subi	r30, 0xA7	; 167
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	80 81       	ld	r24, Z
    2588:	91 81       	ldd	r25, Z+1	; 0x01
    258a:	8d 93       	st	X+, r24
    258c:	9c 93       	st	X, r25
    258e:	fe 01       	movw	r30, r28
    2590:	eb 5a       	subi	r30, 0xAB	; 171
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 81       	ld	r24, Z
    2596:	91 81       	ldd	r25, Z+1	; 0x01
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	f1 f7       	brne	.-4      	; 0x2598 <LCD_displayChar+0x196>
    259c:	fe 01       	movw	r30, r28
    259e:	eb 5a       	subi	r30, 0xAB	; 171
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	91 83       	std	Z+1, r25	; 0x01
    25a4:	80 83       	st	Z, r24
	/*wait tas before enabling 50ns */
	_delay_ms(1);
	/* Enable =1 */
	Pin_output(CTRL_OUTPUT_PINS  ,E);
    25a6:	ab e3       	ldi	r26, 0x3B	; 59
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	eb e3       	ldi	r30, 0x3B	; 59
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	88 60       	ori	r24, 0x08	; 8
    25b2:	8c 93       	st	X, r24
    25b4:	fe 01       	movw	r30, r28
    25b6:	ef 5a       	subi	r30, 0xAF	; 175
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	a0 e8       	ldi	r26, 0x80	; 128
    25c0:	bf e3       	ldi	r27, 0x3F	; 63
    25c2:	80 83       	st	Z, r24
    25c4:	91 83       	std	Z+1, r25	; 0x01
    25c6:	a2 83       	std	Z+2, r26	; 0x02
    25c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ca:	8e 01       	movw	r16, r28
    25cc:	03 5b       	subi	r16, 0xB3	; 179
    25ce:	1f 4f       	sbci	r17, 0xFF	; 255
    25d0:	fe 01       	movw	r30, r28
    25d2:	ef 5a       	subi	r30, 0xAF	; 175
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	60 81       	ld	r22, Z
    25d8:	71 81       	ldd	r23, Z+1	; 0x01
    25da:	82 81       	ldd	r24, Z+2	; 0x02
    25dc:	93 81       	ldd	r25, Z+3	; 0x03
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	4a ef       	ldi	r20, 0xFA	; 250
    25e4:	54 e4       	ldi	r21, 0x44	; 68
    25e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	f8 01       	movw	r30, r16
    25f0:	80 83       	st	Z, r24
    25f2:	91 83       	std	Z+1, r25	; 0x01
    25f4:	a2 83       	std	Z+2, r26	; 0x02
    25f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25f8:	fe 01       	movw	r30, r28
    25fa:	e3 5b       	subi	r30, 0xB3	; 179
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	60 81       	ld	r22, Z
    2600:	71 81       	ldd	r23, Z+1	; 0x01
    2602:	82 81       	ldd	r24, Z+2	; 0x02
    2604:	93 81       	ldd	r25, Z+3	; 0x03
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e8       	ldi	r20, 0x80	; 128
    260c:	5f e3       	ldi	r21, 0x3F	; 63
    260e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2612:	88 23       	and	r24, r24
    2614:	44 f4       	brge	.+16     	; 0x2626 <LCD_displayChar+0x224>
		__ticks = 1;
    2616:	fe 01       	movw	r30, r28
    2618:	e5 5b       	subi	r30, 0xB5	; 181
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	91 83       	std	Z+1, r25	; 0x01
    2622:	80 83       	st	Z, r24
    2624:	64 c0       	rjmp	.+200    	; 0x26ee <LCD_displayChar+0x2ec>
	else if (__tmp > 65535)
    2626:	fe 01       	movw	r30, r28
    2628:	e3 5b       	subi	r30, 0xB3	; 179
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	60 81       	ld	r22, Z
    262e:	71 81       	ldd	r23, Z+1	; 0x01
    2630:	82 81       	ldd	r24, Z+2	; 0x02
    2632:	93 81       	ldd	r25, Z+3	; 0x03
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	3f ef       	ldi	r19, 0xFF	; 255
    2638:	4f e7       	ldi	r20, 0x7F	; 127
    263a:	57 e4       	ldi	r21, 0x47	; 71
    263c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2640:	18 16       	cp	r1, r24
    2642:	0c f0       	brlt	.+2      	; 0x2646 <LCD_displayChar+0x244>
    2644:	43 c0       	rjmp	.+134    	; 0x26cc <LCD_displayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2646:	fe 01       	movw	r30, r28
    2648:	ef 5a       	subi	r30, 0xAF	; 175
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	60 81       	ld	r22, Z
    264e:	71 81       	ldd	r23, Z+1	; 0x01
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	93 81       	ldd	r25, Z+3	; 0x03
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e2       	ldi	r20, 0x20	; 32
    265a:	51 e4       	ldi	r21, 0x41	; 65
    265c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	8e 01       	movw	r16, r28
    2666:	05 5b       	subi	r16, 0xB5	; 181
    2668:	1f 4f       	sbci	r17, 0xFF	; 255
    266a:	bc 01       	movw	r22, r24
    266c:	cd 01       	movw	r24, r26
    266e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	f8 01       	movw	r30, r16
    2678:	91 83       	std	Z+1, r25	; 0x01
    267a:	80 83       	st	Z, r24
    267c:	1f c0       	rjmp	.+62     	; 0x26bc <LCD_displayChar+0x2ba>
    267e:	fe 01       	movw	r30, r28
    2680:	e7 5b       	subi	r30, 0xB7	; 183
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	88 ec       	ldi	r24, 0xC8	; 200
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	91 83       	std	Z+1, r25	; 0x01
    268a:	80 83       	st	Z, r24
    268c:	fe 01       	movw	r30, r28
    268e:	e7 5b       	subi	r30, 0xB7	; 183
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	80 81       	ld	r24, Z
    2694:	91 81       	ldd	r25, Z+1	; 0x01
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	f1 f7       	brne	.-4      	; 0x2696 <LCD_displayChar+0x294>
    269a:	fe 01       	movw	r30, r28
    269c:	e7 5b       	subi	r30, 0xB7	; 183
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	91 83       	std	Z+1, r25	; 0x01
    26a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a4:	de 01       	movw	r26, r28
    26a6:	a5 5b       	subi	r26, 0xB5	; 181
    26a8:	bf 4f       	sbci	r27, 0xFF	; 255
    26aa:	fe 01       	movw	r30, r28
    26ac:	e5 5b       	subi	r30, 0xB5	; 181
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	80 81       	ld	r24, Z
    26b2:	91 81       	ldd	r25, Z+1	; 0x01
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	11 96       	adiw	r26, 0x01	; 1
    26b8:	9c 93       	st	X, r25
    26ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26bc:	fe 01       	movw	r30, r28
    26be:	e5 5b       	subi	r30, 0xB5	; 181
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	80 81       	ld	r24, Z
    26c4:	91 81       	ldd	r25, Z+1	; 0x01
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	d1 f6       	brne	.-76     	; 0x267e <LCD_displayChar+0x27c>
    26ca:	27 c0       	rjmp	.+78     	; 0x271a <LCD_displayChar+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26cc:	8e 01       	movw	r16, r28
    26ce:	05 5b       	subi	r16, 0xB5	; 181
    26d0:	1f 4f       	sbci	r17, 0xFF	; 255
    26d2:	fe 01       	movw	r30, r28
    26d4:	e3 5b       	subi	r30, 0xB3	; 179
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	60 81       	ld	r22, Z
    26da:	71 81       	ldd	r23, Z+1	; 0x01
    26dc:	82 81       	ldd	r24, Z+2	; 0x02
    26de:	93 81       	ldd	r25, Z+3	; 0x03
    26e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	f8 01       	movw	r30, r16
    26ea:	91 83       	std	Z+1, r25	; 0x01
    26ec:	80 83       	st	Z, r24
    26ee:	de 01       	movw	r26, r28
    26f0:	a9 5b       	subi	r26, 0xB9	; 185
    26f2:	bf 4f       	sbci	r27, 0xFF	; 255
    26f4:	fe 01       	movw	r30, r28
    26f6:	e5 5b       	subi	r30, 0xB5	; 181
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	80 81       	ld	r24, Z
    26fc:	91 81       	ldd	r25, Z+1	; 0x01
    26fe:	8d 93       	st	X+, r24
    2700:	9c 93       	st	X, r25
    2702:	fe 01       	movw	r30, r28
    2704:	e9 5b       	subi	r30, 0xB9	; 185
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	80 81       	ld	r24, Z
    270a:	91 81       	ldd	r25, Z+1	; 0x01
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	f1 f7       	brne	.-4      	; 0x270c <LCD_displayChar+0x30a>
    2710:	fe 01       	movw	r30, r28
    2712:	e9 5b       	subi	r30, 0xB9	; 185
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	91 83       	std	Z+1, r25	; 0x01
    2718:	80 83       	st	Z, r24

	   	TAKE_FTCOMMAND(DATA_OUTPUT_PINS,data);

     #else
		/*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS & 0x0F) | (data & 0xF0);*/
		TAKE_FTCOMMAND(DATA_OUTPUT_PINS,data);
    271a:	ab e3       	ldi	r26, 0x3B	; 59
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	eb e3       	ldi	r30, 0x3B	; 59
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	98 2f       	mov	r25, r24
    2726:	9f 70       	andi	r25, 0x0F	; 15
    2728:	fe 01       	movw	r30, r28
    272a:	ed 59       	subi	r30, 0x9D	; 157
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 81       	ld	r24, Z
    2730:	80 7f       	andi	r24, 0xF0	; 240
    2732:	89 2b       	or	r24, r25
    2734:	8c 93       	st	X, r24
    2736:	fe 01       	movw	r30, r28
    2738:	ed 5b       	subi	r30, 0xBD	; 189
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	a0 e8       	ldi	r26, 0x80	; 128
    2742:	bf e3       	ldi	r27, 0x3F	; 63
    2744:	80 83       	st	Z, r24
    2746:	91 83       	std	Z+1, r25	; 0x01
    2748:	a2 83       	std	Z+2, r26	; 0x02
    274a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274c:	8e 01       	movw	r16, r28
    274e:	01 5c       	subi	r16, 0xC1	; 193
    2750:	1f 4f       	sbci	r17, 0xFF	; 255
    2752:	fe 01       	movw	r30, r28
    2754:	ed 5b       	subi	r30, 0xBD	; 189
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	60 81       	ld	r22, Z
    275a:	71 81       	ldd	r23, Z+1	; 0x01
    275c:	82 81       	ldd	r24, Z+2	; 0x02
    275e:	93 81       	ldd	r25, Z+3	; 0x03
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4a ef       	ldi	r20, 0xFA	; 250
    2766:	54 e4       	ldi	r21, 0x44	; 68
    2768:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	f8 01       	movw	r30, r16
    2772:	80 83       	st	Z, r24
    2774:	91 83       	std	Z+1, r25	; 0x01
    2776:	a2 83       	std	Z+2, r26	; 0x02
    2778:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    277a:	fe 01       	movw	r30, r28
    277c:	ff 96       	adiw	r30, 0x3f	; 63
    277e:	60 81       	ld	r22, Z
    2780:	71 81       	ldd	r23, Z+1	; 0x01
    2782:	82 81       	ldd	r24, Z+2	; 0x02
    2784:	93 81       	ldd	r25, Z+3	; 0x03
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e8       	ldi	r20, 0x80	; 128
    278c:	5f e3       	ldi	r21, 0x3F	; 63
    278e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2792:	88 23       	and	r24, r24
    2794:	2c f4       	brge	.+10     	; 0x27a0 <LCD_displayChar+0x39e>
		__ticks = 1;
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	9e af       	std	Y+62, r25	; 0x3e
    279c:	8d af       	std	Y+61, r24	; 0x3d
    279e:	46 c0       	rjmp	.+140    	; 0x282c <LCD_displayChar+0x42a>
	else if (__tmp > 65535)
    27a0:	fe 01       	movw	r30, r28
    27a2:	ff 96       	adiw	r30, 0x3f	; 63
    27a4:	60 81       	ld	r22, Z
    27a6:	71 81       	ldd	r23, Z+1	; 0x01
    27a8:	82 81       	ldd	r24, Z+2	; 0x02
    27aa:	93 81       	ldd	r25, Z+3	; 0x03
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	3f ef       	ldi	r19, 0xFF	; 255
    27b0:	4f e7       	ldi	r20, 0x7F	; 127
    27b2:	57 e4       	ldi	r21, 0x47	; 71
    27b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27b8:	18 16       	cp	r1, r24
    27ba:	64 f5       	brge	.+88     	; 0x2814 <LCD_displayChar+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27bc:	fe 01       	movw	r30, r28
    27be:	ed 5b       	subi	r30, 0xBD	; 189
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	60 81       	ld	r22, Z
    27c4:	71 81       	ldd	r23, Z+1	; 0x01
    27c6:	82 81       	ldd	r24, Z+2	; 0x02
    27c8:	93 81       	ldd	r25, Z+3	; 0x03
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e2       	ldi	r20, 0x20	; 32
    27d0:	51 e4       	ldi	r21, 0x41	; 65
    27d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	bc 01       	movw	r22, r24
    27dc:	cd 01       	movw	r24, r26
    27de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	9e af       	std	Y+62, r25	; 0x3e
    27e8:	8d af       	std	Y+61, r24	; 0x3d
    27ea:	0f c0       	rjmp	.+30     	; 0x280a <LCD_displayChar+0x408>
    27ec:	88 ec       	ldi	r24, 0xC8	; 200
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9c af       	std	Y+60, r25	; 0x3c
    27f2:	8b af       	std	Y+59, r24	; 0x3b
    27f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    27f6:	9c ad       	ldd	r25, Y+60	; 0x3c
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <LCD_displayChar+0x3f6>
    27fc:	9c af       	std	Y+60, r25	; 0x3c
    27fe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2800:	8d ad       	ldd	r24, Y+61	; 0x3d
    2802:	9e ad       	ldd	r25, Y+62	; 0x3e
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	9e af       	std	Y+62, r25	; 0x3e
    2808:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280a:	8d ad       	ldd	r24, Y+61	; 0x3d
    280c:	9e ad       	ldd	r25, Y+62	; 0x3e
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	69 f7       	brne	.-38     	; 0x27ec <LCD_displayChar+0x3ea>
    2812:	16 c0       	rjmp	.+44     	; 0x2840 <LCD_displayChar+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2814:	fe 01       	movw	r30, r28
    2816:	ff 96       	adiw	r30, 0x3f	; 63
    2818:	60 81       	ld	r22, Z
    281a:	71 81       	ldd	r23, Z+1	; 0x01
    281c:	82 81       	ldd	r24, Z+2	; 0x02
    281e:	93 81       	ldd	r25, Z+3	; 0x03
    2820:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	9e af       	std	Y+62, r25	; 0x3e
    282a:	8d af       	std	Y+61, r24	; 0x3d
    282c:	8d ad       	ldd	r24, Y+61	; 0x3d
    282e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2830:	9a af       	std	Y+58, r25	; 0x3a
    2832:	89 af       	std	Y+57, r24	; 0x39
    2834:	89 ad       	ldd	r24, Y+57	; 0x39
    2836:	9a ad       	ldd	r25, Y+58	; 0x3a
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	f1 f7       	brne	.-4      	; 0x2838 <LCD_displayChar+0x436>
    283c:	9a af       	std	Y+58, r25	; 0x3a
    283e:	89 af       	std	Y+57, r24	; 0x39
     #endif

	/*wait tdpw to make enable =0 */
	_delay_ms(1);
	/* make enable =0*/
	Pin_clear(CTRL_OUTPUT_PINS,E);
    2840:	ab e3       	ldi	r26, 0x3B	; 59
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	eb e3       	ldi	r30, 0x3B	; 59
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	87 7f       	andi	r24, 0xF7	; 247
    284c:	8c 93       	st	X, r24
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	a0 e8       	ldi	r26, 0x80	; 128
    2854:	bf e3       	ldi	r27, 0x3F	; 63
    2856:	8d ab       	std	Y+53, r24	; 0x35
    2858:	9e ab       	std	Y+54, r25	; 0x36
    285a:	af ab       	std	Y+55, r26	; 0x37
    285c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285e:	6d a9       	ldd	r22, Y+53	; 0x35
    2860:	7e a9       	ldd	r23, Y+54	; 0x36
    2862:	8f a9       	ldd	r24, Y+55	; 0x37
    2864:	98 ad       	ldd	r25, Y+56	; 0x38
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	4a ef       	ldi	r20, 0xFA	; 250
    286c:	54 e4       	ldi	r21, 0x44	; 68
    286e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	89 ab       	std	Y+49, r24	; 0x31
    2878:	9a ab       	std	Y+50, r25	; 0x32
    287a:	ab ab       	std	Y+51, r26	; 0x33
    287c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    287e:	69 a9       	ldd	r22, Y+49	; 0x31
    2880:	7a a9       	ldd	r23, Y+50	; 0x32
    2882:	8b a9       	ldd	r24, Y+51	; 0x33
    2884:	9c a9       	ldd	r25, Y+52	; 0x34
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e8       	ldi	r20, 0x80	; 128
    288c:	5f e3       	ldi	r21, 0x3F	; 63
    288e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2892:	88 23       	and	r24, r24
    2894:	2c f4       	brge	.+10     	; 0x28a0 <LCD_displayChar+0x49e>
		__ticks = 1;
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	98 ab       	std	Y+48, r25	; 0x30
    289c:	8f a7       	std	Y+47, r24	; 0x2f
    289e:	3f c0       	rjmp	.+126    	; 0x291e <LCD_displayChar+0x51c>
	else if (__tmp > 65535)
    28a0:	69 a9       	ldd	r22, Y+49	; 0x31
    28a2:	7a a9       	ldd	r23, Y+50	; 0x32
    28a4:	8b a9       	ldd	r24, Y+51	; 0x33
    28a6:	9c a9       	ldd	r25, Y+52	; 0x34
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	3f ef       	ldi	r19, 0xFF	; 255
    28ac:	4f e7       	ldi	r20, 0x7F	; 127
    28ae:	57 e4       	ldi	r21, 0x47	; 71
    28b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28b4:	18 16       	cp	r1, r24
    28b6:	4c f5       	brge	.+82     	; 0x290a <LCD_displayChar+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b8:	6d a9       	ldd	r22, Y+53	; 0x35
    28ba:	7e a9       	ldd	r23, Y+54	; 0x36
    28bc:	8f a9       	ldd	r24, Y+55	; 0x37
    28be:	98 ad       	ldd	r25, Y+56	; 0x38
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	40 e2       	ldi	r20, 0x20	; 32
    28c6:	51 e4       	ldi	r21, 0x41	; 65
    28c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	bc 01       	movw	r22, r24
    28d2:	cd 01       	movw	r24, r26
    28d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	98 ab       	std	Y+48, r25	; 0x30
    28de:	8f a7       	std	Y+47, r24	; 0x2f
    28e0:	0f c0       	rjmp	.+30     	; 0x2900 <LCD_displayChar+0x4fe>
    28e2:	88 ec       	ldi	r24, 0xC8	; 200
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	9e a7       	std	Y+46, r25	; 0x2e
    28e8:	8d a7       	std	Y+45, r24	; 0x2d
    28ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    28ec:	9e a5       	ldd	r25, Y+46	; 0x2e
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <LCD_displayChar+0x4ec>
    28f2:	9e a7       	std	Y+46, r25	; 0x2e
    28f4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28f8:	98 a9       	ldd	r25, Y+48	; 0x30
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	98 ab       	std	Y+48, r25	; 0x30
    28fe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2900:	8f a5       	ldd	r24, Y+47	; 0x2f
    2902:	98 a9       	ldd	r25, Y+48	; 0x30
    2904:	00 97       	sbiw	r24, 0x00	; 0
    2906:	69 f7       	brne	.-38     	; 0x28e2 <LCD_displayChar+0x4e0>
    2908:	14 c0       	rjmp	.+40     	; 0x2932 <LCD_displayChar+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290a:	69 a9       	ldd	r22, Y+49	; 0x31
    290c:	7a a9       	ldd	r23, Y+50	; 0x32
    290e:	8b a9       	ldd	r24, Y+51	; 0x33
    2910:	9c a9       	ldd	r25, Y+52	; 0x34
    2912:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	98 ab       	std	Y+48, r25	; 0x30
    291c:	8f a7       	std	Y+47, r24	; 0x2f
    291e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2920:	98 a9       	ldd	r25, Y+48	; 0x30
    2922:	9c a7       	std	Y+44, r25	; 0x2c
    2924:	8b a7       	std	Y+43, r24	; 0x2b
    2926:	8b a5       	ldd	r24, Y+43	; 0x2b
    2928:	9c a5       	ldd	r25, Y+44	; 0x2c
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	f1 f7       	brne	.-4      	; 0x292a <LCD_displayChar+0x528>
    292e:	9c a7       	std	Y+44, r25	; 0x2c
    2930:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/*start enabling again*/

		/* Enable =1 */
		Pin_output(CTRL_OUTPUT_PINS  ,E);
    2932:	ab e3       	ldi	r26, 0x3B	; 59
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	eb e3       	ldi	r30, 0x3B	; 59
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	88 60       	ori	r24, 0x08	; 8
    293e:	8c 93       	st	X, r24
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	a0 e8       	ldi	r26, 0x80	; 128
    2946:	bf e3       	ldi	r27, 0x3F	; 63
    2948:	8f a3       	std	Y+39, r24	; 0x27
    294a:	98 a7       	std	Y+40, r25	; 0x28
    294c:	a9 a7       	std	Y+41, r26	; 0x29
    294e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2950:	6f a1       	ldd	r22, Y+39	; 0x27
    2952:	78 a5       	ldd	r23, Y+40	; 0x28
    2954:	89 a5       	ldd	r24, Y+41	; 0x29
    2956:	9a a5       	ldd	r25, Y+42	; 0x2a
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	4a ef       	ldi	r20, 0xFA	; 250
    295e:	54 e4       	ldi	r21, 0x44	; 68
    2960:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	8b a3       	std	Y+35, r24	; 0x23
    296a:	9c a3       	std	Y+36, r25	; 0x24
    296c:	ad a3       	std	Y+37, r26	; 0x25
    296e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2970:	6b a1       	ldd	r22, Y+35	; 0x23
    2972:	7c a1       	ldd	r23, Y+36	; 0x24
    2974:	8d a1       	ldd	r24, Y+37	; 0x25
    2976:	9e a1       	ldd	r25, Y+38	; 0x26
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	40 e8       	ldi	r20, 0x80	; 128
    297e:	5f e3       	ldi	r21, 0x3F	; 63
    2980:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2984:	88 23       	and	r24, r24
    2986:	2c f4       	brge	.+10     	; 0x2992 <LCD_displayChar+0x590>
		__ticks = 1;
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	9a a3       	std	Y+34, r25	; 0x22
    298e:	89 a3       	std	Y+33, r24	; 0x21
    2990:	3f c0       	rjmp	.+126    	; 0x2a10 <LCD_displayChar+0x60e>
	else if (__tmp > 65535)
    2992:	6b a1       	ldd	r22, Y+35	; 0x23
    2994:	7c a1       	ldd	r23, Y+36	; 0x24
    2996:	8d a1       	ldd	r24, Y+37	; 0x25
    2998:	9e a1       	ldd	r25, Y+38	; 0x26
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	3f ef       	ldi	r19, 0xFF	; 255
    299e:	4f e7       	ldi	r20, 0x7F	; 127
    29a0:	57 e4       	ldi	r21, 0x47	; 71
    29a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29a6:	18 16       	cp	r1, r24
    29a8:	4c f5       	brge	.+82     	; 0x29fc <LCD_displayChar+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29aa:	6f a1       	ldd	r22, Y+39	; 0x27
    29ac:	78 a5       	ldd	r23, Y+40	; 0x28
    29ae:	89 a5       	ldd	r24, Y+41	; 0x29
    29b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	40 e2       	ldi	r20, 0x20	; 32
    29b8:	51 e4       	ldi	r21, 0x41	; 65
    29ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	bc 01       	movw	r22, r24
    29c4:	cd 01       	movw	r24, r26
    29c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	9a a3       	std	Y+34, r25	; 0x22
    29d0:	89 a3       	std	Y+33, r24	; 0x21
    29d2:	0f c0       	rjmp	.+30     	; 0x29f2 <LCD_displayChar+0x5f0>
    29d4:	88 ec       	ldi	r24, 0xC8	; 200
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	98 a3       	std	Y+32, r25	; 0x20
    29da:	8f 8f       	std	Y+31, r24	; 0x1f
    29dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29de:	98 a1       	ldd	r25, Y+32	; 0x20
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <LCD_displayChar+0x5de>
    29e4:	98 a3       	std	Y+32, r25	; 0x20
    29e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e8:	89 a1       	ldd	r24, Y+33	; 0x21
    29ea:	9a a1       	ldd	r25, Y+34	; 0x22
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	9a a3       	std	Y+34, r25	; 0x22
    29f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f2:	89 a1       	ldd	r24, Y+33	; 0x21
    29f4:	9a a1       	ldd	r25, Y+34	; 0x22
    29f6:	00 97       	sbiw	r24, 0x00	; 0
    29f8:	69 f7       	brne	.-38     	; 0x29d4 <LCD_displayChar+0x5d2>
    29fa:	14 c0       	rjmp	.+40     	; 0x2a24 <LCD_displayChar+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fc:	6b a1       	ldd	r22, Y+35	; 0x23
    29fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2a00:	8d a1       	ldd	r24, Y+37	; 0x25
    2a02:	9e a1       	ldd	r25, Y+38	; 0x26
    2a04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	9a a3       	std	Y+34, r25	; 0x22
    2a0e:	89 a3       	std	Y+33, r24	; 0x21
    2a10:	89 a1       	ldd	r24, Y+33	; 0x21
    2a12:	9a a1       	ldd	r25, Y+34	; 0x22
    2a14:	9e 8f       	std	Y+30, r25	; 0x1e
    2a16:	8d 8f       	std	Y+29, r24	; 0x1d
    2a18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	f1 f7       	brne	.-4      	; 0x2a1c <LCD_displayChar+0x61a>
    2a20:	9e 8f       	std	Y+30, r25	; 0x1e
    2a22:	8d 8f       	std	Y+29, r24	; 0x1d
		/*DATA_OUTPUT_PINS = (DATA_OUTPUT_PINS& 0xF0) | (data & 0x0F);*/
		  TAKE_SCCOMMAND(DATA_OUTPUT_PINS,data);

     #else
	        /*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS&0x0F)|((data&0x0F)<<4);*/
		     TAKE_SCCOMMAND(DATA_OUTPUT_PINS,data);
    2a24:	ab e3       	ldi	r26, 0x3B	; 59
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	eb e3       	ldi	r30, 0x3B	; 59
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	28 2f       	mov	r18, r24
    2a30:	2f 70       	andi	r18, 0x0F	; 15
    2a32:	fe 01       	movw	r30, r28
    2a34:	ed 59       	subi	r30, 0x9D	; 157
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	80 81       	ld	r24, Z
    2a3a:	88 2f       	mov	r24, r24
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	82 95       	swap	r24
    2a40:	92 95       	swap	r25
    2a42:	90 7f       	andi	r25, 0xF0	; 240
    2a44:	98 27       	eor	r25, r24
    2a46:	80 7f       	andi	r24, 0xF0	; 240
    2a48:	98 27       	eor	r25, r24
    2a4a:	82 2b       	or	r24, r18
    2a4c:	8c 93       	st	X, r24
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	a0 e8       	ldi	r26, 0x80	; 128
    2a54:	bf e3       	ldi	r27, 0x3F	; 63
    2a56:	89 8f       	std	Y+25, r24	; 0x19
    2a58:	9a 8f       	std	Y+26, r25	; 0x1a
    2a5a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	4a ef       	ldi	r20, 0xFA	; 250
    2a6c:	54 e4       	ldi	r21, 0x44	; 68
    2a6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	8d 8b       	std	Y+21, r24	; 0x15
    2a78:	9e 8b       	std	Y+22, r25	; 0x16
    2a7a:	af 8b       	std	Y+23, r26	; 0x17
    2a7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a80:	7e 89       	ldd	r23, Y+22	; 0x16
    2a82:	8f 89       	ldd	r24, Y+23	; 0x17
    2a84:	98 8d       	ldd	r25, Y+24	; 0x18
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e8       	ldi	r20, 0x80	; 128
    2a8c:	5f e3       	ldi	r21, 0x3F	; 63
    2a8e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a92:	88 23       	and	r24, r24
    2a94:	2c f4       	brge	.+10     	; 0x2aa0 <LCD_displayChar+0x69e>
		__ticks = 1;
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	9c 8b       	std	Y+20, r25	; 0x14
    2a9c:	8b 8b       	std	Y+19, r24	; 0x13
    2a9e:	3f c0       	rjmp	.+126    	; 0x2b1e <LCD_displayChar+0x71c>
	else if (__tmp > 65535)
    2aa0:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa2:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	3f ef       	ldi	r19, 0xFF	; 255
    2aac:	4f e7       	ldi	r20, 0x7F	; 127
    2aae:	57 e4       	ldi	r21, 0x47	; 71
    2ab0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ab4:	18 16       	cp	r1, r24
    2ab6:	4c f5       	brge	.+82     	; 0x2b0a <LCD_displayChar+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab8:	69 8d       	ldd	r22, Y+25	; 0x19
    2aba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2abc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2abe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e2       	ldi	r20, 0x20	; 32
    2ac6:	51 e4       	ldi	r21, 0x41	; 65
    2ac8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	bc 01       	movw	r22, r24
    2ad2:	cd 01       	movw	r24, r26
    2ad4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	9c 8b       	std	Y+20, r25	; 0x14
    2ade:	8b 8b       	std	Y+19, r24	; 0x13
    2ae0:	0f c0       	rjmp	.+30     	; 0x2b00 <LCD_displayChar+0x6fe>
    2ae2:	88 ec       	ldi	r24, 0xC8	; 200
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	9a 8b       	std	Y+18, r25	; 0x12
    2ae8:	89 8b       	std	Y+17, r24	; 0x11
    2aea:	89 89       	ldd	r24, Y+17	; 0x11
    2aec:	9a 89       	ldd	r25, Y+18	; 0x12
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	f1 f7       	brne	.-4      	; 0x2aee <LCD_displayChar+0x6ec>
    2af2:	9a 8b       	std	Y+18, r25	; 0x12
    2af4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af6:	8b 89       	ldd	r24, Y+19	; 0x13
    2af8:	9c 89       	ldd	r25, Y+20	; 0x14
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	9c 8b       	std	Y+20, r25	; 0x14
    2afe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b00:	8b 89       	ldd	r24, Y+19	; 0x13
    2b02:	9c 89       	ldd	r25, Y+20	; 0x14
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	69 f7       	brne	.-38     	; 0x2ae2 <LCD_displayChar+0x6e0>
    2b08:	14 c0       	rjmp	.+40     	; 0x2b32 <LCD_displayChar+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b10:	98 8d       	ldd	r25, Y+24	; 0x18
    2b12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9c 8b       	std	Y+20, r25	; 0x14
    2b1c:	8b 8b       	std	Y+19, r24	; 0x13
    2b1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b20:	9c 89       	ldd	r25, Y+20	; 0x14
    2b22:	98 8b       	std	Y+16, r25	; 0x10
    2b24:	8f 87       	std	Y+15, r24	; 0x0f
    2b26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b28:	98 89       	ldd	r25, Y+16	; 0x10
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <LCD_displayChar+0x728>
    2b2e:	98 8b       	std	Y+16, r25	; 0x10
    2b30:	8f 87       	std	Y+15, r24	; 0x0f

#endif
	        /*wait tdpw to make enable =0 */
	        	_delay_ms(1);
	        	/* make enable =0*/
	        	Pin_clear(CTRL_OUTPUT_PINS,E);
    2b32:	ab e3       	ldi	r26, 0x3B	; 59
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	eb e3       	ldi	r30, 0x3B	; 59
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	87 7f       	andi	r24, 0xF7	; 247
    2b3e:	8c 93       	st	X, r24
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	a0 e8       	ldi	r26, 0x80	; 128
    2b46:	bf e3       	ldi	r27, 0x3F	; 63
    2b48:	8b 87       	std	Y+11, r24	; 0x0b
    2b4a:	9c 87       	std	Y+12, r25	; 0x0c
    2b4c:	ad 87       	std	Y+13, r26	; 0x0d
    2b4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	4a ef       	ldi	r20, 0xFA	; 250
    2b5e:	54 e4       	ldi	r21, 0x44	; 68
    2b60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	8f 83       	std	Y+7, r24	; 0x07
    2b6a:	98 87       	std	Y+8, r25	; 0x08
    2b6c:	a9 87       	std	Y+9, r26	; 0x09
    2b6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b70:	6f 81       	ldd	r22, Y+7	; 0x07
    2b72:	78 85       	ldd	r23, Y+8	; 0x08
    2b74:	89 85       	ldd	r24, Y+9	; 0x09
    2b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e8       	ldi	r20, 0x80	; 128
    2b7e:	5f e3       	ldi	r21, 0x3F	; 63
    2b80:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b84:	88 23       	and	r24, r24
    2b86:	2c f4       	brge	.+10     	; 0x2b92 <LCD_displayChar+0x790>
		__ticks = 1;
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	9e 83       	std	Y+6, r25	; 0x06
    2b8e:	8d 83       	std	Y+5, r24	; 0x05
    2b90:	3f c0       	rjmp	.+126    	; 0x2c10 <LCD_displayChar+0x80e>
	else if (__tmp > 65535)
    2b92:	6f 81       	ldd	r22, Y+7	; 0x07
    2b94:	78 85       	ldd	r23, Y+8	; 0x08
    2b96:	89 85       	ldd	r24, Y+9	; 0x09
    2b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	3f ef       	ldi	r19, 0xFF	; 255
    2b9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ba0:	57 e4       	ldi	r21, 0x47	; 71
    2ba2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ba6:	18 16       	cp	r1, r24
    2ba8:	4c f5       	brge	.+82     	; 0x2bfc <LCD_displayChar+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2baa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e2       	ldi	r20, 0x20	; 32
    2bb8:	51 e4       	ldi	r21, 0x41	; 65
    2bba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	bc 01       	movw	r22, r24
    2bc4:	cd 01       	movw	r24, r26
    2bc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	9e 83       	std	Y+6, r25	; 0x06
    2bd0:	8d 83       	std	Y+5, r24	; 0x05
    2bd2:	0f c0       	rjmp	.+30     	; 0x2bf2 <LCD_displayChar+0x7f0>
    2bd4:	88 ec       	ldi	r24, 0xC8	; 200
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	9c 83       	std	Y+4, r25	; 0x04
    2bda:	8b 83       	std	Y+3, r24	; 0x03
    2bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bde:	9c 81       	ldd	r25, Y+4	; 0x04
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <LCD_displayChar+0x7de>
    2be4:	9c 83       	std	Y+4, r25	; 0x04
    2be6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bea:	9e 81       	ldd	r25, Y+6	; 0x06
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	9e 83       	std	Y+6, r25	; 0x06
    2bf0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf6:	00 97       	sbiw	r24, 0x00	; 0
    2bf8:	69 f7       	brne	.-38     	; 0x2bd4 <LCD_displayChar+0x7d2>
    2bfa:	14 c0       	rjmp	.+40     	; 0x2c24 <LCD_displayChar+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfe:	78 85       	ldd	r23, Y+8	; 0x08
    2c00:	89 85       	ldd	r24, Y+9	; 0x09
    2c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	9e 83       	std	Y+6, r25	; 0x06
    2c0e:	8d 83       	std	Y+5, r24	; 0x05
    2c10:	8d 81       	ldd	r24, Y+5	; 0x05
    2c12:	9e 81       	ldd	r25, Y+6	; 0x06
    2c14:	9a 83       	std	Y+2, r25	; 0x02
    2c16:	89 83       	std	Y+1, r24	; 0x01
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <LCD_displayChar+0x81a>
    2c20:	9a 83       	std	Y+2, r25	; 0x02
    2c22:	89 83       	std	Y+1, r24	; 0x01
	        	/*wait th 13ns */
	        	_delay_ms(1);


}
    2c24:	cd 59       	subi	r28, 0x9D	; 157
    2c26:	df 4f       	sbci	r29, 0xFF	; 255
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	cf 91       	pop	r28
    2c34:	df 91       	pop	r29
    2c36:	1f 91       	pop	r17
    2c38:	0f 91       	pop	r16
    2c3a:	08 95       	ret

00002c3c <LCD_displayString>:




   void LCD_displayString(const char *Str)
   {
    2c3c:	df 93       	push	r29
    2c3e:	cf 93       	push	r28
    2c40:	00 d0       	rcall	.+0      	; 0x2c42 <LCD_displayString+0x6>
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	9a 83       	std	Y+2, r25	; 0x02
    2c48:	89 83       	std	Y+1, r24	; 0x01
    2c4a:	0a c0       	rjmp	.+20     	; 0x2c60 <LCD_displayString+0x24>

   	while((*Str) != '\0')
   	{
   		LCD_displayChar(*Str);
    2c4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c50:	80 81       	ld	r24, Z
    2c52:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_displayChar>
   		Str++;
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5a:	01 96       	adiw	r24, 0x01	; 1
    2c5c:	9a 83       	std	Y+2, r25	; 0x02
    2c5e:	89 83       	std	Y+1, r24	; 0x01


   void LCD_displayString(const char *Str)
   {

   	while((*Str) != '\0')
    2c60:	e9 81       	ldd	r30, Y+1	; 0x01
    2c62:	fa 81       	ldd	r31, Y+2	; 0x02
    2c64:	80 81       	ld	r24, Z
    2c66:	88 23       	and	r24, r24
    2c68:	89 f7       	brne	.-30     	; 0x2c4c <LCD_displayString+0x10>
   	{
   		LCD_displayChar(*Str);
   		Str++;
   	}
   }
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	08 95       	ret

00002c74 <LCD_gotoRawCol>:


   void LCD_gotoRawCol(unit8 row, unit8 col){
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	00 d0       	rcall	.+0      	; 0x2c7a <LCD_gotoRawCol+0x6>
    2c7a:	00 d0       	rcall	.+0      	; 0x2c7c <LCD_gotoRawCol+0x8>
    2c7c:	0f 92       	push	r0
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	8a 83       	std	Y+2, r24	; 0x02
    2c84:	6b 83       	std	Y+3, r22	; 0x03
	   unit8 address;
	   switch(row){
    2c86:	8a 81       	ldd	r24, Y+2	; 0x02
    2c88:	28 2f       	mov	r18, r24
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	3d 83       	std	Y+5, r19	; 0x05
    2c8e:	2c 83       	std	Y+4, r18	; 0x04
    2c90:	8c 81       	ldd	r24, Y+4	; 0x04
    2c92:	9d 81       	ldd	r25, Y+5	; 0x05
    2c94:	00 97       	sbiw	r24, 0x00	; 0
    2c96:	31 f0       	breq	.+12     	; 0x2ca4 <LCD_gotoRawCol+0x30>
    2c98:	2c 81       	ldd	r18, Y+4	; 0x04
    2c9a:	3d 81       	ldd	r19, Y+5	; 0x05
    2c9c:	21 30       	cpi	r18, 0x01	; 1
    2c9e:	31 05       	cpc	r19, r1
    2ca0:	21 f0       	breq	.+8      	; 0x2caa <LCD_gotoRawCol+0x36>
    2ca2:	06 c0       	rjmp	.+12     	; 0x2cb0 <LCD_gotoRawCol+0x3c>
	       case 0:
		      address=col;
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    2ca8:	03 c0       	rjmp	.+6      	; 0x2cb0 <LCD_gotoRawCol+0x3c>
		       break;
	       case 1:
		      address=0x40+col;
    2caa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cac:	80 5c       	subi	r24, 0xC0	; 192
    2cae:	89 83       	std	Y+1, r24	; 0x01
	        }
	    LCD_sendCommand(address|CURSOR_MoveToFirstLoc);
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	80 68       	ori	r24, 0x80	; 128
    2cb4:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_sendCommand>

	   }
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <LCD_IntToStr>:



void LCD_IntToStr(unit8 data){
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	61 97       	sbiw	r28, 0x11	; 17
    2cd2:	0f b6       	in	r0, 0x3f	; 63
    2cd4:	f8 94       	cli
    2cd6:	de bf       	out	0x3e, r29	; 62
    2cd8:	0f be       	out	0x3f, r0	; 63
    2cda:	cd bf       	out	0x3d, r28	; 61
    2cdc:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10);
    2cde:	89 89       	ldd	r24, Y+17	; 0x11
    2ce0:	88 2f       	mov	r24, r24
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	9e 01       	movw	r18, r28
    2ce6:	2f 5f       	subi	r18, 0xFF	; 255
    2ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cea:	b9 01       	movw	r22, r18
    2cec:	4a e0       	ldi	r20, 0x0A	; 10
    2cee:	50 e0       	ldi	r21, 0x00	; 0
    2cf0:	0e 94 28 17 	call	0x2e50	; 0x2e50 <itoa>
	LCD_displayString(buff);
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	01 96       	adiw	r24, 0x01	; 1
    2cf8:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <LCD_displayString>
}
    2cfc:	61 96       	adiw	r28, 0x11	; 17
    2cfe:	0f b6       	in	r0, 0x3f	; 63
    2d00:	f8 94       	cli
    2d02:	de bf       	out	0x3e, r29	; 62
    2d04:	0f be       	out	0x3f, r0	; 63
    2d06:	cd bf       	out	0x3d, r28	; 61
    2d08:	cf 91       	pop	r28
    2d0a:	df 91       	pop	r29
    2d0c:	08 95       	ret

00002d0e <LCD_displayStrRowCol>:


void LCD_displayStrRowCol(unit8 row,unit8 col,const char *Str){
    2d0e:	df 93       	push	r29
    2d10:	cf 93       	push	r28
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
    2d16:	28 97       	sbiw	r28, 0x08	; 8
    2d18:	0f b6       	in	r0, 0x3f	; 63
    2d1a:	f8 94       	cli
    2d1c:	de bf       	out	0x3e, r29	; 62
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	cd bf       	out	0x3d, r28	; 61
    2d22:	8b 83       	std	Y+3, r24	; 0x03
    2d24:	6c 83       	std	Y+4, r22	; 0x04
    2d26:	5e 83       	std	Y+6, r21	; 0x06
    2d28:	4d 83       	std	Y+5, r20	; 0x05
	unit8 address,i=0;
    2d2a:	19 82       	std	Y+1, r1	; 0x01
		   switch(row){
    2d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2e:	28 2f       	mov	r18, r24
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	38 87       	std	Y+8, r19	; 0x08
    2d34:	2f 83       	std	Y+7, r18	; 0x07
    2d36:	8f 81       	ldd	r24, Y+7	; 0x07
    2d38:	98 85       	ldd	r25, Y+8	; 0x08
    2d3a:	00 97       	sbiw	r24, 0x00	; 0
    2d3c:	31 f0       	breq	.+12     	; 0x2d4a <LCD_displayStrRowCol+0x3c>
    2d3e:	2f 81       	ldd	r18, Y+7	; 0x07
    2d40:	38 85       	ldd	r19, Y+8	; 0x08
    2d42:	21 30       	cpi	r18, 0x01	; 1
    2d44:	31 05       	cpc	r19, r1
    2d46:	21 f0       	breq	.+8      	; 0x2d50 <LCD_displayStrRowCol+0x42>
    2d48:	06 c0       	rjmp	.+12     	; 0x2d56 <LCD_displayStrRowCol+0x48>
		       case 0:
			      address=col;
    2d4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d4c:	8a 83       	std	Y+2, r24	; 0x02
    2d4e:	03 c0       	rjmp	.+6      	; 0x2d56 <LCD_displayStrRowCol+0x48>
			       break;
		       case 1:
			      address=0x40+col;
    2d50:	8c 81       	ldd	r24, Y+4	; 0x04
    2d52:	80 5c       	subi	r24, 0xC0	; 192
    2d54:	8a 83       	std	Y+2, r24	; 0x02
		        }
    LCD_sendCommand(address|CURSOR_MoveToFirstLoc);
    2d56:	8a 81       	ldd	r24, Y+2	; 0x02
    2d58:	80 68       	ori	r24, 0x80	; 128
    2d5a:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_sendCommand>
    2d5e:	10 c0       	rjmp	.+32     	; 0x2d80 <LCD_displayStrRowCol+0x72>

	while((*Str) != '\0')
   	{
   		LCD_displayChar(Str[i]);
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	28 2f       	mov	r18, r24
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	8d 81       	ldd	r24, Y+5	; 0x05
    2d68:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	e2 0f       	add	r30, r18
    2d6e:	f3 1f       	adc	r31, r19
    2d70:	80 81       	ld	r24, Z
    2d72:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_displayChar>
   		Str++;
    2d76:	8d 81       	ldd	r24, Y+5	; 0x05
    2d78:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7a:	01 96       	adiw	r24, 0x01	; 1
    2d7c:	9e 83       	std	Y+6, r25	; 0x06
    2d7e:	8d 83       	std	Y+5, r24	; 0x05
		       case 1:
			      address=0x40+col;
		        }
    LCD_sendCommand(address|CURSOR_MoveToFirstLoc);

	while((*Str) != '\0')
    2d80:	ed 81       	ldd	r30, Y+5	; 0x05
    2d82:	fe 81       	ldd	r31, Y+6	; 0x06
    2d84:	80 81       	ld	r24, Z
    2d86:	88 23       	and	r24, r24
    2d88:	59 f7       	brne	.-42     	; 0x2d60 <LCD_displayStrRowCol+0x52>
   	{
   		LCD_displayChar(Str[i]);
   		Str++;
   	}
}
    2d8a:	28 96       	adiw	r28, 0x08	; 8
    2d8c:	0f b6       	in	r0, 0x3f	; 63
    2d8e:	f8 94       	cli
    2d90:	de bf       	out	0x3e, r29	; 62
    2d92:	0f be       	out	0x3f, r0	; 63
    2d94:	cd bf       	out	0x3d, r28	; 61
    2d96:	cf 91       	pop	r28
    2d98:	df 91       	pop	r29
    2d9a:	08 95       	ret

00002d9c <LCD_clearScreen>:


void LCD_clearScreen(void)
{
    2d9c:	df 93       	push	r29
    2d9e:	cf 93       	push	r28
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_LCD); //clear display
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_sendCommand>
}
    2daa:	cf 91       	pop	r28
    2dac:	df 91       	pop	r29
    2dae:	08 95       	ret

00002db0 <UART_Init>:
 *      Author: Rafaat
 */
#include "UART.h"

void UART_Init()
{
    2db0:	df 93       	push	r29
    2db2:	cf 93       	push	r28
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
UCSRB |=1<<RXEN|1<<TXEN;
    2db8:	aa e2       	ldi	r26, 0x2A	; 42
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	ea e2       	ldi	r30, 0x2A	; 42
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	88 61       	ori	r24, 0x18	; 24
    2dc4:	8c 93       	st	X, r24
UCSRC |=1<<UCSZ1|1<<UCSZ0|1<<URSEL;
    2dc6:	a0 e4       	ldi	r26, 0x40	; 64
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e0 e4       	ldi	r30, 0x40	; 64
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	80 81       	ld	r24, Z
    2dd0:	86 68       	ori	r24, 0x86	; 134
    2dd2:	8c 93       	st	X, r24
UBRRL = 0x33 ;
    2dd4:	e9 e2       	ldi	r30, 0x29	; 41
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	83 e3       	ldi	r24, 0x33	; 51
    2dda:	80 83       	st	Z, r24
}
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	08 95       	ret

00002de2 <__prologue_saves__>:
    2de2:	2f 92       	push	r2
    2de4:	3f 92       	push	r3
    2de6:	4f 92       	push	r4
    2de8:	5f 92       	push	r5
    2dea:	6f 92       	push	r6
    2dec:	7f 92       	push	r7
    2dee:	8f 92       	push	r8
    2df0:	9f 92       	push	r9
    2df2:	af 92       	push	r10
    2df4:	bf 92       	push	r11
    2df6:	cf 92       	push	r12
    2df8:	df 92       	push	r13
    2dfa:	ef 92       	push	r14
    2dfc:	ff 92       	push	r15
    2dfe:	0f 93       	push	r16
    2e00:	1f 93       	push	r17
    2e02:	cf 93       	push	r28
    2e04:	df 93       	push	r29
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    2e0a:	ca 1b       	sub	r28, r26
    2e0c:	db 0b       	sbc	r29, r27
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	09 94       	ijmp

00002e1a <__epilogue_restores__>:
    2e1a:	2a 88       	ldd	r2, Y+18	; 0x12
    2e1c:	39 88       	ldd	r3, Y+17	; 0x11
    2e1e:	48 88       	ldd	r4, Y+16	; 0x10
    2e20:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e22:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e24:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e26:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e28:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e2c:	b9 84       	ldd	r11, Y+9	; 0x09
    2e2e:	c8 84       	ldd	r12, Y+8	; 0x08
    2e30:	df 80       	ldd	r13, Y+7	; 0x07
    2e32:	ee 80       	ldd	r14, Y+6	; 0x06
    2e34:	fd 80       	ldd	r15, Y+5	; 0x05
    2e36:	0c 81       	ldd	r16, Y+4	; 0x04
    2e38:	1b 81       	ldd	r17, Y+3	; 0x03
    2e3a:	aa 81       	ldd	r26, Y+2	; 0x02
    2e3c:	b9 81       	ldd	r27, Y+1	; 0x01
    2e3e:	ce 0f       	add	r28, r30
    2e40:	d1 1d       	adc	r29, r1
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	f8 94       	cli
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	cd bf       	out	0x3d, r28	; 61
    2e4c:	ed 01       	movw	r28, r26
    2e4e:	08 95       	ret

00002e50 <itoa>:
    2e50:	fb 01       	movw	r30, r22
    2e52:	9f 01       	movw	r18, r30
    2e54:	e8 94       	clt
    2e56:	42 30       	cpi	r20, 0x02	; 2
    2e58:	c4 f0       	brlt	.+48     	; 0x2e8a <itoa+0x3a>
    2e5a:	45 32       	cpi	r20, 0x25	; 37
    2e5c:	b4 f4       	brge	.+44     	; 0x2e8a <itoa+0x3a>
    2e5e:	4a 30       	cpi	r20, 0x0A	; 10
    2e60:	29 f4       	brne	.+10     	; 0x2e6c <itoa+0x1c>
    2e62:	97 fb       	bst	r25, 7
    2e64:	1e f4       	brtc	.+6      	; 0x2e6c <itoa+0x1c>
    2e66:	90 95       	com	r25
    2e68:	81 95       	neg	r24
    2e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e6c:	64 2f       	mov	r22, r20
    2e6e:	77 27       	eor	r23, r23
    2e70:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__udivmodhi4>
    2e74:	80 5d       	subi	r24, 0xD0	; 208
    2e76:	8a 33       	cpi	r24, 0x3A	; 58
    2e78:	0c f0       	brlt	.+2      	; 0x2e7c <itoa+0x2c>
    2e7a:	89 5d       	subi	r24, 0xD9	; 217
    2e7c:	81 93       	st	Z+, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	00 97       	sbiw	r24, 0x00	; 0
    2e82:	a1 f7       	brne	.-24     	; 0x2e6c <itoa+0x1c>
    2e84:	16 f4       	brtc	.+4      	; 0x2e8a <itoa+0x3a>
    2e86:	5d e2       	ldi	r21, 0x2D	; 45
    2e88:	51 93       	st	Z+, r21
    2e8a:	10 82       	st	Z, r1
    2e8c:	c9 01       	movw	r24, r18
    2e8e:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <strrev>

00002e92 <strrev>:
    2e92:	dc 01       	movw	r26, r24
    2e94:	fc 01       	movw	r30, r24
    2e96:	67 2f       	mov	r22, r23
    2e98:	71 91       	ld	r23, Z+
    2e9a:	77 23       	and	r23, r23
    2e9c:	e1 f7       	brne	.-8      	; 0x2e96 <strrev+0x4>
    2e9e:	32 97       	sbiw	r30, 0x02	; 2
    2ea0:	04 c0       	rjmp	.+8      	; 0x2eaa <strrev+0x18>
    2ea2:	7c 91       	ld	r23, X
    2ea4:	6d 93       	st	X+, r22
    2ea6:	70 83       	st	Z, r23
    2ea8:	62 91       	ld	r22, -Z
    2eaa:	ae 17       	cp	r26, r30
    2eac:	bf 07       	cpc	r27, r31
    2eae:	c8 f3       	brcs	.-14     	; 0x2ea2 <strrev+0x10>
    2eb0:	08 95       	ret

00002eb2 <__udivmodhi4>:
    2eb2:	aa 1b       	sub	r26, r26
    2eb4:	bb 1b       	sub	r27, r27
    2eb6:	51 e1       	ldi	r21, 0x11	; 17
    2eb8:	07 c0       	rjmp	.+14     	; 0x2ec8 <__udivmodhi4_ep>

00002eba <__udivmodhi4_loop>:
    2eba:	aa 1f       	adc	r26, r26
    2ebc:	bb 1f       	adc	r27, r27
    2ebe:	a6 17       	cp	r26, r22
    2ec0:	b7 07       	cpc	r27, r23
    2ec2:	10 f0       	brcs	.+4      	; 0x2ec8 <__udivmodhi4_ep>
    2ec4:	a6 1b       	sub	r26, r22
    2ec6:	b7 0b       	sbc	r27, r23

00002ec8 <__udivmodhi4_ep>:
    2ec8:	88 1f       	adc	r24, r24
    2eca:	99 1f       	adc	r25, r25
    2ecc:	5a 95       	dec	r21
    2ece:	a9 f7       	brne	.-22     	; 0x2eba <__udivmodhi4_loop>
    2ed0:	80 95       	com	r24
    2ed2:	90 95       	com	r25
    2ed4:	bc 01       	movw	r22, r24
    2ed6:	cd 01       	movw	r24, r26
    2ed8:	08 95       	ret

00002eda <_exit>:
    2eda:	f8 94       	cli

00002edc <__stop_program>:
    2edc:	ff cf       	rjmp	.-2      	; 0x2edc <__stop_program>
