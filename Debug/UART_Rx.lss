
UART_Rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003240  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00003240  000032b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002604  00000000  00000000  000032e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010d6  00000000  00000000  000058e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000069be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000088b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000097a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a93d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b10b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 1e 19 	jmp	0x323c	; 0x323c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e7       	ldi	r26, 0x73	; 115
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 be 18 	jmp	0x317c	; 0x317c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ae 18 	jmp	0x315c	; 0x315c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ca 18 	jmp	0x3194	; 0x3194 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ae 18 	jmp	0x315c	; 0x315c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ca 18 	jmp	0x3194	; 0x3194 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e7       	ldi	r24, 0x73	; 115
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 be 18 	jmp	0x317c	; 0x317c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ae 18 	jmp	0x315c	; 0x315c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 ca 18 	jmp	0x3194	; 0x3194 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ae 18 	jmp	0x315c	; 0x315c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 ca 18 	jmp	0x3194	; 0x3194 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ae 18 	jmp	0x315c	; 0x315c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 ca 18 	jmp	0x3194	; 0x3194 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#include "stdlib.h"
#include "LCD.h"
#include"keypad.h"

int main(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	e0 97       	sbiw	r28, 0x30	; 48
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
//DDRC &= ~(1<<PIN4);
	LCD_init();
     b4a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_init>
	DIO_init(2);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_init>
	UART_Init();
     b54:	0e 94 0a 18 	call	0x3014	; 0x3014 <UART_Init>
uint8 Get_Speed =0;
     b58:	18 aa       	std	Y+48, r1	; 0x30
uint8 Get_Time =0;
     b5a:	1f a6       	std	Y+47, r1	; 0x2f
uint8 Get_Speed_1 =0;
     b5c:	1e a6       	std	Y+46, r1	; 0x2e
uint8 Get_Time_1 =0;
     b5e:	1d a6       	std	Y+45, r1	; 0x2d
int Distance =0;
     b60:	1c a6       	std	Y+44, r1	; 0x2c
     b62:	1b a6       	std	Y+43, r1	; 0x2b
LCD_gotoRawCol(0,0);
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <LCD_gotoRawCol>
LCD_displayStrRowCol(0,0,"Distance: ");
     b6c:	20 e6       	ldi	r18, 0x60	; 96
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	a9 01       	movw	r20, r18
     b76:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <LCD_displayStrRowCol>
LCD_gotoRawCol(0,10);
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	6a e0       	ldi	r22, 0x0A	; 10
     b7e:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <LCD_gotoRawCol>
LCD_IntToStr(Distance);
     b82:	8b a5       	ldd	r24, Y+43	; 0x2b
     b84:	9c a5       	ldd	r25, Y+44	; 0x2c
     b86:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_IntToStr>
LCD_displayStrRowCol(0,13,"Cm");
     b8a:	2b e6       	ldi	r18, 0x6B	; 107
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	6d e0       	ldi	r22, 0x0D	; 13
     b92:	a9 01       	movw	r20, r18
     b94:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <LCD_displayStrRowCol>
//DDRB|=1<<PINB4;
//DDRC&=~(1<<PINB4);

	while(1)
	{
		if(DIO_read(PORT_C,PIN4))
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	64 e0       	ldi	r22, 0x04	; 4
     b9c:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <DIO_read>
     ba0:	88 23       	and	r24, r24
     ba2:	09 f4       	brne	.+2      	; 0xba6 <main+0x70>
     ba4:	f5 c0       	rjmp	.+490    	; 0xd90 <main+0x25a>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	aa e7       	ldi	r26, 0x7A	; 122
     bac:	b3 e4       	ldi	r27, 0x43	; 67
     bae:	8f a3       	std	Y+39, r24	; 0x27
     bb0:	98 a7       	std	Y+40, r25	; 0x28
     bb2:	a9 a7       	std	Y+41, r26	; 0x29
     bb4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb6:	6f a1       	ldd	r22, Y+39	; 0x27
     bb8:	78 a5       	ldd	r23, Y+40	; 0x28
     bba:	89 a5       	ldd	r24, Y+41	; 0x29
     bbc:	9a a5       	ldd	r25, Y+42	; 0x2a
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	4a ef       	ldi	r20, 0xFA	; 250
     bc4:	54 e4       	ldi	r21, 0x44	; 68
     bc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bca:	dc 01       	movw	r26, r24
     bcc:	cb 01       	movw	r24, r22
     bce:	8b a3       	std	Y+35, r24	; 0x23
     bd0:	9c a3       	std	Y+36, r25	; 0x24
     bd2:	ad a3       	std	Y+37, r26	; 0x25
     bd4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bd6:	6b a1       	ldd	r22, Y+35	; 0x23
     bd8:	7c a1       	ldd	r23, Y+36	; 0x24
     bda:	8d a1       	ldd	r24, Y+37	; 0x25
     bdc:	9e a1       	ldd	r25, Y+38	; 0x26
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	40 e8       	ldi	r20, 0x80	; 128
     be4:	5f e3       	ldi	r21, 0x3F	; 63
     be6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bea:	88 23       	and	r24, r24
     bec:	2c f4       	brge	.+10     	; 0xbf8 <main+0xc2>
		__ticks = 1;
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	9a a3       	std	Y+34, r25	; 0x22
     bf4:	89 a3       	std	Y+33, r24	; 0x21
     bf6:	3f c0       	rjmp	.+126    	; 0xc76 <main+0x140>
	else if (__tmp > 65535)
     bf8:	6b a1       	ldd	r22, Y+35	; 0x23
     bfa:	7c a1       	ldd	r23, Y+36	; 0x24
     bfc:	8d a1       	ldd	r24, Y+37	; 0x25
     bfe:	9e a1       	ldd	r25, Y+38	; 0x26
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	4f e7       	ldi	r20, 0x7F	; 127
     c06:	57 e4       	ldi	r21, 0x47	; 71
     c08:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c0c:	18 16       	cp	r1, r24
     c0e:	4c f5       	brge	.+82     	; 0xc62 <main+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c10:	6f a1       	ldd	r22, Y+39	; 0x27
     c12:	78 a5       	ldd	r23, Y+40	; 0x28
     c14:	89 a5       	ldd	r24, Y+41	; 0x29
     c16:	9a a5       	ldd	r25, Y+42	; 0x2a
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e2       	ldi	r20, 0x20	; 32
     c1e:	51 e4       	ldi	r21, 0x41	; 65
     c20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c24:	dc 01       	movw	r26, r24
     c26:	cb 01       	movw	r24, r22
     c28:	bc 01       	movw	r22, r24
     c2a:	cd 01       	movw	r24, r26
     c2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	9a a3       	std	Y+34, r25	; 0x22
     c36:	89 a3       	std	Y+33, r24	; 0x21
     c38:	0f c0       	rjmp	.+30     	; 0xc58 <main+0x122>
     c3a:	88 ec       	ldi	r24, 0xC8	; 200
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	98 a3       	std	Y+32, r25	; 0x20
     c40:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c42:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c44:	98 a1       	ldd	r25, Y+32	; 0x20
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <main+0x110>
     c4a:	98 a3       	std	Y+32, r25	; 0x20
     c4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c4e:	89 a1       	ldd	r24, Y+33	; 0x21
     c50:	9a a1       	ldd	r25, Y+34	; 0x22
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	9a a3       	std	Y+34, r25	; 0x22
     c56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c58:	89 a1       	ldd	r24, Y+33	; 0x21
     c5a:	9a a1       	ldd	r25, Y+34	; 0x22
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	69 f7       	brne	.-38     	; 0xc3a <main+0x104>
     c60:	14 c0       	rjmp	.+40     	; 0xc8a <main+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c62:	6b a1       	ldd	r22, Y+35	; 0x23
     c64:	7c a1       	ldd	r23, Y+36	; 0x24
     c66:	8d a1       	ldd	r24, Y+37	; 0x25
     c68:	9e a1       	ldd	r25, Y+38	; 0x26
     c6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	9a a3       	std	Y+34, r25	; 0x22
     c74:	89 a3       	std	Y+33, r24	; 0x21
     c76:	89 a1       	ldd	r24, Y+33	; 0x21
     c78:	9a a1       	ldd	r25, Y+34	; 0x22
     c7a:	9e 8f       	std	Y+30, r25	; 0x1e
     c7c:	8d 8f       	std	Y+29, r24	; 0x1d
     c7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c80:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c82:	01 97       	sbiw	r24, 0x01	; 1
     c84:	f1 f7       	brne	.-4      	; 0xc82 <main+0x14c>
     c86:	9e 8f       	std	Y+30, r25	; 0x1e
     c88:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(250);
			UART_Send('g');
     c8a:	87 e6       	ldi	r24, 0x67	; 103
     c8c:	0e 94 23 18 	call	0x3046	; 0x3046 <UART_Send>
			Get_Speed_1 = UART_Recieve();
     c90:	0e 94 3a 18 	call	0x3074	; 0x3074 <UART_Recieve>
     c94:	8e a7       	std	Y+46, r24	; 0x2e
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	a0 e8       	ldi	r26, 0x80	; 128
     c9c:	bf e3       	ldi	r27, 0x3F	; 63
     c9e:	89 8f       	std	Y+25, r24	; 0x19
     ca0:	9a 8f       	std	Y+26, r25	; 0x1a
     ca2:	ab 8f       	std	Y+27, r26	; 0x1b
     ca4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca6:	69 8d       	ldd	r22, Y+25	; 0x19
     ca8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     caa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	4a ef       	ldi	r20, 0xFA	; 250
     cb4:	54 e4       	ldi	r21, 0x44	; 68
     cb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	8d 8b       	std	Y+21, r24	; 0x15
     cc0:	9e 8b       	std	Y+22, r25	; 0x16
     cc2:	af 8b       	std	Y+23, r26	; 0x17
     cc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cc6:	6d 89       	ldd	r22, Y+21	; 0x15
     cc8:	7e 89       	ldd	r23, Y+22	; 0x16
     cca:	8f 89       	ldd	r24, Y+23	; 0x17
     ccc:	98 8d       	ldd	r25, Y+24	; 0x18
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	40 e8       	ldi	r20, 0x80	; 128
     cd4:	5f e3       	ldi	r21, 0x3F	; 63
     cd6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cda:	88 23       	and	r24, r24
     cdc:	2c f4       	brge	.+10     	; 0xce8 <main+0x1b2>
		__ticks = 1;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	9c 8b       	std	Y+20, r25	; 0x14
     ce4:	8b 8b       	std	Y+19, r24	; 0x13
     ce6:	3f c0       	rjmp	.+126    	; 0xd66 <main+0x230>
	else if (__tmp > 65535)
     ce8:	6d 89       	ldd	r22, Y+21	; 0x15
     cea:	7e 89       	ldd	r23, Y+22	; 0x16
     cec:	8f 89       	ldd	r24, Y+23	; 0x17
     cee:	98 8d       	ldd	r25, Y+24	; 0x18
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	3f ef       	ldi	r19, 0xFF	; 255
     cf4:	4f e7       	ldi	r20, 0x7F	; 127
     cf6:	57 e4       	ldi	r21, 0x47	; 71
     cf8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cfc:	18 16       	cp	r1, r24
     cfe:	4c f5       	brge	.+82     	; 0xd52 <main+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d00:	69 8d       	ldd	r22, Y+25	; 0x19
     d02:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d04:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d06:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e2       	ldi	r20, 0x20	; 32
     d0e:	51 e4       	ldi	r21, 0x41	; 65
     d10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d14:	dc 01       	movw	r26, r24
     d16:	cb 01       	movw	r24, r22
     d18:	bc 01       	movw	r22, r24
     d1a:	cd 01       	movw	r24, r26
     d1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	9c 8b       	std	Y+20, r25	; 0x14
     d26:	8b 8b       	std	Y+19, r24	; 0x13
     d28:	0f c0       	rjmp	.+30     	; 0xd48 <main+0x212>
     d2a:	88 ec       	ldi	r24, 0xC8	; 200
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	9a 8b       	std	Y+18, r25	; 0x12
     d30:	89 8b       	std	Y+17, r24	; 0x11
     d32:	89 89       	ldd	r24, Y+17	; 0x11
     d34:	9a 89       	ldd	r25, Y+18	; 0x12
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <main+0x200>
     d3a:	9a 8b       	std	Y+18, r25	; 0x12
     d3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3e:	8b 89       	ldd	r24, Y+19	; 0x13
     d40:	9c 89       	ldd	r25, Y+20	; 0x14
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	9c 8b       	std	Y+20, r25	; 0x14
     d46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d48:	8b 89       	ldd	r24, Y+19	; 0x13
     d4a:	9c 89       	ldd	r25, Y+20	; 0x14
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	69 f7       	brne	.-38     	; 0xd2a <main+0x1f4>
     d50:	14 c0       	rjmp	.+40     	; 0xd7a <main+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d52:	6d 89       	ldd	r22, Y+21	; 0x15
     d54:	7e 89       	ldd	r23, Y+22	; 0x16
     d56:	8f 89       	ldd	r24, Y+23	; 0x17
     d58:	98 8d       	ldd	r25, Y+24	; 0x18
     d5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	9c 8b       	std	Y+20, r25	; 0x14
     d64:	8b 8b       	std	Y+19, r24	; 0x13
     d66:	8b 89       	ldd	r24, Y+19	; 0x13
     d68:	9c 89       	ldd	r25, Y+20	; 0x14
     d6a:	98 8b       	std	Y+16, r25	; 0x10
     d6c:	8f 87       	std	Y+15, r24	; 0x0f
     d6e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d70:	98 89       	ldd	r25, Y+16	; 0x10
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <main+0x23c>
     d76:	98 8b       	std	Y+16, r25	; 0x10
     d78:	8f 87       	std	Y+15, r24	; 0x0f
		//	Get_Speed=atoi(&Get_Speed_1);
			_delay_ms(1);
			Get_Time_1= UART_Recieve();
     d7a:	0e 94 3a 18 	call	0x3074	; 0x3074 <UART_Recieve>
     d7e:	8d a7       	std	Y+45, r24	; 0x2d
			//Get_Time=atoi(&Get_Time_1);
			PORTB^=1<<PINB4;
     d80:	a8 e3       	ldi	r26, 0x38	; 56
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e8 e3       	ldi	r30, 0x38	; 56
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	90 81       	ld	r25, Z
     d8a:	80 e1       	ldi	r24, 0x10	; 16
     d8c:	89 27       	eor	r24, r25
     d8e:	8c 93       	st	X, r24
		}
		if(DIO_read(PORT_B,PIN2))
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	62 e0       	ldi	r22, 0x02	; 2
     d94:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <DIO_read>
     d98:	88 23       	and	r24, r24
     d9a:	09 f4       	brne	.+2      	; 0xd9e <main+0x268>
     d9c:	fd ce       	rjmp	.-518    	; 0xb98 <main+0x62>
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	aa e7       	ldi	r26, 0x7A	; 122
     da4:	b3 e4       	ldi	r27, 0x43	; 67
     da6:	8b 87       	std	Y+11, r24	; 0x0b
     da8:	9c 87       	std	Y+12, r25	; 0x0c
     daa:	ad 87       	std	Y+13, r26	; 0x0d
     dac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dae:	6b 85       	ldd	r22, Y+11	; 0x0b
     db0:	7c 85       	ldd	r23, Y+12	; 0x0c
     db2:	8d 85       	ldd	r24, Y+13	; 0x0d
     db4:	9e 85       	ldd	r25, Y+14	; 0x0e
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	4a ef       	ldi	r20, 0xFA	; 250
     dbc:	54 e4       	ldi	r21, 0x44	; 68
     dbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	8f 83       	std	Y+7, r24	; 0x07
     dc8:	98 87       	std	Y+8, r25	; 0x08
     dca:	a9 87       	std	Y+9, r26	; 0x09
     dcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dce:	6f 81       	ldd	r22, Y+7	; 0x07
     dd0:	78 85       	ldd	r23, Y+8	; 0x08
     dd2:	89 85       	ldd	r24, Y+9	; 0x09
     dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 e8       	ldi	r20, 0x80	; 128
     ddc:	5f e3       	ldi	r21, 0x3F	; 63
     dde:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     de2:	88 23       	and	r24, r24
     de4:	2c f4       	brge	.+10     	; 0xdf0 <main+0x2ba>
		__ticks = 1;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	9e 83       	std	Y+6, r25	; 0x06
     dec:	8d 83       	std	Y+5, r24	; 0x05
     dee:	3f c0       	rjmp	.+126    	; 0xe6e <main+0x338>
	else if (__tmp > 65535)
     df0:	6f 81       	ldd	r22, Y+7	; 0x07
     df2:	78 85       	ldd	r23, Y+8	; 0x08
     df4:	89 85       	ldd	r24, Y+9	; 0x09
     df6:	9a 85       	ldd	r25, Y+10	; 0x0a
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	3f ef       	ldi	r19, 0xFF	; 255
     dfc:	4f e7       	ldi	r20, 0x7F	; 127
     dfe:	57 e4       	ldi	r21, 0x47	; 71
     e00:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e04:	18 16       	cp	r1, r24
     e06:	4c f5       	brge	.+82     	; 0xe5a <main+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e08:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	40 e2       	ldi	r20, 0x20	; 32
     e16:	51 e4       	ldi	r21, 0x41	; 65
     e18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	bc 01       	movw	r22, r24
     e22:	cd 01       	movw	r24, r26
     e24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	9e 83       	std	Y+6, r25	; 0x06
     e2e:	8d 83       	std	Y+5, r24	; 0x05
     e30:	0f c0       	rjmp	.+30     	; 0xe50 <main+0x31a>
     e32:	88 ec       	ldi	r24, 0xC8	; 200
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	9c 83       	std	Y+4, r25	; 0x04
     e38:	8b 83       	std	Y+3, r24	; 0x03
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	9c 81       	ldd	r25, Y+4	; 0x04
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <main+0x308>
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	9e 81       	ldd	r25, Y+6	; 0x06
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e50:	8d 81       	ldd	r24, Y+5	; 0x05
     e52:	9e 81       	ldd	r25, Y+6	; 0x06
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	69 f7       	brne	.-38     	; 0xe32 <main+0x2fc>
     e58:	14 c0       	rjmp	.+40     	; 0xe82 <main+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e5a:	6f 81       	ldd	r22, Y+7	; 0x07
     e5c:	78 85       	ldd	r23, Y+8	; 0x08
     e5e:	89 85       	ldd	r24, Y+9	; 0x09
     e60:	9a 85       	ldd	r25, Y+10	; 0x0a
     e62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	9e 83       	std	Y+6, r25	; 0x06
     e6c:	8d 83       	std	Y+5, r24	; 0x05
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
     e70:	9e 81       	ldd	r25, Y+6	; 0x06
     e72:	9a 83       	std	Y+2, r25	; 0x02
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <main+0x344>
     e7e:	9a 83       	std	Y+2, r25	; 0x02
     e80:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(250);

			UART_Send('g');
     e82:	87 e6       	ldi	r24, 0x67	; 103
     e84:	0e 94 23 18 	call	0x3046	; 0x3046 <UART_Send>
			Distance = Get_Speed_1 * Get_Time_1;
     e88:	8e a5       	ldd	r24, Y+46	; 0x2e
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	8d a5       	ldd	r24, Y+45	; 0x2d
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	ac 01       	movw	r20, r24
     e96:	24 9f       	mul	r18, r20
     e98:	c0 01       	movw	r24, r0
     e9a:	25 9f       	mul	r18, r21
     e9c:	90 0d       	add	r25, r0
     e9e:	34 9f       	mul	r19, r20
     ea0:	90 0d       	add	r25, r0
     ea2:	11 24       	eor	r1, r1
     ea4:	9c a7       	std	Y+44, r25	; 0x2c
     ea6:	8b a7       	std	Y+43, r24	; 0x2b
			LCD_gotoRawCol(0,10);
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	6a e0       	ldi	r22, 0x0A	; 10
     eac:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <LCD_gotoRawCol>
			LCD_displayStrRowCol(0,9,"    ");
     eb0:	2e e6       	ldi	r18, 0x6E	; 110
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	69 e0       	ldi	r22, 0x09	; 9
     eb8:	a9 01       	movw	r20, r18
     eba:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <LCD_displayStrRowCol>
			LCD_gotoRawCol(0,10);
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	6a e0       	ldi	r22, 0x0A	; 10
     ec2:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <LCD_gotoRawCol>
			LCD_IntToStr(Distance);
     ec6:	8b a5       	ldd	r24, Y+43	; 0x2b
     ec8:	9c a5       	ldd	r25, Y+44	; 0x2c
     eca:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_IntToStr>
			Get_Speed=0;
     ece:	18 aa       	std	Y+48, r1	; 0x30
			Get_Time=0;
     ed0:	1f a6       	std	Y+47, r1	; 0x2f
     ed2:	62 ce       	rjmp	.-828    	; 0xb98 <main+0x62>

00000ed4 <DIO_init>:
#include "registers.h"
#include "stdtypes.h"
#include "DIO_cnfg.h"

Std_Func_t DIO_init (PINS_t input)
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <DIO_init+0x6>
     eda:	00 d0       	rcall	.+0      	; 0xedc <DIO_init+0x8>
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	8a 83       	std	Y+2, r24	; 0x02
	Std_Func_t retval = OK;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	89 83       	std	Y+1, r24	; 0x01
	if (input <= MAX_NUM_OF_PINS)
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	81 32       	cpi	r24, 0x21	; 33
     eea:	08 f0       	brcs	.+2      	; 0xeee <DIO_init+0x1a>
     eec:	9a c5       	rjmp	.+2868   	; 0x1a22 <DIO_init+0xb4e>
	{
		DIO_cnfg_arr[input].IS_init_arr = INITIALIZED;
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	c9 01       	movw	r24, r18
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	82 0f       	add	r24, r18
     efc:	93 1f       	adc	r25, r19
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	fc 01       	movw	r30, r24
     f04:	e0 58       	subi	r30, 0x80	; 128
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	80 83       	st	Z, r24
		switch(DIO_cnfg_arr[input].PORT)
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	c9 01       	movw	r24, r18
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	82 0f       	add	r24, r18
     f1a:	93 1f       	adc	r25, r19
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	fc 01       	movw	r30, r24
     f22:	e5 58       	subi	r30, 0x85	; 133
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	80 81       	ld	r24, Z
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	3c 83       	std	Y+4, r19	; 0x04
     f2e:	2b 83       	std	Y+3, r18	; 0x03
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	91 05       	cpc	r25, r1
     f38:	09 f4       	brne	.+2      	; 0xf3c <DIO_init+0x68>
     f3a:	6a c1       	rjmp	.+724    	; 0x1210 <DIO_init+0x33c>
     f3c:	2b 81       	ldd	r18, Y+3	; 0x03
     f3e:	3c 81       	ldd	r19, Y+4	; 0x04
     f40:	22 30       	cpi	r18, 0x02	; 2
     f42:	31 05       	cpc	r19, r1
     f44:	2c f4       	brge	.+10     	; 0xf50 <DIO_init+0x7c>
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	9c 81       	ldd	r25, Y+4	; 0x04
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	71 f0       	breq	.+28     	; 0xf6a <DIO_init+0x96>
     f4e:	59 c5       	rjmp	.+2738   	; 0x1a02 <DIO_init+0xb2e>
     f50:	2b 81       	ldd	r18, Y+3	; 0x03
     f52:	3c 81       	ldd	r19, Y+4	; 0x04
     f54:	22 30       	cpi	r18, 0x02	; 2
     f56:	31 05       	cpc	r19, r1
     f58:	09 f4       	brne	.+2      	; 0xf5c <DIO_init+0x88>
     f5a:	ad c2       	rjmp	.+1370   	; 0x14b6 <DIO_init+0x5e2>
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	9c 81       	ldd	r25, Y+4	; 0x04
     f60:	83 30       	cpi	r24, 0x03	; 3
     f62:	91 05       	cpc	r25, r1
     f64:	09 f4       	brne	.+2      	; 0xf68 <DIO_init+0x94>
     f66:	fa c3       	rjmp	.+2036   	; 0x175c <DIO_init+0x888>
     f68:	4c c5       	rjmp	.+2712   	; 0x1a02 <DIO_init+0xb2e>
		{
		case PORT_A:
			if(DIO_cnfg_arr[input].DIR == OUTPUT)
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	c9 01       	movw	r24, r18
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	82 0f       	add	r24, r18
     f78:	93 1f       	adc	r25, r19
     f7a:	01 96       	adiw	r24, 0x01	; 1
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	fc 01       	movw	r30, r24
     f82:	e5 58       	subi	r30, 0x85	; 133
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	80 81       	ld	r24, Z
     f88:	81 30       	cpi	r24, 0x01	; 1
     f8a:	09 f0       	breq	.+2      	; 0xf8e <DIO_init+0xba>
     f8c:	8f c0       	rjmp	.+286    	; 0x10ac <DIO_init+0x1d8>
			{
				REG_DDRA |=(1u<<DIO_cnfg_arr[input].PIN);
     f8e:	aa e3       	ldi	r26, 0x3A	; 58
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	ea e3       	ldi	r30, 0x3A	; 58
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	40 81       	ld	r20, Z
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	c9 01       	movw	r24, r18
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	82 0f       	add	r24, r18
     fa6:	93 1f       	adc	r25, r19
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	fc 01       	movw	r30, r24
     fae:	e4 58       	subi	r30, 0x84	; 132
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	80 81       	ld	r24, Z
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_init+0xee>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	2a 95       	dec	r18
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_init+0xea>
     fc6:	84 2b       	or	r24, r20
     fc8:	8c 93       	st	X, r24
				if (DIO_cnfg_arr[input].OUT == HIGH)
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	c9 01       	movw	r24, r18
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	82 0f       	add	r24, r18
     fd8:	93 1f       	adc	r25, r19
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	fc 01       	movw	r30, r24
     fe0:	e2 58       	subi	r30, 0x82	; 130
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	80 81       	ld	r24, Z
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	01 f5       	brne	.+64     	; 0x102a <DIO_init+0x156>
				{
					REG_PORTA |=(1u<<DIO_cnfg_arr[input].PIN);
     fea:	ab e3       	ldi	r26, 0x3B	; 59
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	eb e3       	ldi	r30, 0x3B	; 59
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	40 81       	ld	r20, Z
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	c9 01       	movw	r24, r18
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	82 0f       	add	r24, r18
    1002:	93 1f       	adc	r25, r19
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	fc 01       	movw	r30, r24
    100a:	e4 58       	subi	r30, 0x84	; 132
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	80 81       	ld	r24, Z
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_init+0x14c>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_init+0x148>
    1024:	84 2b       	or	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	0a c5       	rjmp	.+2580   	; 0x1a3e <DIO_init+0xb6a>
				}
				else if (DIO_cnfg_arr[input].OUT == LOW)
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	c9 01       	movw	r24, r18
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	82 0f       	add	r24, r18
    1038:	93 1f       	adc	r25, r19
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	fc 01       	movw	r30, r24
    1040:	e2 58       	subi	r30, 0x82	; 130
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	80 81       	ld	r24, Z
    1046:	88 23       	and	r24, r24
    1048:	09 f5       	brne	.+66     	; 0x108c <DIO_init+0x1b8>
				{
					REG_PORTA &=~(1u<<DIO_cnfg_arr[input].PIN);
    104a:	ab e3       	ldi	r26, 0x3B	; 59
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	eb e3       	ldi	r30, 0x3B	; 59
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	40 81       	ld	r20, Z
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	c9 01       	movw	r24, r18
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	82 0f       	add	r24, r18
    1062:	93 1f       	adc	r25, r19
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	fc 01       	movw	r30, r24
    106a:	e4 58       	subi	r30, 0x84	; 132
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	80 81       	ld	r24, Z
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_init+0x1ac>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_init+0x1a8>
    1084:	80 95       	com	r24
    1086:	84 23       	and	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	d9 c4       	rjmp	.+2482   	; 0x1a3e <DIO_init+0xb6a>
				}
				else
				{
					DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	c9 01       	movw	r24, r18
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	82 0f       	add	r24, r18
    109a:	93 1f       	adc	r25, r19
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	fc 01       	movw	r30, r24
    10a2:	e0 58       	subi	r30, 0x80	; 128
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	10 82       	st	Z, r1
					retval = NOK;
    10a8:	19 82       	std	Y+1, r1	; 0x01
    10aa:	c9 c4       	rjmp	.+2450   	; 0x1a3e <DIO_init+0xb6a>
				}
			}
			else if(DIO_cnfg_arr[input].DIR == INPUT)
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	c9 01       	movw	r24, r18
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	82 0f       	add	r24, r18
    10ba:	93 1f       	adc	r25, r19
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	fc 01       	movw	r30, r24
    10c4:	e5 58       	subi	r30, 0x85	; 133
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	80 81       	ld	r24, Z
    10ca:	88 23       	and	r24, r24
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <DIO_init+0x1fc>
    10ce:	90 c0       	rjmp	.+288    	; 0x11f0 <DIO_init+0x31c>
			{
				REG_DDRA &=~(1u<<DIO_cnfg_arr[input].PIN);
    10d0:	aa e3       	ldi	r26, 0x3A	; 58
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	ea e3       	ldi	r30, 0x3A	; 58
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	40 81       	ld	r20, Z
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	c9 01       	movw	r24, r18
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	82 0f       	add	r24, r18
    10e8:	93 1f       	adc	r25, r19
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	fc 01       	movw	r30, r24
    10f0:	e4 58       	subi	r30, 0x84	; 132
    10f2:	ff 4f       	sbci	r31, 0xFF	; 255
    10f4:	80 81       	ld	r24, Z
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_init+0x230>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	2a 95       	dec	r18
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_init+0x22c>
    1108:	80 95       	com	r24
    110a:	84 23       	and	r24, r20
    110c:	8c 93       	st	X, r24
				if (DIO_cnfg_arr[input].RES == PULLUP)
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	c9 01       	movw	r24, r18
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	82 0f       	add	r24, r18
    111c:	93 1f       	adc	r25, r19
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	fc 01       	movw	r30, r24
    1124:	e1 58       	subi	r30, 0x81	; 129
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	80 81       	ld	r24, Z
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	01 f5       	brne	.+64     	; 0x116e <DIO_init+0x29a>
				{
					REG_PORTA |=(1u<<DIO_cnfg_arr[input].PIN);
    112e:	ab e3       	ldi	r26, 0x3B	; 59
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	eb e3       	ldi	r30, 0x3B	; 59
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	40 81       	ld	r20, Z
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	c9 01       	movw	r24, r18
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	82 0f       	add	r24, r18
    1146:	93 1f       	adc	r25, r19
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	fc 01       	movw	r30, r24
    114e:	e4 58       	subi	r30, 0x84	; 132
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	80 81       	ld	r24, Z
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <DIO_init+0x290>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <DIO_init+0x28c>
    1168:	84 2b       	or	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	68 c4       	rjmp	.+2256   	; 0x1a3e <DIO_init+0xb6a>
				}
				else if (DIO_cnfg_arr[input].RES == EXTRES)
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	c9 01       	movw	r24, r18
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	82 0f       	add	r24, r18
    117c:	93 1f       	adc	r25, r19
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	fc 01       	movw	r30, r24
    1184:	e1 58       	subi	r30, 0x81	; 129
    1186:	ff 4f       	sbci	r31, 0xFF	; 255
    1188:	80 81       	ld	r24, Z
    118a:	88 23       	and	r24, r24
    118c:	09 f5       	brne	.+66     	; 0x11d0 <DIO_init+0x2fc>
				{
					REG_PORTA &=~(1u<<DIO_cnfg_arr[input].PIN);
    118e:	ab e3       	ldi	r26, 0x3B	; 59
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	eb e3       	ldi	r30, 0x3B	; 59
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	40 81       	ld	r20, Z
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	c9 01       	movw	r24, r18
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	82 0f       	add	r24, r18
    11a6:	93 1f       	adc	r25, r19
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	fc 01       	movw	r30, r24
    11ae:	e4 58       	subi	r30, 0x84	; 132
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	80 81       	ld	r24, Z
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_init+0x2f0>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_init+0x2ec>
    11c8:	80 95       	com	r24
    11ca:	84 23       	and	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	37 c4       	rjmp	.+2158   	; 0x1a3e <DIO_init+0xb6a>
				}
				else
				{
					DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	c9 01       	movw	r24, r18
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	82 0f       	add	r24, r18
    11de:	93 1f       	adc	r25, r19
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	fc 01       	movw	r30, r24
    11e6:	e0 58       	subi	r30, 0x80	; 128
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	10 82       	st	Z, r1
					retval = NOK;
    11ec:	19 82       	std	Y+1, r1	; 0x01
    11ee:	27 c4       	rjmp	.+2126   	; 0x1a3e <DIO_init+0xb6a>
				}
			}
			else
			{
				DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	c9 01       	movw	r24, r18
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	82 0f       	add	r24, r18
    11fe:	93 1f       	adc	r25, r19
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	fc 01       	movw	r30, r24
    1206:	e0 58       	subi	r30, 0x80	; 128
    1208:	ff 4f       	sbci	r31, 0xFF	; 255
    120a:	10 82       	st	Z, r1
				retval = NOK;
    120c:	19 82       	std	Y+1, r1	; 0x01
    120e:	17 c4       	rjmp	.+2094   	; 0x1a3e <DIO_init+0xb6a>
			}
			break;
		case PORT_B:
			if(DIO_cnfg_arr[input].DIR == OUTPUT)
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	c9 01       	movw	r24, r18
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	82 0f       	add	r24, r18
    121e:	93 1f       	adc	r25, r19
    1220:	01 96       	adiw	r24, 0x01	; 1
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	fc 01       	movw	r30, r24
    1228:	e5 58       	subi	r30, 0x85	; 133
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	80 81       	ld	r24, Z
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	09 f0       	breq	.+2      	; 0x1234 <DIO_init+0x360>
    1232:	8f c0       	rjmp	.+286    	; 0x1352 <DIO_init+0x47e>
			{
				REG_DDRB |=(1u<<DIO_cnfg_arr[input].PIN);
    1234:	a7 e3       	ldi	r26, 0x37	; 55
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e7 e3       	ldi	r30, 0x37	; 55
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	40 81       	ld	r20, Z
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	c9 01       	movw	r24, r18
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	82 0f       	add	r24, r18
    124c:	93 1f       	adc	r25, r19
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	fc 01       	movw	r30, r24
    1254:	e4 58       	subi	r30, 0x84	; 132
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	80 81       	ld	r24, Z
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_init+0x394>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	2a 95       	dec	r18
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_init+0x390>
    126c:	84 2b       	or	r24, r20
    126e:	8c 93       	st	X, r24
				if (DIO_cnfg_arr[input].OUT == HIGH)
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	c9 01       	movw	r24, r18
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	82 0f       	add	r24, r18
    127e:	93 1f       	adc	r25, r19
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	fc 01       	movw	r30, r24
    1286:	e2 58       	subi	r30, 0x82	; 130
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	80 81       	ld	r24, Z
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	01 f5       	brne	.+64     	; 0x12d0 <DIO_init+0x3fc>
				{
					REG_PORTB |=(1u<<DIO_cnfg_arr[input].PIN);
    1290:	a8 e3       	ldi	r26, 0x38	; 56
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e8 e3       	ldi	r30, 0x38	; 56
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	40 81       	ld	r20, Z
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	c9 01       	movw	r24, r18
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	82 0f       	add	r24, r18
    12a8:	93 1f       	adc	r25, r19
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	fc 01       	movw	r30, r24
    12b0:	e4 58       	subi	r30, 0x84	; 132
    12b2:	ff 4f       	sbci	r31, 0xFF	; 255
    12b4:	80 81       	ld	r24, Z
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <DIO_init+0x3f2>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <DIO_init+0x3ee>
    12ca:	84 2b       	or	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	b7 c3       	rjmp	.+1902   	; 0x1a3e <DIO_init+0xb6a>
				}
				else if (DIO_cnfg_arr[input].OUT == LOW)
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	c9 01       	movw	r24, r18
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	82 0f       	add	r24, r18
    12de:	93 1f       	adc	r25, r19
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	fc 01       	movw	r30, r24
    12e6:	e2 58       	subi	r30, 0x82	; 130
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	80 81       	ld	r24, Z
    12ec:	88 23       	and	r24, r24
    12ee:	09 f5       	brne	.+66     	; 0x1332 <DIO_init+0x45e>
				{
					REG_PORTB &=~(1u<<DIO_cnfg_arr[input].PIN);
    12f0:	a8 e3       	ldi	r26, 0x38	; 56
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e8 e3       	ldi	r30, 0x38	; 56
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	40 81       	ld	r20, Z
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	c9 01       	movw	r24, r18
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	82 0f       	add	r24, r18
    1308:	93 1f       	adc	r25, r19
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	fc 01       	movw	r30, r24
    1310:	e4 58       	subi	r30, 0x84	; 132
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	80 81       	ld	r24, Z
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <DIO_init+0x452>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <DIO_init+0x44e>
    132a:	80 95       	com	r24
    132c:	84 23       	and	r24, r20
    132e:	8c 93       	st	X, r24
    1330:	86 c3       	rjmp	.+1804   	; 0x1a3e <DIO_init+0xb6a>
				}
				else
				{
					DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	c9 01       	movw	r24, r18
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	82 0f       	add	r24, r18
    1340:	93 1f       	adc	r25, r19
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	fc 01       	movw	r30, r24
    1348:	e0 58       	subi	r30, 0x80	; 128
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	10 82       	st	Z, r1
					retval = NOK;
    134e:	19 82       	std	Y+1, r1	; 0x01
    1350:	76 c3       	rjmp	.+1772   	; 0x1a3e <DIO_init+0xb6a>
				}
			}
			else if(DIO_cnfg_arr[input].DIR == INPUT)
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	c9 01       	movw	r24, r18
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	82 0f       	add	r24, r18
    1360:	93 1f       	adc	r25, r19
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	fc 01       	movw	r30, r24
    136a:	e5 58       	subi	r30, 0x85	; 133
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	80 81       	ld	r24, Z
    1370:	88 23       	and	r24, r24
    1372:	09 f0       	breq	.+2      	; 0x1376 <DIO_init+0x4a2>
    1374:	90 c0       	rjmp	.+288    	; 0x1496 <DIO_init+0x5c2>
			{
				REG_DDRB &=~(1u<<DIO_cnfg_arr[input].PIN);
    1376:	a7 e3       	ldi	r26, 0x37	; 55
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e7 e3       	ldi	r30, 0x37	; 55
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	40 81       	ld	r20, Z
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	c9 01       	movw	r24, r18
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	82 0f       	add	r24, r18
    138e:	93 1f       	adc	r25, r19
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	fc 01       	movw	r30, r24
    1396:	e4 58       	subi	r30, 0x84	; 132
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	80 81       	ld	r24, Z
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <DIO_init+0x4d6>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	2a 95       	dec	r18
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <DIO_init+0x4d2>
    13ae:	80 95       	com	r24
    13b0:	84 23       	and	r24, r20
    13b2:	8c 93       	st	X, r24
				if (DIO_cnfg_arr[input].RES == PULLUP)
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	c9 01       	movw	r24, r18
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	82 0f       	add	r24, r18
    13c2:	93 1f       	adc	r25, r19
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	fc 01       	movw	r30, r24
    13ca:	e1 58       	subi	r30, 0x81	; 129
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	80 81       	ld	r24, Z
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	01 f5       	brne	.+64     	; 0x1414 <DIO_init+0x540>
				{
					REG_PORTB |=(1u<<DIO_cnfg_arr[input].PIN);
    13d4:	a8 e3       	ldi	r26, 0x38	; 56
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e8 e3       	ldi	r30, 0x38	; 56
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	40 81       	ld	r20, Z
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	c9 01       	movw	r24, r18
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	82 0f       	add	r24, r18
    13ec:	93 1f       	adc	r25, r19
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	fc 01       	movw	r30, r24
    13f4:	e4 58       	subi	r30, 0x84	; 132
    13f6:	ff 4f       	sbci	r31, 0xFF	; 255
    13f8:	80 81       	ld	r24, Z
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <DIO_init+0x536>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <DIO_init+0x532>
    140e:	84 2b       	or	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	15 c3       	rjmp	.+1578   	; 0x1a3e <DIO_init+0xb6a>
				}
				else if (DIO_cnfg_arr[input].RES == EXTRES)
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	c9 01       	movw	r24, r18
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	82 0f       	add	r24, r18
    1422:	93 1f       	adc	r25, r19
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	fc 01       	movw	r30, r24
    142a:	e1 58       	subi	r30, 0x81	; 129
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	80 81       	ld	r24, Z
    1430:	88 23       	and	r24, r24
    1432:	09 f5       	brne	.+66     	; 0x1476 <DIO_init+0x5a2>
				{
					REG_PORTB &=~(1u<<DIO_cnfg_arr[input].PIN);
    1434:	a8 e3       	ldi	r26, 0x38	; 56
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e8 e3       	ldi	r30, 0x38	; 56
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	40 81       	ld	r20, Z
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	c9 01       	movw	r24, r18
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	82 0f       	add	r24, r18
    144c:	93 1f       	adc	r25, r19
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	fc 01       	movw	r30, r24
    1454:	e4 58       	subi	r30, 0x84	; 132
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	80 81       	ld	r24, Z
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	02 2e       	mov	r0, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <DIO_init+0x596>
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	0a 94       	dec	r0
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <DIO_init+0x592>
    146e:	80 95       	com	r24
    1470:	84 23       	and	r24, r20
    1472:	8c 93       	st	X, r24
    1474:	e4 c2       	rjmp	.+1480   	; 0x1a3e <DIO_init+0xb6a>
				}
				else
				{
					DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	c9 01       	movw	r24, r18
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	82 0f       	add	r24, r18
    1484:	93 1f       	adc	r25, r19
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	fc 01       	movw	r30, r24
    148c:	e0 58       	subi	r30, 0x80	; 128
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	10 82       	st	Z, r1
					retval = NOK;
    1492:	19 82       	std	Y+1, r1	; 0x01
    1494:	d4 c2       	rjmp	.+1448   	; 0x1a3e <DIO_init+0xb6a>
				}
			}
			else
			{
				DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	c9 01       	movw	r24, r18
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	82 0f       	add	r24, r18
    14a4:	93 1f       	adc	r25, r19
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	fc 01       	movw	r30, r24
    14ac:	e0 58       	subi	r30, 0x80	; 128
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	10 82       	st	Z, r1
				retval = NOK;
    14b2:	19 82       	std	Y+1, r1	; 0x01
    14b4:	c4 c2       	rjmp	.+1416   	; 0x1a3e <DIO_init+0xb6a>
			}
			break;
		case PORT_C:
			if(DIO_cnfg_arr[input].DIR == OUTPUT)
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	c9 01       	movw	r24, r18
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	82 0f       	add	r24, r18
    14c4:	93 1f       	adc	r25, r19
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	fc 01       	movw	r30, r24
    14ce:	e5 58       	subi	r30, 0x85	; 133
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	80 81       	ld	r24, Z
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	09 f0       	breq	.+2      	; 0x14da <DIO_init+0x606>
    14d8:	8f c0       	rjmp	.+286    	; 0x15f8 <DIO_init+0x724>
			{
				REG_DDRC |=(1u<<DIO_cnfg_arr[input].PIN);
    14da:	a4 e3       	ldi	r26, 0x34	; 52
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e4 e3       	ldi	r30, 0x34	; 52
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	40 81       	ld	r20, Z
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	c9 01       	movw	r24, r18
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	82 0f       	add	r24, r18
    14f2:	93 1f       	adc	r25, r19
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	fc 01       	movw	r30, r24
    14fa:	e4 58       	subi	r30, 0x84	; 132
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	80 81       	ld	r24, Z
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 c0       	rjmp	.+4      	; 0x150e <DIO_init+0x63a>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	2a 95       	dec	r18
    1510:	e2 f7       	brpl	.-8      	; 0x150a <DIO_init+0x636>
    1512:	84 2b       	or	r24, r20
    1514:	8c 93       	st	X, r24
				if (DIO_cnfg_arr[input].OUT == HIGH)
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	c9 01       	movw	r24, r18
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	82 0f       	add	r24, r18
    1524:	93 1f       	adc	r25, r19
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	fc 01       	movw	r30, r24
    152c:	e2 58       	subi	r30, 0x82	; 130
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	80 81       	ld	r24, Z
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	01 f5       	brne	.+64     	; 0x1576 <DIO_init+0x6a2>
				{
					REG_PORTC |=(1u<<DIO_cnfg_arr[input].PIN);
    1536:	a5 e3       	ldi	r26, 0x35	; 53
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e5 e3       	ldi	r30, 0x35	; 53
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	40 81       	ld	r20, Z
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	c9 01       	movw	r24, r18
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	82 0f       	add	r24, r18
    154e:	93 1f       	adc	r25, r19
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	fc 01       	movw	r30, r24
    1556:	e4 58       	subi	r30, 0x84	; 132
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	80 81       	ld	r24, Z
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <DIO_init+0x698>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <DIO_init+0x694>
    1570:	84 2b       	or	r24, r20
    1572:	8c 93       	st	X, r24
    1574:	64 c2       	rjmp	.+1224   	; 0x1a3e <DIO_init+0xb6a>
				}
				else if (DIO_cnfg_arr[input].OUT == LOW)
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	c9 01       	movw	r24, r18
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	82 0f       	add	r24, r18
    1584:	93 1f       	adc	r25, r19
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	fc 01       	movw	r30, r24
    158c:	e2 58       	subi	r30, 0x82	; 130
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	80 81       	ld	r24, Z
    1592:	88 23       	and	r24, r24
    1594:	09 f5       	brne	.+66     	; 0x15d8 <DIO_init+0x704>
				{
					REG_PORTC &=~(1u<<DIO_cnfg_arr[input].PIN);
    1596:	a5 e3       	ldi	r26, 0x35	; 53
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e5 e3       	ldi	r30, 0x35	; 53
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	40 81       	ld	r20, Z
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	c9 01       	movw	r24, r18
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	82 0f       	add	r24, r18
    15ae:	93 1f       	adc	r25, r19
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	fc 01       	movw	r30, r24
    15b6:	e4 58       	subi	r30, 0x84	; 132
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	80 81       	ld	r24, Z
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	02 2e       	mov	r0, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <DIO_init+0x6f8>
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	0a 94       	dec	r0
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <DIO_init+0x6f4>
    15d0:	80 95       	com	r24
    15d2:	84 23       	and	r24, r20
    15d4:	8c 93       	st	X, r24
    15d6:	33 c2       	rjmp	.+1126   	; 0x1a3e <DIO_init+0xb6a>
				}
				else
				{
					DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	c9 01       	movw	r24, r18
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	82 0f       	add	r24, r18
    15e6:	93 1f       	adc	r25, r19
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	fc 01       	movw	r30, r24
    15ee:	e0 58       	subi	r30, 0x80	; 128
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	10 82       	st	Z, r1
					retval = NOK;
    15f4:	19 82       	std	Y+1, r1	; 0x01
    15f6:	23 c2       	rjmp	.+1094   	; 0x1a3e <DIO_init+0xb6a>
				}
			}
			else if(DIO_cnfg_arr[input].DIR == INPUT)
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	c9 01       	movw	r24, r18
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	82 0f       	add	r24, r18
    1606:	93 1f       	adc	r25, r19
    1608:	01 96       	adiw	r24, 0x01	; 1
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	fc 01       	movw	r30, r24
    1610:	e5 58       	subi	r30, 0x85	; 133
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	80 81       	ld	r24, Z
    1616:	88 23       	and	r24, r24
    1618:	09 f0       	breq	.+2      	; 0x161c <DIO_init+0x748>
    161a:	90 c0       	rjmp	.+288    	; 0x173c <DIO_init+0x868>
			{
				REG_DDRC &=~(1u<<DIO_cnfg_arr[input].PIN);
    161c:	a4 e3       	ldi	r26, 0x34	; 52
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e4 e3       	ldi	r30, 0x34	; 52
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	40 81       	ld	r20, Z
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	c9 01       	movw	r24, r18
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	82 0f       	add	r24, r18
    1634:	93 1f       	adc	r25, r19
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	fc 01       	movw	r30, r24
    163c:	e4 58       	subi	r30, 0x84	; 132
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	80 81       	ld	r24, Z
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <DIO_init+0x77c>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	2a 95       	dec	r18
    1652:	e2 f7       	brpl	.-8      	; 0x164c <DIO_init+0x778>
    1654:	80 95       	com	r24
    1656:	84 23       	and	r24, r20
    1658:	8c 93       	st	X, r24
				if (DIO_cnfg_arr[input].RES == PULLUP)
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	c9 01       	movw	r24, r18
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	82 0f       	add	r24, r18
    1668:	93 1f       	adc	r25, r19
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	fc 01       	movw	r30, r24
    1670:	e1 58       	subi	r30, 0x81	; 129
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	80 81       	ld	r24, Z
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	01 f5       	brne	.+64     	; 0x16ba <DIO_init+0x7e6>
				{
					REG_PORTC |=(1u<<DIO_cnfg_arr[input].PIN);
    167a:	a5 e3       	ldi	r26, 0x35	; 53
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e5 e3       	ldi	r30, 0x35	; 53
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	40 81       	ld	r20, Z
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	c9 01       	movw	r24, r18
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	82 0f       	add	r24, r18
    1692:	93 1f       	adc	r25, r19
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	fc 01       	movw	r30, r24
    169a:	e4 58       	subi	r30, 0x84	; 132
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	80 81       	ld	r24, Z
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_init+0x7dc>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_init+0x7d8>
    16b4:	84 2b       	or	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	c2 c1       	rjmp	.+900    	; 0x1a3e <DIO_init+0xb6a>
				}
				else if (DIO_cnfg_arr[input].RES == EXTRES)
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	c9 01       	movw	r24, r18
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	82 0f       	add	r24, r18
    16c8:	93 1f       	adc	r25, r19
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	fc 01       	movw	r30, r24
    16d0:	e1 58       	subi	r30, 0x81	; 129
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 81       	ld	r24, Z
    16d6:	88 23       	and	r24, r24
    16d8:	09 f5       	brne	.+66     	; 0x171c <DIO_init+0x848>
				{
					REG_PORTC &=~(1u<<DIO_cnfg_arr[input].PIN);
    16da:	a5 e3       	ldi	r26, 0x35	; 53
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e5 e3       	ldi	r30, 0x35	; 53
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	40 81       	ld	r20, Z
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	c9 01       	movw	r24, r18
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	82 0f       	add	r24, r18
    16f2:	93 1f       	adc	r25, r19
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	fc 01       	movw	r30, r24
    16fa:	e4 58       	subi	r30, 0x84	; 132
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	80 81       	ld	r24, Z
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 2e       	mov	r0, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <DIO_init+0x83c>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <DIO_init+0x838>
    1714:	80 95       	com	r24
    1716:	84 23       	and	r24, r20
    1718:	8c 93       	st	X, r24
    171a:	91 c1       	rjmp	.+802    	; 0x1a3e <DIO_init+0xb6a>
				}
				else
				{
					DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	c9 01       	movw	r24, r18
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	82 0f       	add	r24, r18
    172a:	93 1f       	adc	r25, r19
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	fc 01       	movw	r30, r24
    1732:	e0 58       	subi	r30, 0x80	; 128
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	10 82       	st	Z, r1
					retval = NOK;
    1738:	19 82       	std	Y+1, r1	; 0x01
    173a:	81 c1       	rjmp	.+770    	; 0x1a3e <DIO_init+0xb6a>
				}
			}
			else
			{
				DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	c9 01       	movw	r24, r18
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	82 0f       	add	r24, r18
    174a:	93 1f       	adc	r25, r19
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	fc 01       	movw	r30, r24
    1752:	e0 58       	subi	r30, 0x80	; 128
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	10 82       	st	Z, r1
				retval = NOK;
    1758:	19 82       	std	Y+1, r1	; 0x01
    175a:	71 c1       	rjmp	.+738    	; 0x1a3e <DIO_init+0xb6a>
			}
			break;
		case PORT_D:
			if(DIO_cnfg_arr[input].DIR == OUTPUT)
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	c9 01       	movw	r24, r18
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	82 0f       	add	r24, r18
    176a:	93 1f       	adc	r25, r19
    176c:	01 96       	adiw	r24, 0x01	; 1
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	fc 01       	movw	r30, r24
    1774:	e5 58       	subi	r30, 0x85	; 133
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 81       	ld	r24, Z
    177a:	81 30       	cpi	r24, 0x01	; 1
    177c:	09 f0       	breq	.+2      	; 0x1780 <DIO_init+0x8ac>
    177e:	8f c0       	rjmp	.+286    	; 0x189e <DIO_init+0x9ca>
			{
				REG_DDRD |=(1u<<DIO_cnfg_arr[input].PIN);
    1780:	a1 e3       	ldi	r26, 0x31	; 49
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e1 e3       	ldi	r30, 0x31	; 49
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	40 81       	ld	r20, Z
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	c9 01       	movw	r24, r18
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	82 0f       	add	r24, r18
    1798:	93 1f       	adc	r25, r19
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	fc 01       	movw	r30, r24
    17a0:	e4 58       	subi	r30, 0x84	; 132
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	80 81       	ld	r24, Z
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <DIO_init+0x8e0>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	2a 95       	dec	r18
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <DIO_init+0x8dc>
    17b8:	84 2b       	or	r24, r20
    17ba:	8c 93       	st	X, r24
				if (DIO_cnfg_arr[input].OUT == HIGH)
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	c9 01       	movw	r24, r18
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	82 0f       	add	r24, r18
    17ca:	93 1f       	adc	r25, r19
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	fc 01       	movw	r30, r24
    17d2:	e2 58       	subi	r30, 0x82	; 130
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	80 81       	ld	r24, Z
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	01 f5       	brne	.+64     	; 0x181c <DIO_init+0x948>
				{
					REG_PORTD |=(1u<<DIO_cnfg_arr[input].PIN);
    17dc:	a2 e3       	ldi	r26, 0x32	; 50
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e2 e3       	ldi	r30, 0x32	; 50
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	40 81       	ld	r20, Z
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	c9 01       	movw	r24, r18
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	82 0f       	add	r24, r18
    17f4:	93 1f       	adc	r25, r19
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	fc 01       	movw	r30, r24
    17fc:	e4 58       	subi	r30, 0x84	; 132
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	80 81       	ld	r24, Z
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <DIO_init+0x93e>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <DIO_init+0x93a>
    1816:	84 2b       	or	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	11 c1       	rjmp	.+546    	; 0x1a3e <DIO_init+0xb6a>
				}
				else if (DIO_cnfg_arr[input].OUT == LOW)
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	c9 01       	movw	r24, r18
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	82 0f       	add	r24, r18
    182a:	93 1f       	adc	r25, r19
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	fc 01       	movw	r30, r24
    1832:	e2 58       	subi	r30, 0x82	; 130
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	80 81       	ld	r24, Z
    1838:	88 23       	and	r24, r24
    183a:	09 f5       	brne	.+66     	; 0x187e <DIO_init+0x9aa>
				{
					REG_PORTD &=~(1u<<DIO_cnfg_arr[input].PIN);
    183c:	a2 e3       	ldi	r26, 0x32	; 50
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e2 e3       	ldi	r30, 0x32	; 50
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	40 81       	ld	r20, Z
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	c9 01       	movw	r24, r18
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	82 0f       	add	r24, r18
    1854:	93 1f       	adc	r25, r19
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	fc 01       	movw	r30, r24
    185c:	e4 58       	subi	r30, 0x84	; 132
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	80 81       	ld	r24, Z
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 2e       	mov	r0, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <DIO_init+0x99e>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	0a 94       	dec	r0
    1874:	e2 f7       	brpl	.-8      	; 0x186e <DIO_init+0x99a>
    1876:	80 95       	com	r24
    1878:	84 23       	and	r24, r20
    187a:	8c 93       	st	X, r24
    187c:	e0 c0       	rjmp	.+448    	; 0x1a3e <DIO_init+0xb6a>
				}
				else
				{
					DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	c9 01       	movw	r24, r18
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	82 0f       	add	r24, r18
    188c:	93 1f       	adc	r25, r19
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	fc 01       	movw	r30, r24
    1894:	e0 58       	subi	r30, 0x80	; 128
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	10 82       	st	Z, r1
					retval = NOK;
    189a:	19 82       	std	Y+1, r1	; 0x01
    189c:	d0 c0       	rjmp	.+416    	; 0x1a3e <DIO_init+0xb6a>
				}
			}
			else if(DIO_cnfg_arr[input].DIR == INPUT)
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	c9 01       	movw	r24, r18
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	82 0f       	add	r24, r18
    18ac:	93 1f       	adc	r25, r19
    18ae:	01 96       	adiw	r24, 0x01	; 1
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	fc 01       	movw	r30, r24
    18b6:	e5 58       	subi	r30, 0x85	; 133
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	80 81       	ld	r24, Z
    18bc:	88 23       	and	r24, r24
    18be:	09 f0       	breq	.+2      	; 0x18c2 <DIO_init+0x9ee>
    18c0:	90 c0       	rjmp	.+288    	; 0x19e2 <DIO_init+0xb0e>
			{
				REG_DDRD &=~(1u<<DIO_cnfg_arr[input].PIN);
    18c2:	a1 e3       	ldi	r26, 0x31	; 49
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e1 e3       	ldi	r30, 0x31	; 49
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	40 81       	ld	r20, Z
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	c9 01       	movw	r24, r18
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	82 0f       	add	r24, r18
    18da:	93 1f       	adc	r25, r19
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	fc 01       	movw	r30, r24
    18e2:	e4 58       	subi	r30, 0x84	; 132
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	80 81       	ld	r24, Z
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <DIO_init+0xa22>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	2a 95       	dec	r18
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <DIO_init+0xa1e>
    18fa:	80 95       	com	r24
    18fc:	84 23       	and	r24, r20
    18fe:	8c 93       	st	X, r24
				if (DIO_cnfg_arr[input].RES == PULLUP)
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	c9 01       	movw	r24, r18
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	82 0f       	add	r24, r18
    190e:	93 1f       	adc	r25, r19
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	fc 01       	movw	r30, r24
    1916:	e1 58       	subi	r30, 0x81	; 129
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	80 81       	ld	r24, Z
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	01 f5       	brne	.+64     	; 0x1960 <DIO_init+0xa8c>
				{
					REG_PORTD |=(1u<<DIO_cnfg_arr[input].PIN);
    1920:	a2 e3       	ldi	r26, 0x32	; 50
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e2 e3       	ldi	r30, 0x32	; 50
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	40 81       	ld	r20, Z
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	c9 01       	movw	r24, r18
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	82 0f       	add	r24, r18
    1938:	93 1f       	adc	r25, r19
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	fc 01       	movw	r30, r24
    1940:	e4 58       	subi	r30, 0x84	; 132
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	80 81       	ld	r24, Z
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 2e       	mov	r0, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <DIO_init+0xa82>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <DIO_init+0xa7e>
    195a:	84 2b       	or	r24, r20
    195c:	8c 93       	st	X, r24
    195e:	6f c0       	rjmp	.+222    	; 0x1a3e <DIO_init+0xb6a>
				}
				else if (DIO_cnfg_arr[input].RES == EXTRES)
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	c9 01       	movw	r24, r18
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	82 0f       	add	r24, r18
    196e:	93 1f       	adc	r25, r19
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	fc 01       	movw	r30, r24
    1976:	e1 58       	subi	r30, 0x81	; 129
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	80 81       	ld	r24, Z
    197c:	88 23       	and	r24, r24
    197e:	09 f5       	brne	.+66     	; 0x19c2 <DIO_init+0xaee>
				{
					REG_PORTD &=~(1u<<DIO_cnfg_arr[input].PIN);
    1980:	a2 e3       	ldi	r26, 0x32	; 50
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e2 e3       	ldi	r30, 0x32	; 50
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	40 81       	ld	r20, Z
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	c9 01       	movw	r24, r18
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	82 0f       	add	r24, r18
    1998:	93 1f       	adc	r25, r19
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	fc 01       	movw	r30, r24
    19a0:	e4 58       	subi	r30, 0x84	; 132
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	80 81       	ld	r24, Z
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	02 2e       	mov	r0, r18
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <DIO_init+0xae2>
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	0a 94       	dec	r0
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <DIO_init+0xade>
    19ba:	80 95       	com	r24
    19bc:	84 23       	and	r24, r20
    19be:	8c 93       	st	X, r24
    19c0:	3e c0       	rjmp	.+124    	; 0x1a3e <DIO_init+0xb6a>
				}
				else
				{
					DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	c9 01       	movw	r24, r18
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	82 0f       	add	r24, r18
    19d0:	93 1f       	adc	r25, r19
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	fc 01       	movw	r30, r24
    19d8:	e0 58       	subi	r30, 0x80	; 128
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	10 82       	st	Z, r1
					retval = NOK;
    19de:	19 82       	std	Y+1, r1	; 0x01
    19e0:	2e c0       	rjmp	.+92     	; 0x1a3e <DIO_init+0xb6a>
				}
			}
			else
			{
				DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	c9 01       	movw	r24, r18
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	82 0f       	add	r24, r18
    19f0:	93 1f       	adc	r25, r19
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	fc 01       	movw	r30, r24
    19f8:	e0 58       	subi	r30, 0x80	; 128
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	10 82       	st	Z, r1
				retval = NOK;
    19fe:	19 82       	std	Y+1, r1	; 0x01
    1a00:	1e c0       	rjmp	.+60     	; 0x1a3e <DIO_init+0xb6a>
			}
			break;
		default:
			DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	c9 01       	movw	r24, r18
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	82 0f       	add	r24, r18
    1a10:	93 1f       	adc	r25, r19
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	fc 01       	movw	r30, r24
    1a18:	e0 58       	subi	r30, 0x80	; 128
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	10 82       	st	Z, r1
			retval = NOK;
    1a1e:	19 82       	std	Y+1, r1	; 0x01
    1a20:	0e c0       	rjmp	.+28     	; 0x1a3e <DIO_init+0xb6a>
		}
	}
	else
	{
		DIO_cnfg_arr[input].IS_init_arr = NOT_INITIALIZED;
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	c9 01       	movw	r24, r18
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	82 0f       	add	r24, r18
    1a30:	93 1f       	adc	r25, r19
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	fc 01       	movw	r30, r24
    1a38:	e0 58       	subi	r30, 0x80	; 128
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	10 82       	st	Z, r1
	}
	retval = NOK;
    1a3e:	19 82       	std	Y+1, r1	; 0x01
	return retval;
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <DIO_read>:

Std_Func_t DIO_read (uint8 port,uint8 pin)
{
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <DIO_read+0x6>
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <DIO_read+0x8>
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <DIO_read+0xa>
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	8a 83       	std	Y+2, r24	; 0x02
    1a60:	6b 83       	std	Y+3, r22	; 0x03
	Std_Func_t retval = OK;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	89 83       	std	Y+1, r24	; 0x01

	switch (port)
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	3e 83       	std	Y+6, r19	; 0x06
    1a6e:	2d 83       	std	Y+5, r18	; 0x05
    1a70:	4d 81       	ldd	r20, Y+5	; 0x05
    1a72:	5e 81       	ldd	r21, Y+6	; 0x06
    1a74:	41 30       	cpi	r20, 0x01	; 1
    1a76:	51 05       	cpc	r21, r1
    1a78:	79 f1       	breq	.+94     	; 0x1ad8 <DIO_read+0x88>
    1a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7e:	82 30       	cpi	r24, 0x02	; 2
    1a80:	91 05       	cpc	r25, r1
    1a82:	34 f4       	brge	.+12     	; 0x1a90 <DIO_read+0x40>
    1a84:	2d 81       	ldd	r18, Y+5	; 0x05
    1a86:	3e 81       	ldd	r19, Y+6	; 0x06
    1a88:	21 15       	cp	r18, r1
    1a8a:	31 05       	cpc	r19, r1
    1a8c:	69 f0       	breq	.+26     	; 0x1aa8 <DIO_read+0x58>
    1a8e:	6c c0       	rjmp	.+216    	; 0x1b68 <DIO_read+0x118>
    1a90:	4d 81       	ldd	r20, Y+5	; 0x05
    1a92:	5e 81       	ldd	r21, Y+6	; 0x06
    1a94:	42 30       	cpi	r20, 0x02	; 2
    1a96:	51 05       	cpc	r21, r1
    1a98:	b9 f1       	breq	.+110    	; 0x1b08 <DIO_read+0xb8>
    1a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9e:	83 30       	cpi	r24, 0x03	; 3
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <DIO_read+0x56>
    1aa4:	49 c0       	rjmp	.+146    	; 0x1b38 <DIO_read+0xe8>
    1aa6:	60 c0       	rjmp	.+192    	; 0x1b68 <DIO_read+0x118>
	{
	case PORT_A:
		if((REG_PINA) & (1<<(pin)))
    1aa8:	e9 e3       	ldi	r30, 0x39	; 57
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	88 2f       	mov	r24, r24
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	a9 01       	movw	r20, r18
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <DIO_read+0x70>
    1abc:	55 95       	asr	r21
    1abe:	47 95       	ror	r20
    1ac0:	8a 95       	dec	r24
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <DIO_read+0x6c>
    1ac4:	ca 01       	movw	r24, r20
    1ac6:	81 70       	andi	r24, 0x01	; 1
    1ac8:	90 70       	andi	r25, 0x00	; 0
    1aca:	88 23       	and	r24, r24
    1acc:	19 f0       	breq	.+6      	; 0x1ad4 <DIO_read+0x84>
		{
			return 1;
    1ace:	51 e0       	ldi	r21, 0x01	; 1
    1ad0:	5c 83       	std	Y+4, r21	; 0x04
    1ad2:	4c c0       	rjmp	.+152    	; 0x1b6c <DIO_read+0x11c>
		}
		else
		{
			return 0;
    1ad4:	1c 82       	std	Y+4, r1	; 0x04
    1ad6:	4a c0       	rjmp	.+148    	; 0x1b6c <DIO_read+0x11c>
		}
		break;
	case PORT_B:
		if((REG_PINB) & (1<<(pin)))
    1ad8:	e6 e3       	ldi	r30, 0x36	; 54
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a9 01       	movw	r20, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <DIO_read+0xa0>
    1aec:	55 95       	asr	r21
    1aee:	47 95       	ror	r20
    1af0:	8a 95       	dec	r24
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <DIO_read+0x9c>
    1af4:	ca 01       	movw	r24, r20
    1af6:	81 70       	andi	r24, 0x01	; 1
    1af8:	90 70       	andi	r25, 0x00	; 0
    1afa:	88 23       	and	r24, r24
    1afc:	19 f0       	breq	.+6      	; 0x1b04 <DIO_read+0xb4>
		{
			return 1;
    1afe:	51 e0       	ldi	r21, 0x01	; 1
    1b00:	5c 83       	std	Y+4, r21	; 0x04
    1b02:	34 c0       	rjmp	.+104    	; 0x1b6c <DIO_read+0x11c>
		}
		else
		{
			return 0;
    1b04:	1c 82       	std	Y+4, r1	; 0x04
    1b06:	32 c0       	rjmp	.+100    	; 0x1b6c <DIO_read+0x11c>
		}
		break;
	case PORT_C:
		if((REG_PINC) & (1<<(pin)))
    1b08:	e3 e3       	ldi	r30, 0x33	; 51
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	a9 01       	movw	r20, r18
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <DIO_read+0xd0>
    1b1c:	55 95       	asr	r21
    1b1e:	47 95       	ror	r20
    1b20:	8a 95       	dec	r24
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <DIO_read+0xcc>
    1b24:	ca 01       	movw	r24, r20
    1b26:	81 70       	andi	r24, 0x01	; 1
    1b28:	90 70       	andi	r25, 0x00	; 0
    1b2a:	88 23       	and	r24, r24
    1b2c:	19 f0       	breq	.+6      	; 0x1b34 <DIO_read+0xe4>
		{
			return 1;
    1b2e:	51 e0       	ldi	r21, 0x01	; 1
    1b30:	5c 83       	std	Y+4, r21	; 0x04
    1b32:	1c c0       	rjmp	.+56     	; 0x1b6c <DIO_read+0x11c>
		}
		else
		{
			return 0;
    1b34:	1c 82       	std	Y+4, r1	; 0x04
    1b36:	1a c0       	rjmp	.+52     	; 0x1b6c <DIO_read+0x11c>
		}
		break;
	case PORT_D:
		if((REG_PIND) & (1<<(pin)))
    1b38:	e0 e3       	ldi	r30, 0x30	; 48
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a9 01       	movw	r20, r18
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <DIO_read+0x100>
    1b4c:	55 95       	asr	r21
    1b4e:	47 95       	ror	r20
    1b50:	8a 95       	dec	r24
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <DIO_read+0xfc>
    1b54:	ca 01       	movw	r24, r20
    1b56:	81 70       	andi	r24, 0x01	; 1
    1b58:	90 70       	andi	r25, 0x00	; 0
    1b5a:	88 23       	and	r24, r24
    1b5c:	19 f0       	breq	.+6      	; 0x1b64 <DIO_read+0x114>
						{
							return 1;
    1b5e:	51 e0       	ldi	r21, 0x01	; 1
    1b60:	5c 83       	std	Y+4, r21	; 0x04
    1b62:	04 c0       	rjmp	.+8      	; 0x1b6c <DIO_read+0x11c>
						}
						else
						{
							return 0;
    1b64:	1c 82       	std	Y+4, r1	; 0x04
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <DIO_read+0x11c>
						}
		break;
	}

	return retval;
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	8c 83       	std	Y+4, r24	; 0x04
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b6e:	26 96       	adiw	r28, 0x06	; 6
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <DIO_write>:

Std_Func_t DIO_write (uint8 port,uint8 pin,uint8 val, PINS_t input)
{
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	27 97       	sbiw	r28, 0x07	; 7
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	8a 83       	std	Y+2, r24	; 0x02
    1b96:	6b 83       	std	Y+3, r22	; 0x03
    1b98:	4c 83       	std	Y+4, r20	; 0x04
    1b9a:	2d 83       	std	Y+5, r18	; 0x05
	Std_Func_t retval = OK;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	89 83       	std	Y+1, r24	; 0x01
	if ((DIO_cnfg_arr[input].PORT == port)&&(DIO_cnfg_arr[input].PIN == pin))
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	c9 01       	movw	r24, r18
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	82 0f       	add	r24, r18
    1bae:	93 1f       	adc	r25, r19
    1bb0:	88 0f       	add	r24, r24
    1bb2:	99 1f       	adc	r25, r25
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	e5 58       	subi	r30, 0x85	; 133
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	90 81       	ld	r25, Z
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	98 17       	cp	r25, r24
    1bc0:	09 f0       	breq	.+2      	; 0x1bc4 <DIO_write+0x44>
    1bc2:	08 c1       	rjmp	.+528    	; 0x1dd4 <DIO_write+0x254>
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	c9 01       	movw	r24, r18
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	82 0f       	add	r24, r18
    1bd2:	93 1f       	adc	r25, r19
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	fc 01       	movw	r30, r24
    1bda:	e4 58       	subi	r30, 0x84	; 132
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	90 81       	ld	r25, Z
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	98 17       	cp	r25, r24
    1be4:	09 f0       	breq	.+2      	; 0x1be8 <DIO_write+0x68>
    1be6:	f6 c0       	rjmp	.+492    	; 0x1dd4 <DIO_write+0x254>
	{
		if(((DIO_cnfg_arr[input].IS_init_arr == INITIALIZED))
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	c9 01       	movw	r24, r18
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	82 0f       	add	r24, r18
    1bf6:	93 1f       	adc	r25, r19
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	e0 58       	subi	r30, 0x80	; 128
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	80 81       	ld	r24, Z
    1c04:	81 30       	cpi	r24, 0x01	; 1
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <DIO_write+0x8a>
    1c08:	e3 c0       	rjmp	.+454    	; 0x1dd0 <DIO_write+0x250>
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	c9 01       	movw	r24, r18
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	82 0f       	add	r24, r18
    1c18:	93 1f       	adc	r25, r19
    1c1a:	01 96       	adiw	r24, 0x01	; 1
    1c1c:	88 0f       	add	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	fc 01       	movw	r30, r24
    1c22:	e5 58       	subi	r30, 0x85	; 133
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	80 81       	ld	r24, Z
    1c28:	81 30       	cpi	r24, 0x01	; 1
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <DIO_write+0xae>
    1c2c:	d1 c0       	rjmp	.+418    	; 0x1dd0 <DIO_write+0x250>
    1c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	21 f0       	breq	.+8      	; 0x1c3c <DIO_write+0xbc>
    1c34:	8c 81       	ldd	r24, Y+4	; 0x04
    1c36:	88 23       	and	r24, r24
    1c38:	09 f0       	breq	.+2      	; 0x1c3c <DIO_write+0xbc>
    1c3a:	ca c0       	rjmp	.+404    	; 0x1dd0 <DIO_write+0x250>
				&&(DIO_cnfg_arr[input].DIR == OUTPUT)
				&&((val == HIGH)||(val == LOW)))
		{
			switch (port)
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	3f 83       	std	Y+7, r19	; 0x07
    1c44:	2e 83       	std	Y+6, r18	; 0x06
    1c46:	8e 81       	ldd	r24, Y+6	; 0x06
    1c48:	9f 81       	ldd	r25, Y+7	; 0x07
    1c4a:	81 30       	cpi	r24, 0x01	; 1
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <DIO_write+0xd2>
    1c50:	41 c0       	rjmp	.+130    	; 0x1cd4 <DIO_write+0x154>
    1c52:	2e 81       	ldd	r18, Y+6	; 0x06
    1c54:	3f 81       	ldd	r19, Y+7	; 0x07
    1c56:	22 30       	cpi	r18, 0x02	; 2
    1c58:	31 05       	cpc	r19, r1
    1c5a:	2c f4       	brge	.+10     	; 0x1c66 <DIO_write+0xe6>
    1c5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	71 f0       	breq	.+28     	; 0x1c80 <DIO_write+0x100>
    1c64:	b8 c0       	rjmp	.+368    	; 0x1dd6 <DIO_write+0x256>
    1c66:	2e 81       	ldd	r18, Y+6	; 0x06
    1c68:	3f 81       	ldd	r19, Y+7	; 0x07
    1c6a:	22 30       	cpi	r18, 0x02	; 2
    1c6c:	31 05       	cpc	r19, r1
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <DIO_write+0xf2>
    1c70:	5b c0       	rjmp	.+182    	; 0x1d28 <DIO_write+0x1a8>
    1c72:	8e 81       	ldd	r24, Y+6	; 0x06
    1c74:	9f 81       	ldd	r25, Y+7	; 0x07
    1c76:	83 30       	cpi	r24, 0x03	; 3
    1c78:	91 05       	cpc	r25, r1
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <DIO_write+0xfe>
    1c7c:	7f c0       	rjmp	.+254    	; 0x1d7c <DIO_write+0x1fc>
    1c7e:	ab c0       	rjmp	.+342    	; 0x1dd6 <DIO_write+0x256>
			{
			case PORT_A:
				if (val == HIGH)
    1c80:	8c 81       	ldd	r24, Y+4	; 0x04
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	99 f4       	brne	.+38     	; 0x1cac <DIO_write+0x12c>
				{
					REG_PORTA |=(1u<<pin);
    1c86:	ab e3       	ldi	r26, 0x3B	; 59
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	eb e3       	ldi	r30, 0x3B	; 59
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	40 81       	ld	r20, Z
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	02 2e       	mov	r0, r18
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <DIO_write+0x122>
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	0a 94       	dec	r0
    1ca4:	e2 f7       	brpl	.-8      	; 0x1c9e <DIO_write+0x11e>
    1ca6:	84 2b       	or	r24, r20
    1ca8:	8c 93       	st	X, r24
    1caa:	95 c0       	rjmp	.+298    	; 0x1dd6 <DIO_write+0x256>
				}
				else
				{
					REG_PORTA &=~(1u<<pin);
    1cac:	ab e3       	ldi	r26, 0x3B	; 59
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	eb e3       	ldi	r30, 0x3B	; 59
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	40 81       	ld	r20, Z
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 2e       	mov	r0, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <DIO_write+0x148>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	0a 94       	dec	r0
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <DIO_write+0x144>
    1ccc:	80 95       	com	r24
    1cce:	84 23       	and	r24, r20
    1cd0:	8c 93       	st	X, r24
    1cd2:	81 c0       	rjmp	.+258    	; 0x1dd6 <DIO_write+0x256>
				}
				break;
			case PORT_B:
				if (val == HIGH)
    1cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	99 f4       	brne	.+38     	; 0x1d00 <DIO_write+0x180>
				{
					REG_PORTB |=(1u<<pin);
    1cda:	a8 e3       	ldi	r26, 0x38	; 56
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e8 e3       	ldi	r30, 0x38	; 56
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	40 81       	ld	r20, Z
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	02 2e       	mov	r0, r18
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <DIO_write+0x176>
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	0a 94       	dec	r0
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <DIO_write+0x172>
    1cfa:	84 2b       	or	r24, r20
    1cfc:	8c 93       	st	X, r24
    1cfe:	6b c0       	rjmp	.+214    	; 0x1dd6 <DIO_write+0x256>
				}
				else
				{
					REG_PORTB &=~(1u<<pin);
    1d00:	a8 e3       	ldi	r26, 0x38	; 56
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e8 e3       	ldi	r30, 0x38	; 56
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	40 81       	ld	r20, Z
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	02 2e       	mov	r0, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <DIO_write+0x19c>
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	0a 94       	dec	r0
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <DIO_write+0x198>
    1d20:	80 95       	com	r24
    1d22:	84 23       	and	r24, r20
    1d24:	8c 93       	st	X, r24
    1d26:	57 c0       	rjmp	.+174    	; 0x1dd6 <DIO_write+0x256>
				}
				break;
			case PORT_C:
				if (val == HIGH)
    1d28:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2a:	81 30       	cpi	r24, 0x01	; 1
    1d2c:	99 f4       	brne	.+38     	; 0x1d54 <DIO_write+0x1d4>
				{
					REG_PORTC |=(1u<<pin);
    1d2e:	a5 e3       	ldi	r26, 0x35	; 53
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e5 e3       	ldi	r30, 0x35	; 53
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	40 81       	ld	r20, Z
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	02 2e       	mov	r0, r18
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <DIO_write+0x1ca>
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	0a 94       	dec	r0
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <DIO_write+0x1c6>
    1d4e:	84 2b       	or	r24, r20
    1d50:	8c 93       	st	X, r24
    1d52:	41 c0       	rjmp	.+130    	; 0x1dd6 <DIO_write+0x256>
				}
				else
				{
					REG_PORTC &=~(1u<<pin);
    1d54:	a5 e3       	ldi	r26, 0x35	; 53
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e5 e3       	ldi	r30, 0x35	; 53
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	40 81       	ld	r20, Z
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	02 2e       	mov	r0, r18
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <DIO_write+0x1f0>
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	0a 94       	dec	r0
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <DIO_write+0x1ec>
    1d74:	80 95       	com	r24
    1d76:	84 23       	and	r24, r20
    1d78:	8c 93       	st	X, r24
    1d7a:	2d c0       	rjmp	.+90     	; 0x1dd6 <DIO_write+0x256>
				}
				break;
			case PORT_D:
				if (val == HIGH)
    1d7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	99 f4       	brne	.+38     	; 0x1da8 <DIO_write+0x228>
				{
					REG_PORTD |=(1u<<pin);
    1d82:	a2 e3       	ldi	r26, 0x32	; 50
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e2 e3       	ldi	r30, 0x32	; 50
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	40 81       	ld	r20, Z
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	02 2e       	mov	r0, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <DIO_write+0x21e>
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	0a 94       	dec	r0
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <DIO_write+0x21a>
    1da2:	84 2b       	or	r24, r20
    1da4:	8c 93       	st	X, r24
    1da6:	17 c0       	rjmp	.+46     	; 0x1dd6 <DIO_write+0x256>
				}
				else
				{
					REG_PORTD &=~(1u<<pin);
    1da8:	a2 e3       	ldi	r26, 0x32	; 50
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e2 e3       	ldi	r30, 0x32	; 50
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	40 81       	ld	r20, Z
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	02 2e       	mov	r0, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <DIO_write+0x244>
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	0a 94       	dec	r0
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <DIO_write+0x240>
    1dc8:	80 95       	com	r24
    1dca:	84 23       	and	r24, r20
    1dcc:	8c 93       	st	X, r24
    1dce:	03 c0       	rjmp	.+6      	; 0x1dd6 <DIO_write+0x256>
				break;
			}
		}
		else
		{
			retval = NOK;
    1dd0:	19 82       	std	Y+1, r1	; 0x01
    1dd2:	01 c0       	rjmp	.+2      	; 0x1dd6 <DIO_write+0x256>
		}
	}
	else
	{
		retval = NOK;
    1dd4:	19 82       	std	Y+1, r1	; 0x01
	}
	return retval;
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd8:	27 96       	adiw	r28, 0x07	; 7
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <LCD_init>:

#include"LCD.h"



void LCD_init(void){
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
   /* set the control pins as output pins*/
	DIRECTION_CTRL_PINS |=(1<<RS)|(1<<RW)|(1<<E);
    1df2:	aa e3       	ldi	r26, 0x3A	; 58
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	ea e3       	ldi	r30, 0x3A	; 58
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	8e 60       	ori	r24, 0x0E	; 14
    1dfe:	8c 93       	st	X, r24
     #ifdef FIRST_PINS
	         DIRECTION_DATA_PINS|=0x0F;
	         LCD_sendCommand(BITS_4_MODES);
	         LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
     #else
	         DIRECTION_DATA_PINS|=0xF0;
    1e00:	aa e3       	ldi	r26, 0x3A	; 58
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	ea e3       	ldi	r30, 0x3A	; 58
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	80 6f       	ori	r24, 0xF0	; 240
    1e0c:	8c 93       	st	X, r24
	         LCD_sendCommand(BITS_4_MODES);
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_sendCommand>
	         LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    1e14:	88 e2       	ldi	r24, 0x28	; 40
    1e16:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_sendCommand>
#endif



	/*display on cursor off*/
	LCD_sendCommand(CURSOR_OFF);
    1e1a:	8c e0       	ldi	r24, 0x0C	; 12
    1e1c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_sendCommand>
	/* clear the screen first*/
	LCD_sendCommand(CLEAR_LCD);
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_sendCommand>
}
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <LCD_sendCommand>:

void LCD_sendCommand(unit8 command){
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	c3 56       	subi	r28, 0x63	; 99
    1e3a:	d0 40       	sbci	r29, 0x00	; 0
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	cd bf       	out	0x3d, r28	; 61
    1e46:	fe 01       	movw	r30, r28
    1e48:	ed 59       	subi	r30, 0x9D	; 157
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	80 83       	st	Z, r24
	/*make RS=0 to send command*/
	Pin_clear(CTRL_OUTPUT_PINS  ,RS);
    1e4e:	ab e3       	ldi	r26, 0x3B	; 59
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	eb e3       	ldi	r30, 0x3B	; 59
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	8d 7f       	andi	r24, 0xFD	; 253
    1e5a:	8c 93       	st	X, r24
	/*make RW=0 to write command*/
	Pin_clear(CTRL_OUTPUT_PINS ,RW);
    1e5c:	ab e3       	ldi	r26, 0x3B	; 59
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	eb e3       	ldi	r30, 0x3B	; 59
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	8b 7f       	andi	r24, 0xFB	; 251
    1e68:	8c 93       	st	X, r24
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e1 5a       	subi	r30, 0xA1	; 161
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	a0 e8       	ldi	r26, 0x80	; 128
    1e76:	bf e3       	ldi	r27, 0x3F	; 63
    1e78:	80 83       	st	Z, r24
    1e7a:	91 83       	std	Z+1, r25	; 0x01
    1e7c:	a2 83       	std	Z+2, r26	; 0x02
    1e7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e80:	8e 01       	movw	r16, r28
    1e82:	05 5a       	subi	r16, 0xA5	; 165
    1e84:	1f 4f       	sbci	r17, 0xFF	; 255
    1e86:	fe 01       	movw	r30, r28
    1e88:	e1 5a       	subi	r30, 0xA1	; 161
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	60 81       	ld	r22, Z
    1e8e:	71 81       	ldd	r23, Z+1	; 0x01
    1e90:	82 81       	ldd	r24, Z+2	; 0x02
    1e92:	93 81       	ldd	r25, Z+3	; 0x03
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	4a ef       	ldi	r20, 0xFA	; 250
    1e9a:	54 e4       	ldi	r21, 0x44	; 68
    1e9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	f8 01       	movw	r30, r16
    1ea6:	80 83       	st	Z, r24
    1ea8:	91 83       	std	Z+1, r25	; 0x01
    1eaa:	a2 83       	std	Z+2, r26	; 0x02
    1eac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e5 5a       	subi	r30, 0xA5	; 165
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	60 81       	ld	r22, Z
    1eb6:	71 81       	ldd	r23, Z+1	; 0x01
    1eb8:	82 81       	ldd	r24, Z+2	; 0x02
    1eba:	93 81       	ldd	r25, Z+3	; 0x03
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e8       	ldi	r20, 0x80	; 128
    1ec2:	5f e3       	ldi	r21, 0x3F	; 63
    1ec4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ec8:	88 23       	and	r24, r24
    1eca:	44 f4       	brge	.+16     	; 0x1edc <LCD_sendCommand+0xb0>
		__ticks = 1;
    1ecc:	fe 01       	movw	r30, r28
    1ece:	e7 5a       	subi	r30, 0xA7	; 167
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	91 83       	std	Z+1, r25	; 0x01
    1ed8:	80 83       	st	Z, r24
    1eda:	64 c0       	rjmp	.+200    	; 0x1fa4 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1edc:	fe 01       	movw	r30, r28
    1ede:	e5 5a       	subi	r30, 0xA5	; 165
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	60 81       	ld	r22, Z
    1ee4:	71 81       	ldd	r23, Z+1	; 0x01
    1ee6:	82 81       	ldd	r24, Z+2	; 0x02
    1ee8:	93 81       	ldd	r25, Z+3	; 0x03
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	3f ef       	ldi	r19, 0xFF	; 255
    1eee:	4f e7       	ldi	r20, 0x7F	; 127
    1ef0:	57 e4       	ldi	r21, 0x47	; 71
    1ef2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ef6:	18 16       	cp	r1, r24
    1ef8:	0c f0       	brlt	.+2      	; 0x1efc <LCD_sendCommand+0xd0>
    1efa:	43 c0       	rjmp	.+134    	; 0x1f82 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efc:	fe 01       	movw	r30, r28
    1efe:	e1 5a       	subi	r30, 0xA1	; 161
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	60 81       	ld	r22, Z
    1f04:	71 81       	ldd	r23, Z+1	; 0x01
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e2       	ldi	r20, 0x20	; 32
    1f10:	51 e4       	ldi	r21, 0x41	; 65
    1f12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	8e 01       	movw	r16, r28
    1f1c:	07 5a       	subi	r16, 0xA7	; 167
    1f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f20:	bc 01       	movw	r22, r24
    1f22:	cd 01       	movw	r24, r26
    1f24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	80 83       	st	Z, r24
    1f32:	1f c0       	rjmp	.+62     	; 0x1f72 <LCD_sendCommand+0x146>
    1f34:	fe 01       	movw	r30, r28
    1f36:	e9 5a       	subi	r30, 0xA9	; 169
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	88 ec       	ldi	r24, 0xC8	; 200
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	80 83       	st	Z, r24
    1f42:	fe 01       	movw	r30, r28
    1f44:	e9 5a       	subi	r30, 0xA9	; 169
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	80 81       	ld	r24, Z
    1f4a:	91 81       	ldd	r25, Z+1	; 0x01
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <LCD_sendCommand+0x120>
    1f50:	fe 01       	movw	r30, r28
    1f52:	e9 5a       	subi	r30, 0xA9	; 169
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	91 83       	std	Z+1, r25	; 0x01
    1f58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5a:	de 01       	movw	r26, r28
    1f5c:	a7 5a       	subi	r26, 0xA7	; 167
    1f5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f60:	fe 01       	movw	r30, r28
    1f62:	e7 5a       	subi	r30, 0xA7	; 167
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	80 81       	ld	r24, Z
    1f68:	91 81       	ldd	r25, Z+1	; 0x01
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	11 96       	adiw	r26, 0x01	; 1
    1f6e:	9c 93       	st	X, r25
    1f70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f72:	fe 01       	movw	r30, r28
    1f74:	e7 5a       	subi	r30, 0xA7	; 167
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	80 81       	ld	r24, Z
    1f7a:	91 81       	ldd	r25, Z+1	; 0x01
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	d1 f6       	brne	.-76     	; 0x1f34 <LCD_sendCommand+0x108>
    1f80:	27 c0       	rjmp	.+78     	; 0x1fd0 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f82:	8e 01       	movw	r16, r28
    1f84:	07 5a       	subi	r16, 0xA7	; 167
    1f86:	1f 4f       	sbci	r17, 0xFF	; 255
    1f88:	fe 01       	movw	r30, r28
    1f8a:	e5 5a       	subi	r30, 0xA5	; 165
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	60 81       	ld	r22, Z
    1f90:	71 81       	ldd	r23, Z+1	; 0x01
    1f92:	82 81       	ldd	r24, Z+2	; 0x02
    1f94:	93 81       	ldd	r25, Z+3	; 0x03
    1f96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	f8 01       	movw	r30, r16
    1fa0:	91 83       	std	Z+1, r25	; 0x01
    1fa2:	80 83       	st	Z, r24
    1fa4:	de 01       	movw	r26, r28
    1fa6:	ab 5a       	subi	r26, 0xAB	; 171
    1fa8:	bf 4f       	sbci	r27, 0xFF	; 255
    1faa:	fe 01       	movw	r30, r28
    1fac:	e7 5a       	subi	r30, 0xA7	; 167
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	80 81       	ld	r24, Z
    1fb2:	91 81       	ldd	r25, Z+1	; 0x01
    1fb4:	8d 93       	st	X+, r24
    1fb6:	9c 93       	st	X, r25
    1fb8:	fe 01       	movw	r30, r28
    1fba:	eb 5a       	subi	r30, 0xAB	; 171
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	80 81       	ld	r24, Z
    1fc0:	91 81       	ldd	r25, Z+1	; 0x01
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <LCD_sendCommand+0x196>
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	eb 5a       	subi	r30, 0xAB	; 171
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	91 83       	std	Z+1, r25	; 0x01
    1fce:	80 83       	st	Z, r24
	/*wait tas before enabling 50ns */
	_delay_ms(1);
	/* Enable =1 */
	Pin_output(CTRL_OUTPUT_PINS  ,E);
    1fd0:	ab e3       	ldi	r26, 0x3B	; 59
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	eb e3       	ldi	r30, 0x3B	; 59
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	88 60       	ori	r24, 0x08	; 8
    1fdc:	8c 93       	st	X, r24
    1fde:	fe 01       	movw	r30, r28
    1fe0:	ef 5a       	subi	r30, 0xAF	; 175
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	a0 e8       	ldi	r26, 0x80	; 128
    1fea:	bf e3       	ldi	r27, 0x3F	; 63
    1fec:	80 83       	st	Z, r24
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	a2 83       	std	Z+2, r26	; 0x02
    1ff2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff4:	8e 01       	movw	r16, r28
    1ff6:	03 5b       	subi	r16, 0xB3	; 179
    1ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	ef 5a       	subi	r30, 0xAF	; 175
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	60 81       	ld	r22, Z
    2002:	71 81       	ldd	r23, Z+1	; 0x01
    2004:	82 81       	ldd	r24, Z+2	; 0x02
    2006:	93 81       	ldd	r25, Z+3	; 0x03
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	4a ef       	ldi	r20, 0xFA	; 250
    200e:	54 e4       	ldi	r21, 0x44	; 68
    2010:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	f8 01       	movw	r30, r16
    201a:	80 83       	st	Z, r24
    201c:	91 83       	std	Z+1, r25	; 0x01
    201e:	a2 83       	std	Z+2, r26	; 0x02
    2020:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2022:	fe 01       	movw	r30, r28
    2024:	e3 5b       	subi	r30, 0xB3	; 179
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	60 81       	ld	r22, Z
    202a:	71 81       	ldd	r23, Z+1	; 0x01
    202c:	82 81       	ldd	r24, Z+2	; 0x02
    202e:	93 81       	ldd	r25, Z+3	; 0x03
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e8       	ldi	r20, 0x80	; 128
    2036:	5f e3       	ldi	r21, 0x3F	; 63
    2038:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    203c:	88 23       	and	r24, r24
    203e:	44 f4       	brge	.+16     	; 0x2050 <LCD_sendCommand+0x224>
		__ticks = 1;
    2040:	fe 01       	movw	r30, r28
    2042:	e5 5b       	subi	r30, 0xB5	; 181
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	80 83       	st	Z, r24
    204e:	64 c0       	rjmp	.+200    	; 0x2118 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    2050:	fe 01       	movw	r30, r28
    2052:	e3 5b       	subi	r30, 0xB3	; 179
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	60 81       	ld	r22, Z
    2058:	71 81       	ldd	r23, Z+1	; 0x01
    205a:	82 81       	ldd	r24, Z+2	; 0x02
    205c:	93 81       	ldd	r25, Z+3	; 0x03
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	3f ef       	ldi	r19, 0xFF	; 255
    2062:	4f e7       	ldi	r20, 0x7F	; 127
    2064:	57 e4       	ldi	r21, 0x47	; 71
    2066:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    206a:	18 16       	cp	r1, r24
    206c:	0c f0       	brlt	.+2      	; 0x2070 <LCD_sendCommand+0x244>
    206e:	43 c0       	rjmp	.+134    	; 0x20f6 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2070:	fe 01       	movw	r30, r28
    2072:	ef 5a       	subi	r30, 0xAF	; 175
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	60 81       	ld	r22, Z
    2078:	71 81       	ldd	r23, Z+1	; 0x01
    207a:	82 81       	ldd	r24, Z+2	; 0x02
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e2       	ldi	r20, 0x20	; 32
    2084:	51 e4       	ldi	r21, 0x41	; 65
    2086:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	8e 01       	movw	r16, r28
    2090:	05 5b       	subi	r16, 0xB5	; 181
    2092:	1f 4f       	sbci	r17, 0xFF	; 255
    2094:	bc 01       	movw	r22, r24
    2096:	cd 01       	movw	r24, r26
    2098:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	f8 01       	movw	r30, r16
    20a2:	91 83       	std	Z+1, r25	; 0x01
    20a4:	80 83       	st	Z, r24
    20a6:	1f c0       	rjmp	.+62     	; 0x20e6 <LCD_sendCommand+0x2ba>
    20a8:	fe 01       	movw	r30, r28
    20aa:	e7 5b       	subi	r30, 0xB7	; 183
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	88 ec       	ldi	r24, 0xC8	; 200
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	91 83       	std	Z+1, r25	; 0x01
    20b4:	80 83       	st	Z, r24
    20b6:	fe 01       	movw	r30, r28
    20b8:	e7 5b       	subi	r30, 0xB7	; 183
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	80 81       	ld	r24, Z
    20be:	91 81       	ldd	r25, Z+1	; 0x01
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <LCD_sendCommand+0x294>
    20c4:	fe 01       	movw	r30, r28
    20c6:	e7 5b       	subi	r30, 0xB7	; 183
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	91 83       	std	Z+1, r25	; 0x01
    20cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ce:	de 01       	movw	r26, r28
    20d0:	a5 5b       	subi	r26, 0xB5	; 181
    20d2:	bf 4f       	sbci	r27, 0xFF	; 255
    20d4:	fe 01       	movw	r30, r28
    20d6:	e5 5b       	subi	r30, 0xB5	; 181
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 81       	ld	r24, Z
    20dc:	91 81       	ldd	r25, Z+1	; 0x01
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	11 96       	adiw	r26, 0x01	; 1
    20e2:	9c 93       	st	X, r25
    20e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e6:	fe 01       	movw	r30, r28
    20e8:	e5 5b       	subi	r30, 0xB5	; 181
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	80 81       	ld	r24, Z
    20ee:	91 81       	ldd	r25, Z+1	; 0x01
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	d1 f6       	brne	.-76     	; 0x20a8 <LCD_sendCommand+0x27c>
    20f4:	27 c0       	rjmp	.+78     	; 0x2144 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f6:	8e 01       	movw	r16, r28
    20f8:	05 5b       	subi	r16, 0xB5	; 181
    20fa:	1f 4f       	sbci	r17, 0xFF	; 255
    20fc:	fe 01       	movw	r30, r28
    20fe:	e3 5b       	subi	r30, 0xB3	; 179
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	60 81       	ld	r22, Z
    2104:	71 81       	ldd	r23, Z+1	; 0x01
    2106:	82 81       	ldd	r24, Z+2	; 0x02
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	f8 01       	movw	r30, r16
    2114:	91 83       	std	Z+1, r25	; 0x01
    2116:	80 83       	st	Z, r24
    2118:	de 01       	movw	r26, r28
    211a:	a9 5b       	subi	r26, 0xB9	; 185
    211c:	bf 4f       	sbci	r27, 0xFF	; 255
    211e:	fe 01       	movw	r30, r28
    2120:	e5 5b       	subi	r30, 0xB5	; 181
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	80 81       	ld	r24, Z
    2126:	91 81       	ldd	r25, Z+1	; 0x01
    2128:	8d 93       	st	X+, r24
    212a:	9c 93       	st	X, r25
    212c:	fe 01       	movw	r30, r28
    212e:	e9 5b       	subi	r30, 0xB9	; 185
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	80 81       	ld	r24, Z
    2134:	91 81       	ldd	r25, Z+1	; 0x01
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <LCD_sendCommand+0x30a>
    213a:	fe 01       	movw	r30, r28
    213c:	e9 5b       	subi	r30, 0xB9	; 185
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	91 83       	std	Z+1, r25	; 0x01
    2142:	80 83       	st	Z, r24

	   /*	DATA_OUTPUT_PINS = (DATA_OUTPUT_PINS & 0xF0) | ((command & 0xF0) >> 4);*/
	   	    TAKE_FTCOMMAND(DATA_OUTPUT_PINS,command);
     #else
	   	/*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS & 0x0F) | (command & 0xF0);*/
	   	  TAKE_FTCOMMAND(DATA_OUTPUT_PINS,command);
    2144:	ab e3       	ldi	r26, 0x3B	; 59
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	eb e3       	ldi	r30, 0x3B	; 59
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	98 2f       	mov	r25, r24
    2150:	9f 70       	andi	r25, 0x0F	; 15
    2152:	fe 01       	movw	r30, r28
    2154:	ed 59       	subi	r30, 0x9D	; 157
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 81       	ld	r24, Z
    215a:	80 7f       	andi	r24, 0xF0	; 240
    215c:	89 2b       	or	r24, r25
    215e:	8c 93       	st	X, r24
    2160:	fe 01       	movw	r30, r28
    2162:	ed 5b       	subi	r30, 0xBD	; 189
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	a0 e8       	ldi	r26, 0x80	; 128
    216c:	bf e3       	ldi	r27, 0x3F	; 63
    216e:	80 83       	st	Z, r24
    2170:	91 83       	std	Z+1, r25	; 0x01
    2172:	a2 83       	std	Z+2, r26	; 0x02
    2174:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2176:	8e 01       	movw	r16, r28
    2178:	01 5c       	subi	r16, 0xC1	; 193
    217a:	1f 4f       	sbci	r17, 0xFF	; 255
    217c:	fe 01       	movw	r30, r28
    217e:	ed 5b       	subi	r30, 0xBD	; 189
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	60 81       	ld	r22, Z
    2184:	71 81       	ldd	r23, Z+1	; 0x01
    2186:	82 81       	ldd	r24, Z+2	; 0x02
    2188:	93 81       	ldd	r25, Z+3	; 0x03
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	4a ef       	ldi	r20, 0xFA	; 250
    2190:	54 e4       	ldi	r21, 0x44	; 68
    2192:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	f8 01       	movw	r30, r16
    219c:	80 83       	st	Z, r24
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	a2 83       	std	Z+2, r26	; 0x02
    21a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21a4:	fe 01       	movw	r30, r28
    21a6:	ff 96       	adiw	r30, 0x3f	; 63
    21a8:	60 81       	ld	r22, Z
    21aa:	71 81       	ldd	r23, Z+1	; 0x01
    21ac:	82 81       	ldd	r24, Z+2	; 0x02
    21ae:	93 81       	ldd	r25, Z+3	; 0x03
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e8       	ldi	r20, 0x80	; 128
    21b6:	5f e3       	ldi	r21, 0x3F	; 63
    21b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21bc:	88 23       	and	r24, r24
    21be:	2c f4       	brge	.+10     	; 0x21ca <LCD_sendCommand+0x39e>
		__ticks = 1;
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	9e af       	std	Y+62, r25	; 0x3e
    21c6:	8d af       	std	Y+61, r24	; 0x3d
    21c8:	46 c0       	rjmp	.+140    	; 0x2256 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    21ca:	fe 01       	movw	r30, r28
    21cc:	ff 96       	adiw	r30, 0x3f	; 63
    21ce:	60 81       	ld	r22, Z
    21d0:	71 81       	ldd	r23, Z+1	; 0x01
    21d2:	82 81       	ldd	r24, Z+2	; 0x02
    21d4:	93 81       	ldd	r25, Z+3	; 0x03
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	3f ef       	ldi	r19, 0xFF	; 255
    21da:	4f e7       	ldi	r20, 0x7F	; 127
    21dc:	57 e4       	ldi	r21, 0x47	; 71
    21de:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21e2:	18 16       	cp	r1, r24
    21e4:	64 f5       	brge	.+88     	; 0x223e <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e6:	fe 01       	movw	r30, r28
    21e8:	ed 5b       	subi	r30, 0xBD	; 189
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	60 81       	ld	r22, Z
    21ee:	71 81       	ldd	r23, Z+1	; 0x01
    21f0:	82 81       	ldd	r24, Z+2	; 0x02
    21f2:	93 81       	ldd	r25, Z+3	; 0x03
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e2       	ldi	r20, 0x20	; 32
    21fa:	51 e4       	ldi	r21, 0x41	; 65
    21fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9e af       	std	Y+62, r25	; 0x3e
    2212:	8d af       	std	Y+61, r24	; 0x3d
    2214:	0f c0       	rjmp	.+30     	; 0x2234 <LCD_sendCommand+0x408>
    2216:	88 ec       	ldi	r24, 0xC8	; 200
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9c af       	std	Y+60, r25	; 0x3c
    221c:	8b af       	std	Y+59, r24	; 0x3b
    221e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2220:	9c ad       	ldd	r25, Y+60	; 0x3c
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <LCD_sendCommand+0x3f6>
    2226:	9c af       	std	Y+60, r25	; 0x3c
    2228:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222a:	8d ad       	ldd	r24, Y+61	; 0x3d
    222c:	9e ad       	ldd	r25, Y+62	; 0x3e
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	9e af       	std	Y+62, r25	; 0x3e
    2232:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2234:	8d ad       	ldd	r24, Y+61	; 0x3d
    2236:	9e ad       	ldd	r25, Y+62	; 0x3e
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	69 f7       	brne	.-38     	; 0x2216 <LCD_sendCommand+0x3ea>
    223c:	16 c0       	rjmp	.+44     	; 0x226a <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223e:	fe 01       	movw	r30, r28
    2240:	ff 96       	adiw	r30, 0x3f	; 63
    2242:	60 81       	ld	r22, Z
    2244:	71 81       	ldd	r23, Z+1	; 0x01
    2246:	82 81       	ldd	r24, Z+2	; 0x02
    2248:	93 81       	ldd	r25, Z+3	; 0x03
    224a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9e af       	std	Y+62, r25	; 0x3e
    2254:	8d af       	std	Y+61, r24	; 0x3d
    2256:	8d ad       	ldd	r24, Y+61	; 0x3d
    2258:	9e ad       	ldd	r25, Y+62	; 0x3e
    225a:	9a af       	std	Y+58, r25	; 0x3a
    225c:	89 af       	std	Y+57, r24	; 0x39
    225e:	89 ad       	ldd	r24, Y+57	; 0x39
    2260:	9a ad       	ldd	r25, Y+58	; 0x3a
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <LCD_sendCommand+0x436>
    2266:	9a af       	std	Y+58, r25	; 0x3a
    2268:	89 af       	std	Y+57, r24	; 0x39
     #endif

	/*wait tdpw to make enable =0 */
	_delay_ms(1);
	/* make enable =0*/
	Pin_clear(CTRL_OUTPUT_PINS,E);
    226a:	ab e3       	ldi	r26, 0x3B	; 59
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	eb e3       	ldi	r30, 0x3B	; 59
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	87 7f       	andi	r24, 0xF7	; 247
    2276:	8c 93       	st	X, r24
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	a0 e8       	ldi	r26, 0x80	; 128
    227e:	bf e3       	ldi	r27, 0x3F	; 63
    2280:	8d ab       	std	Y+53, r24	; 0x35
    2282:	9e ab       	std	Y+54, r25	; 0x36
    2284:	af ab       	std	Y+55, r26	; 0x37
    2286:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2288:	6d a9       	ldd	r22, Y+53	; 0x35
    228a:	7e a9       	ldd	r23, Y+54	; 0x36
    228c:	8f a9       	ldd	r24, Y+55	; 0x37
    228e:	98 ad       	ldd	r25, Y+56	; 0x38
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	4a ef       	ldi	r20, 0xFA	; 250
    2296:	54 e4       	ldi	r21, 0x44	; 68
    2298:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	89 ab       	std	Y+49, r24	; 0x31
    22a2:	9a ab       	std	Y+50, r25	; 0x32
    22a4:	ab ab       	std	Y+51, r26	; 0x33
    22a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22a8:	69 a9       	ldd	r22, Y+49	; 0x31
    22aa:	7a a9       	ldd	r23, Y+50	; 0x32
    22ac:	8b a9       	ldd	r24, Y+51	; 0x33
    22ae:	9c a9       	ldd	r25, Y+52	; 0x34
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e8       	ldi	r20, 0x80	; 128
    22b6:	5f e3       	ldi	r21, 0x3F	; 63
    22b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22bc:	88 23       	and	r24, r24
    22be:	2c f4       	brge	.+10     	; 0x22ca <LCD_sendCommand+0x49e>
		__ticks = 1;
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	98 ab       	std	Y+48, r25	; 0x30
    22c6:	8f a7       	std	Y+47, r24	; 0x2f
    22c8:	3f c0       	rjmp	.+126    	; 0x2348 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    22ca:	69 a9       	ldd	r22, Y+49	; 0x31
    22cc:	7a a9       	ldd	r23, Y+50	; 0x32
    22ce:	8b a9       	ldd	r24, Y+51	; 0x33
    22d0:	9c a9       	ldd	r25, Y+52	; 0x34
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	3f ef       	ldi	r19, 0xFF	; 255
    22d6:	4f e7       	ldi	r20, 0x7F	; 127
    22d8:	57 e4       	ldi	r21, 0x47	; 71
    22da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22de:	18 16       	cp	r1, r24
    22e0:	4c f5       	brge	.+82     	; 0x2334 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e2:	6d a9       	ldd	r22, Y+53	; 0x35
    22e4:	7e a9       	ldd	r23, Y+54	; 0x36
    22e6:	8f a9       	ldd	r24, Y+55	; 0x37
    22e8:	98 ad       	ldd	r25, Y+56	; 0x38
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e2       	ldi	r20, 0x20	; 32
    22f0:	51 e4       	ldi	r21, 0x41	; 65
    22f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	bc 01       	movw	r22, r24
    22fc:	cd 01       	movw	r24, r26
    22fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	98 ab       	std	Y+48, r25	; 0x30
    2308:	8f a7       	std	Y+47, r24	; 0x2f
    230a:	0f c0       	rjmp	.+30     	; 0x232a <LCD_sendCommand+0x4fe>
    230c:	88 ec       	ldi	r24, 0xC8	; 200
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	9e a7       	std	Y+46, r25	; 0x2e
    2312:	8d a7       	std	Y+45, r24	; 0x2d
    2314:	8d a5       	ldd	r24, Y+45	; 0x2d
    2316:	9e a5       	ldd	r25, Y+46	; 0x2e
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	f1 f7       	brne	.-4      	; 0x2318 <LCD_sendCommand+0x4ec>
    231c:	9e a7       	std	Y+46, r25	; 0x2e
    231e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2320:	8f a5       	ldd	r24, Y+47	; 0x2f
    2322:	98 a9       	ldd	r25, Y+48	; 0x30
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	98 ab       	std	Y+48, r25	; 0x30
    2328:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232a:	8f a5       	ldd	r24, Y+47	; 0x2f
    232c:	98 a9       	ldd	r25, Y+48	; 0x30
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	69 f7       	brne	.-38     	; 0x230c <LCD_sendCommand+0x4e0>
    2332:	14 c0       	rjmp	.+40     	; 0x235c <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2334:	69 a9       	ldd	r22, Y+49	; 0x31
    2336:	7a a9       	ldd	r23, Y+50	; 0x32
    2338:	8b a9       	ldd	r24, Y+51	; 0x33
    233a:	9c a9       	ldd	r25, Y+52	; 0x34
    233c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	98 ab       	std	Y+48, r25	; 0x30
    2346:	8f a7       	std	Y+47, r24	; 0x2f
    2348:	8f a5       	ldd	r24, Y+47	; 0x2f
    234a:	98 a9       	ldd	r25, Y+48	; 0x30
    234c:	9c a7       	std	Y+44, r25	; 0x2c
    234e:	8b a7       	std	Y+43, r24	; 0x2b
    2350:	8b a5       	ldd	r24, Y+43	; 0x2b
    2352:	9c a5       	ldd	r25, Y+44	; 0x2c
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <LCD_sendCommand+0x528>
    2358:	9c a7       	std	Y+44, r25	; 0x2c
    235a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/*start enabling again*/

		/* Enable =1 */
		Pin_output(CTRL_OUTPUT_PINS  ,E);
    235c:	ab e3       	ldi	r26, 0x3B	; 59
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	eb e3       	ldi	r30, 0x3B	; 59
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	88 60       	ori	r24, 0x08	; 8
    2368:	8c 93       	st	X, r24
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	a0 e8       	ldi	r26, 0x80	; 128
    2370:	bf e3       	ldi	r27, 0x3F	; 63
    2372:	8f a3       	std	Y+39, r24	; 0x27
    2374:	98 a7       	std	Y+40, r25	; 0x28
    2376:	a9 a7       	std	Y+41, r26	; 0x29
    2378:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237a:	6f a1       	ldd	r22, Y+39	; 0x27
    237c:	78 a5       	ldd	r23, Y+40	; 0x28
    237e:	89 a5       	ldd	r24, Y+41	; 0x29
    2380:	9a a5       	ldd	r25, Y+42	; 0x2a
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	4a ef       	ldi	r20, 0xFA	; 250
    2388:	54 e4       	ldi	r21, 0x44	; 68
    238a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	8b a3       	std	Y+35, r24	; 0x23
    2394:	9c a3       	std	Y+36, r25	; 0x24
    2396:	ad a3       	std	Y+37, r26	; 0x25
    2398:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    239a:	6b a1       	ldd	r22, Y+35	; 0x23
    239c:	7c a1       	ldd	r23, Y+36	; 0x24
    239e:	8d a1       	ldd	r24, Y+37	; 0x25
    23a0:	9e a1       	ldd	r25, Y+38	; 0x26
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e8       	ldi	r20, 0x80	; 128
    23a8:	5f e3       	ldi	r21, 0x3F	; 63
    23aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23ae:	88 23       	and	r24, r24
    23b0:	2c f4       	brge	.+10     	; 0x23bc <LCD_sendCommand+0x590>
		__ticks = 1;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9a a3       	std	Y+34, r25	; 0x22
    23b8:	89 a3       	std	Y+33, r24	; 0x21
    23ba:	3f c0       	rjmp	.+126    	; 0x243a <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    23bc:	6b a1       	ldd	r22, Y+35	; 0x23
    23be:	7c a1       	ldd	r23, Y+36	; 0x24
    23c0:	8d a1       	ldd	r24, Y+37	; 0x25
    23c2:	9e a1       	ldd	r25, Y+38	; 0x26
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	3f ef       	ldi	r19, 0xFF	; 255
    23c8:	4f e7       	ldi	r20, 0x7F	; 127
    23ca:	57 e4       	ldi	r21, 0x47	; 71
    23cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23d0:	18 16       	cp	r1, r24
    23d2:	4c f5       	brge	.+82     	; 0x2426 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d4:	6f a1       	ldd	r22, Y+39	; 0x27
    23d6:	78 a5       	ldd	r23, Y+40	; 0x28
    23d8:	89 a5       	ldd	r24, Y+41	; 0x29
    23da:	9a a5       	ldd	r25, Y+42	; 0x2a
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e2       	ldi	r20, 0x20	; 32
    23e2:	51 e4       	ldi	r21, 0x41	; 65
    23e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	bc 01       	movw	r22, r24
    23ee:	cd 01       	movw	r24, r26
    23f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	9a a3       	std	Y+34, r25	; 0x22
    23fa:	89 a3       	std	Y+33, r24	; 0x21
    23fc:	0f c0       	rjmp	.+30     	; 0x241c <LCD_sendCommand+0x5f0>
    23fe:	88 ec       	ldi	r24, 0xC8	; 200
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	98 a3       	std	Y+32, r25	; 0x20
    2404:	8f 8f       	std	Y+31, r24	; 0x1f
    2406:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2408:	98 a1       	ldd	r25, Y+32	; 0x20
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <LCD_sendCommand+0x5de>
    240e:	98 a3       	std	Y+32, r25	; 0x20
    2410:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2412:	89 a1       	ldd	r24, Y+33	; 0x21
    2414:	9a a1       	ldd	r25, Y+34	; 0x22
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	9a a3       	std	Y+34, r25	; 0x22
    241a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241c:	89 a1       	ldd	r24, Y+33	; 0x21
    241e:	9a a1       	ldd	r25, Y+34	; 0x22
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	69 f7       	brne	.-38     	; 0x23fe <LCD_sendCommand+0x5d2>
    2424:	14 c0       	rjmp	.+40     	; 0x244e <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2426:	6b a1       	ldd	r22, Y+35	; 0x23
    2428:	7c a1       	ldd	r23, Y+36	; 0x24
    242a:	8d a1       	ldd	r24, Y+37	; 0x25
    242c:	9e a1       	ldd	r25, Y+38	; 0x26
    242e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	9a a3       	std	Y+34, r25	; 0x22
    2438:	89 a3       	std	Y+33, r24	; 0x21
    243a:	89 a1       	ldd	r24, Y+33	; 0x21
    243c:	9a a1       	ldd	r25, Y+34	; 0x22
    243e:	9e 8f       	std	Y+30, r25	; 0x1e
    2440:	8d 8f       	std	Y+29, r24	; 0x1d
    2442:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2444:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_sendCommand+0x61a>
    244a:	9e 8f       	std	Y+30, r25	; 0x1e
    244c:	8d 8f       	std	Y+29, r24	; 0x1d
		    TAKE_SCCOMMAND(DATA_OUTPUT_PINS,command);
     #else

	        /*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS&0x0F)|((command&0x0F)<<4);*/

	        TAKE_SCCOMMAND(DATA_OUTPUT_PINS,command);
    244e:	ab e3       	ldi	r26, 0x3B	; 59
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	eb e3       	ldi	r30, 0x3B	; 59
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	28 2f       	mov	r18, r24
    245a:	2f 70       	andi	r18, 0x0F	; 15
    245c:	fe 01       	movw	r30, r28
    245e:	ed 59       	subi	r30, 0x9D	; 157
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 81       	ld	r24, Z
    2464:	88 2f       	mov	r24, r24
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	82 95       	swap	r24
    246a:	92 95       	swap	r25
    246c:	90 7f       	andi	r25, 0xF0	; 240
    246e:	98 27       	eor	r25, r24
    2470:	80 7f       	andi	r24, 0xF0	; 240
    2472:	98 27       	eor	r25, r24
    2474:	82 2b       	or	r24, r18
    2476:	8c 93       	st	X, r24
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	a0 e8       	ldi	r26, 0x80	; 128
    247e:	bf e3       	ldi	r27, 0x3F	; 63
    2480:	89 8f       	std	Y+25, r24	; 0x19
    2482:	9a 8f       	std	Y+26, r25	; 0x1a
    2484:	ab 8f       	std	Y+27, r26	; 0x1b
    2486:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2488:	69 8d       	ldd	r22, Y+25	; 0x19
    248a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    248c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    248e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	4a ef       	ldi	r20, 0xFA	; 250
    2496:	54 e4       	ldi	r21, 0x44	; 68
    2498:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	8d 8b       	std	Y+21, r24	; 0x15
    24a2:	9e 8b       	std	Y+22, r25	; 0x16
    24a4:	af 8b       	std	Y+23, r26	; 0x17
    24a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24a8:	6d 89       	ldd	r22, Y+21	; 0x15
    24aa:	7e 89       	ldd	r23, Y+22	; 0x16
    24ac:	8f 89       	ldd	r24, Y+23	; 0x17
    24ae:	98 8d       	ldd	r25, Y+24	; 0x18
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e8       	ldi	r20, 0x80	; 128
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24bc:	88 23       	and	r24, r24
    24be:	2c f4       	brge	.+10     	; 0x24ca <LCD_sendCommand+0x69e>
		__ticks = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9c 8b       	std	Y+20, r25	; 0x14
    24c6:	8b 8b       	std	Y+19, r24	; 0x13
    24c8:	3f c0       	rjmp	.+126    	; 0x2548 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    24ca:	6d 89       	ldd	r22, Y+21	; 0x15
    24cc:	7e 89       	ldd	r23, Y+22	; 0x16
    24ce:	8f 89       	ldd	r24, Y+23	; 0x17
    24d0:	98 8d       	ldd	r25, Y+24	; 0x18
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24de:	18 16       	cp	r1, r24
    24e0:	4c f5       	brge	.+82     	; 0x2534 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e2:	69 8d       	ldd	r22, Y+25	; 0x19
    24e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e2       	ldi	r20, 0x20	; 32
    24f0:	51 e4       	ldi	r21, 0x41	; 65
    24f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9c 8b       	std	Y+20, r25	; 0x14
    2508:	8b 8b       	std	Y+19, r24	; 0x13
    250a:	0f c0       	rjmp	.+30     	; 0x252a <LCD_sendCommand+0x6fe>
    250c:	88 ec       	ldi	r24, 0xC8	; 200
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9a 8b       	std	Y+18, r25	; 0x12
    2512:	89 8b       	std	Y+17, r24	; 0x11
    2514:	89 89       	ldd	r24, Y+17	; 0x11
    2516:	9a 89       	ldd	r25, Y+18	; 0x12
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <LCD_sendCommand+0x6ec>
    251c:	9a 8b       	std	Y+18, r25	; 0x12
    251e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2520:	8b 89       	ldd	r24, Y+19	; 0x13
    2522:	9c 89       	ldd	r25, Y+20	; 0x14
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	9c 8b       	std	Y+20, r25	; 0x14
    2528:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252a:	8b 89       	ldd	r24, Y+19	; 0x13
    252c:	9c 89       	ldd	r25, Y+20	; 0x14
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	69 f7       	brne	.-38     	; 0x250c <LCD_sendCommand+0x6e0>
    2532:	14 c0       	rjmp	.+40     	; 0x255c <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2534:	6d 89       	ldd	r22, Y+21	; 0x15
    2536:	7e 89       	ldd	r23, Y+22	; 0x16
    2538:	8f 89       	ldd	r24, Y+23	; 0x17
    253a:	98 8d       	ldd	r25, Y+24	; 0x18
    253c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	9c 8b       	std	Y+20, r25	; 0x14
    2546:	8b 8b       	std	Y+19, r24	; 0x13
    2548:	8b 89       	ldd	r24, Y+19	; 0x13
    254a:	9c 89       	ldd	r25, Y+20	; 0x14
    254c:	98 8b       	std	Y+16, r25	; 0x10
    254e:	8f 87       	std	Y+15, r24	; 0x0f
    2550:	8f 85       	ldd	r24, Y+15	; 0x0f
    2552:	98 89       	ldd	r25, Y+16	; 0x10
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <LCD_sendCommand+0x728>
    2558:	98 8b       	std	Y+16, r25	; 0x10
    255a:	8f 87       	std	Y+15, r24	; 0x0f

#endif
	        /*wait tdpw to make enable =0 */
	        	_delay_ms(1);
	        	/* make enable =0*/
	        	Pin_clear(CTRL_OUTPUT_PINS,E);
    255c:	ab e3       	ldi	r26, 0x3B	; 59
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	eb e3       	ldi	r30, 0x3B	; 59
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	87 7f       	andi	r24, 0xF7	; 247
    2568:	8c 93       	st	X, r24
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	a0 e8       	ldi	r26, 0x80	; 128
    2570:	bf e3       	ldi	r27, 0x3F	; 63
    2572:	8b 87       	std	Y+11, r24	; 0x0b
    2574:	9c 87       	std	Y+12, r25	; 0x0c
    2576:	ad 87       	std	Y+13, r26	; 0x0d
    2578:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257a:	6b 85       	ldd	r22, Y+11	; 0x0b
    257c:	7c 85       	ldd	r23, Y+12	; 0x0c
    257e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2580:	9e 85       	ldd	r25, Y+14	; 0x0e
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	4a ef       	ldi	r20, 0xFA	; 250
    2588:	54 e4       	ldi	r21, 0x44	; 68
    258a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	8f 83       	std	Y+7, r24	; 0x07
    2594:	98 87       	std	Y+8, r25	; 0x08
    2596:	a9 87       	std	Y+9, r26	; 0x09
    2598:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    259a:	6f 81       	ldd	r22, Y+7	; 0x07
    259c:	78 85       	ldd	r23, Y+8	; 0x08
    259e:	89 85       	ldd	r24, Y+9	; 0x09
    25a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e8       	ldi	r20, 0x80	; 128
    25a8:	5f e3       	ldi	r21, 0x3F	; 63
    25aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25ae:	88 23       	and	r24, r24
    25b0:	2c f4       	brge	.+10     	; 0x25bc <LCD_sendCommand+0x790>
		__ticks = 1;
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
    25ba:	3f c0       	rjmp	.+126    	; 0x263a <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    25bc:	6f 81       	ldd	r22, Y+7	; 0x07
    25be:	78 85       	ldd	r23, Y+8	; 0x08
    25c0:	89 85       	ldd	r24, Y+9	; 0x09
    25c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	3f ef       	ldi	r19, 0xFF	; 255
    25c8:	4f e7       	ldi	r20, 0x7F	; 127
    25ca:	57 e4       	ldi	r21, 0x47	; 71
    25cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25d0:	18 16       	cp	r1, r24
    25d2:	4c f5       	brge	.+82     	; 0x2626 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25da:	9e 85       	ldd	r25, Y+14	; 0x0e
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e2       	ldi	r20, 0x20	; 32
    25e2:	51 e4       	ldi	r21, 0x41	; 65
    25e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	bc 01       	movw	r22, r24
    25ee:	cd 01       	movw	r24, r26
    25f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	9e 83       	std	Y+6, r25	; 0x06
    25fa:	8d 83       	std	Y+5, r24	; 0x05
    25fc:	0f c0       	rjmp	.+30     	; 0x261c <LCD_sendCommand+0x7f0>
    25fe:	88 ec       	ldi	r24, 0xC8	; 200
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	9c 83       	std	Y+4, r25	; 0x04
    2604:	8b 83       	std	Y+3, r24	; 0x03
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	9c 81       	ldd	r25, Y+4	; 0x04
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <LCD_sendCommand+0x7de>
    260e:	9c 83       	std	Y+4, r25	; 0x04
    2610:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2612:	8d 81       	ldd	r24, Y+5	; 0x05
    2614:	9e 81       	ldd	r25, Y+6	; 0x06
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	9e 83       	std	Y+6, r25	; 0x06
    261a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261c:	8d 81       	ldd	r24, Y+5	; 0x05
    261e:	9e 81       	ldd	r25, Y+6	; 0x06
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	69 f7       	brne	.-38     	; 0x25fe <LCD_sendCommand+0x7d2>
    2624:	14 c0       	rjmp	.+40     	; 0x264e <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2626:	6f 81       	ldd	r22, Y+7	; 0x07
    2628:	78 85       	ldd	r23, Y+8	; 0x08
    262a:	89 85       	ldd	r24, Y+9	; 0x09
    262c:	9a 85       	ldd	r25, Y+10	; 0x0a
    262e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	9e 83       	std	Y+6, r25	; 0x06
    2638:	8d 83       	std	Y+5, r24	; 0x05
    263a:	8d 81       	ldd	r24, Y+5	; 0x05
    263c:	9e 81       	ldd	r25, Y+6	; 0x06
    263e:	9a 83       	std	Y+2, r25	; 0x02
    2640:	89 83       	std	Y+1, r24	; 0x01
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	9a 81       	ldd	r25, Y+2	; 0x02
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <LCD_sendCommand+0x81a>
    264a:	9a 83       	std	Y+2, r25	; 0x02
    264c:	89 83       	std	Y+1, r24	; 0x01
	        	/*wait th 13ns */
	        	_delay_ms(1);


}
    264e:	cd 59       	subi	r28, 0x9D	; 157
    2650:	df 4f       	sbci	r29, 0xFF	; 255
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	1f 91       	pop	r17
    2662:	0f 91       	pop	r16
    2664:	08 95       	ret

00002666 <LCD_displayChar>:
#endif




  void LCD_displayChar(unit8 data){
    2666:	0f 93       	push	r16
    2668:	1f 93       	push	r17
    266a:	df 93       	push	r29
    266c:	cf 93       	push	r28
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
    2672:	c3 56       	subi	r28, 0x63	; 99
    2674:	d0 40       	sbci	r29, 0x00	; 0
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	de bf       	out	0x3e, r29	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	cd bf       	out	0x3d, r28	; 61
    2680:	fe 01       	movw	r30, r28
    2682:	ed 59       	subi	r30, 0x9D	; 157
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	80 83       	st	Z, r24
	/*make RS=1 to send data*/
	Pin_output(CTRL_OUTPUT_PINS  ,RS);
    2688:	ab e3       	ldi	r26, 0x3B	; 59
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	eb e3       	ldi	r30, 0x3B	; 59
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	82 60       	ori	r24, 0x02	; 2
    2694:	8c 93       	st	X, r24
	/*make RW=0 to write command*/
	Pin_clear(CTRL_OUTPUT_PINS  ,RW);
    2696:	ab e3       	ldi	r26, 0x3B	; 59
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	eb e3       	ldi	r30, 0x3B	; 59
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	8b 7f       	andi	r24, 0xFB	; 251
    26a2:	8c 93       	st	X, r24
    26a4:	fe 01       	movw	r30, r28
    26a6:	e1 5a       	subi	r30, 0xA1	; 161
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	a0 e8       	ldi	r26, 0x80	; 128
    26b0:	bf e3       	ldi	r27, 0x3F	; 63
    26b2:	80 83       	st	Z, r24
    26b4:	91 83       	std	Z+1, r25	; 0x01
    26b6:	a2 83       	std	Z+2, r26	; 0x02
    26b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ba:	8e 01       	movw	r16, r28
    26bc:	05 5a       	subi	r16, 0xA5	; 165
    26be:	1f 4f       	sbci	r17, 0xFF	; 255
    26c0:	fe 01       	movw	r30, r28
    26c2:	e1 5a       	subi	r30, 0xA1	; 161
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	60 81       	ld	r22, Z
    26c8:	71 81       	ldd	r23, Z+1	; 0x01
    26ca:	82 81       	ldd	r24, Z+2	; 0x02
    26cc:	93 81       	ldd	r25, Z+3	; 0x03
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	4a ef       	ldi	r20, 0xFA	; 250
    26d4:	54 e4       	ldi	r21, 0x44	; 68
    26d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	f8 01       	movw	r30, r16
    26e0:	80 83       	st	Z, r24
    26e2:	91 83       	std	Z+1, r25	; 0x01
    26e4:	a2 83       	std	Z+2, r26	; 0x02
    26e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26e8:	fe 01       	movw	r30, r28
    26ea:	e5 5a       	subi	r30, 0xA5	; 165
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	60 81       	ld	r22, Z
    26f0:	71 81       	ldd	r23, Z+1	; 0x01
    26f2:	82 81       	ldd	r24, Z+2	; 0x02
    26f4:	93 81       	ldd	r25, Z+3	; 0x03
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e8       	ldi	r20, 0x80	; 128
    26fc:	5f e3       	ldi	r21, 0x3F	; 63
    26fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2702:	88 23       	and	r24, r24
    2704:	44 f4       	brge	.+16     	; 0x2716 <LCD_displayChar+0xb0>
		__ticks = 1;
    2706:	fe 01       	movw	r30, r28
    2708:	e7 5a       	subi	r30, 0xA7	; 167
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	91 83       	std	Z+1, r25	; 0x01
    2712:	80 83       	st	Z, r24
    2714:	64 c0       	rjmp	.+200    	; 0x27de <LCD_displayChar+0x178>
	else if (__tmp > 65535)
    2716:	fe 01       	movw	r30, r28
    2718:	e5 5a       	subi	r30, 0xA5	; 165
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	60 81       	ld	r22, Z
    271e:	71 81       	ldd	r23, Z+1	; 0x01
    2720:	82 81       	ldd	r24, Z+2	; 0x02
    2722:	93 81       	ldd	r25, Z+3	; 0x03
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	3f ef       	ldi	r19, 0xFF	; 255
    2728:	4f e7       	ldi	r20, 0x7F	; 127
    272a:	57 e4       	ldi	r21, 0x47	; 71
    272c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2730:	18 16       	cp	r1, r24
    2732:	0c f0       	brlt	.+2      	; 0x2736 <LCD_displayChar+0xd0>
    2734:	43 c0       	rjmp	.+134    	; 0x27bc <LCD_displayChar+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2736:	fe 01       	movw	r30, r28
    2738:	e1 5a       	subi	r30, 0xA1	; 161
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e2       	ldi	r20, 0x20	; 32
    274a:	51 e4       	ldi	r21, 0x41	; 65
    274c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	8e 01       	movw	r16, r28
    2756:	07 5a       	subi	r16, 0xA7	; 167
    2758:	1f 4f       	sbci	r17, 0xFF	; 255
    275a:	bc 01       	movw	r22, r24
    275c:	cd 01       	movw	r24, r26
    275e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	f8 01       	movw	r30, r16
    2768:	91 83       	std	Z+1, r25	; 0x01
    276a:	80 83       	st	Z, r24
    276c:	1f c0       	rjmp	.+62     	; 0x27ac <LCD_displayChar+0x146>
    276e:	fe 01       	movw	r30, r28
    2770:	e9 5a       	subi	r30, 0xA9	; 169
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	88 ec       	ldi	r24, 0xC8	; 200
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	91 83       	std	Z+1, r25	; 0x01
    277a:	80 83       	st	Z, r24
    277c:	fe 01       	movw	r30, r28
    277e:	e9 5a       	subi	r30, 0xA9	; 169
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 81       	ld	r24, Z
    2784:	91 81       	ldd	r25, Z+1	; 0x01
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	f1 f7       	brne	.-4      	; 0x2786 <LCD_displayChar+0x120>
    278a:	fe 01       	movw	r30, r28
    278c:	e9 5a       	subi	r30, 0xA9	; 169
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	91 83       	std	Z+1, r25	; 0x01
    2792:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2794:	de 01       	movw	r26, r28
    2796:	a7 5a       	subi	r26, 0xA7	; 167
    2798:	bf 4f       	sbci	r27, 0xFF	; 255
    279a:	fe 01       	movw	r30, r28
    279c:	e7 5a       	subi	r30, 0xA7	; 167
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	80 81       	ld	r24, Z
    27a2:	91 81       	ldd	r25, Z+1	; 0x01
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	11 96       	adiw	r26, 0x01	; 1
    27a8:	9c 93       	st	X, r25
    27aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ac:	fe 01       	movw	r30, r28
    27ae:	e7 5a       	subi	r30, 0xA7	; 167
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	80 81       	ld	r24, Z
    27b4:	91 81       	ldd	r25, Z+1	; 0x01
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	d1 f6       	brne	.-76     	; 0x276e <LCD_displayChar+0x108>
    27ba:	27 c0       	rjmp	.+78     	; 0x280a <LCD_displayChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27bc:	8e 01       	movw	r16, r28
    27be:	07 5a       	subi	r16, 0xA7	; 167
    27c0:	1f 4f       	sbci	r17, 0xFF	; 255
    27c2:	fe 01       	movw	r30, r28
    27c4:	e5 5a       	subi	r30, 0xA5	; 165
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	60 81       	ld	r22, Z
    27ca:	71 81       	ldd	r23, Z+1	; 0x01
    27cc:	82 81       	ldd	r24, Z+2	; 0x02
    27ce:	93 81       	ldd	r25, Z+3	; 0x03
    27d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	f8 01       	movw	r30, r16
    27da:	91 83       	std	Z+1, r25	; 0x01
    27dc:	80 83       	st	Z, r24
    27de:	de 01       	movw	r26, r28
    27e0:	ab 5a       	subi	r26, 0xAB	; 171
    27e2:	bf 4f       	sbci	r27, 0xFF	; 255
    27e4:	fe 01       	movw	r30, r28
    27e6:	e7 5a       	subi	r30, 0xA7	; 167
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	80 81       	ld	r24, Z
    27ec:	91 81       	ldd	r25, Z+1	; 0x01
    27ee:	8d 93       	st	X+, r24
    27f0:	9c 93       	st	X, r25
    27f2:	fe 01       	movw	r30, r28
    27f4:	eb 5a       	subi	r30, 0xAB	; 171
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <LCD_displayChar+0x196>
    2800:	fe 01       	movw	r30, r28
    2802:	eb 5a       	subi	r30, 0xAB	; 171
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	91 83       	std	Z+1, r25	; 0x01
    2808:	80 83       	st	Z, r24
	/*wait tas before enabling 50ns */
	_delay_ms(1);
	/* Enable =1 */
	Pin_output(CTRL_OUTPUT_PINS  ,E);
    280a:	ab e3       	ldi	r26, 0x3B	; 59
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	eb e3       	ldi	r30, 0x3B	; 59
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	88 60       	ori	r24, 0x08	; 8
    2816:	8c 93       	st	X, r24
    2818:	fe 01       	movw	r30, r28
    281a:	ef 5a       	subi	r30, 0xAF	; 175
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	a0 e8       	ldi	r26, 0x80	; 128
    2824:	bf e3       	ldi	r27, 0x3F	; 63
    2826:	80 83       	st	Z, r24
    2828:	91 83       	std	Z+1, r25	; 0x01
    282a:	a2 83       	std	Z+2, r26	; 0x02
    282c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282e:	8e 01       	movw	r16, r28
    2830:	03 5b       	subi	r16, 0xB3	; 179
    2832:	1f 4f       	sbci	r17, 0xFF	; 255
    2834:	fe 01       	movw	r30, r28
    2836:	ef 5a       	subi	r30, 0xAF	; 175
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	60 81       	ld	r22, Z
    283c:	71 81       	ldd	r23, Z+1	; 0x01
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	93 81       	ldd	r25, Z+3	; 0x03
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	4a ef       	ldi	r20, 0xFA	; 250
    2848:	54 e4       	ldi	r21, 0x44	; 68
    284a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	f8 01       	movw	r30, r16
    2854:	80 83       	st	Z, r24
    2856:	91 83       	std	Z+1, r25	; 0x01
    2858:	a2 83       	std	Z+2, r26	; 0x02
    285a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    285c:	fe 01       	movw	r30, r28
    285e:	e3 5b       	subi	r30, 0xB3	; 179
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	82 81       	ldd	r24, Z+2	; 0x02
    2868:	93 81       	ldd	r25, Z+3	; 0x03
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e8       	ldi	r20, 0x80	; 128
    2870:	5f e3       	ldi	r21, 0x3F	; 63
    2872:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2876:	88 23       	and	r24, r24
    2878:	44 f4       	brge	.+16     	; 0x288a <LCD_displayChar+0x224>
		__ticks = 1;
    287a:	fe 01       	movw	r30, r28
    287c:	e5 5b       	subi	r30, 0xB5	; 181
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	91 83       	std	Z+1, r25	; 0x01
    2886:	80 83       	st	Z, r24
    2888:	64 c0       	rjmp	.+200    	; 0x2952 <LCD_displayChar+0x2ec>
	else if (__tmp > 65535)
    288a:	fe 01       	movw	r30, r28
    288c:	e3 5b       	subi	r30, 0xB3	; 179
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	60 81       	ld	r22, Z
    2892:	71 81       	ldd	r23, Z+1	; 0x01
    2894:	82 81       	ldd	r24, Z+2	; 0x02
    2896:	93 81       	ldd	r25, Z+3	; 0x03
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	3f ef       	ldi	r19, 0xFF	; 255
    289c:	4f e7       	ldi	r20, 0x7F	; 127
    289e:	57 e4       	ldi	r21, 0x47	; 71
    28a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28a4:	18 16       	cp	r1, r24
    28a6:	0c f0       	brlt	.+2      	; 0x28aa <LCD_displayChar+0x244>
    28a8:	43 c0       	rjmp	.+134    	; 0x2930 <LCD_displayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28aa:	fe 01       	movw	r30, r28
    28ac:	ef 5a       	subi	r30, 0xAF	; 175
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	60 81       	ld	r22, Z
    28b2:	71 81       	ldd	r23, Z+1	; 0x01
    28b4:	82 81       	ldd	r24, Z+2	; 0x02
    28b6:	93 81       	ldd	r25, Z+3	; 0x03
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e2       	ldi	r20, 0x20	; 32
    28be:	51 e4       	ldi	r21, 0x41	; 65
    28c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	8e 01       	movw	r16, r28
    28ca:	05 5b       	subi	r16, 0xB5	; 181
    28cc:	1f 4f       	sbci	r17, 0xFF	; 255
    28ce:	bc 01       	movw	r22, r24
    28d0:	cd 01       	movw	r24, r26
    28d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	f8 01       	movw	r30, r16
    28dc:	91 83       	std	Z+1, r25	; 0x01
    28de:	80 83       	st	Z, r24
    28e0:	1f c0       	rjmp	.+62     	; 0x2920 <LCD_displayChar+0x2ba>
    28e2:	fe 01       	movw	r30, r28
    28e4:	e7 5b       	subi	r30, 0xB7	; 183
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	88 ec       	ldi	r24, 0xC8	; 200
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	91 83       	std	Z+1, r25	; 0x01
    28ee:	80 83       	st	Z, r24
    28f0:	fe 01       	movw	r30, r28
    28f2:	e7 5b       	subi	r30, 0xB7	; 183
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	80 81       	ld	r24, Z
    28f8:	91 81       	ldd	r25, Z+1	; 0x01
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <LCD_displayChar+0x294>
    28fe:	fe 01       	movw	r30, r28
    2900:	e7 5b       	subi	r30, 0xB7	; 183
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	91 83       	std	Z+1, r25	; 0x01
    2906:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2908:	de 01       	movw	r26, r28
    290a:	a5 5b       	subi	r26, 0xB5	; 181
    290c:	bf 4f       	sbci	r27, 0xFF	; 255
    290e:	fe 01       	movw	r30, r28
    2910:	e5 5b       	subi	r30, 0xB5	; 181
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	80 81       	ld	r24, Z
    2916:	91 81       	ldd	r25, Z+1	; 0x01
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	11 96       	adiw	r26, 0x01	; 1
    291c:	9c 93       	st	X, r25
    291e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2920:	fe 01       	movw	r30, r28
    2922:	e5 5b       	subi	r30, 0xB5	; 181
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	80 81       	ld	r24, Z
    2928:	91 81       	ldd	r25, Z+1	; 0x01
    292a:	00 97       	sbiw	r24, 0x00	; 0
    292c:	d1 f6       	brne	.-76     	; 0x28e2 <LCD_displayChar+0x27c>
    292e:	27 c0       	rjmp	.+78     	; 0x297e <LCD_displayChar+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2930:	8e 01       	movw	r16, r28
    2932:	05 5b       	subi	r16, 0xB5	; 181
    2934:	1f 4f       	sbci	r17, 0xFF	; 255
    2936:	fe 01       	movw	r30, r28
    2938:	e3 5b       	subi	r30, 0xB3	; 179
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	60 81       	ld	r22, Z
    293e:	71 81       	ldd	r23, Z+1	; 0x01
    2940:	82 81       	ldd	r24, Z+2	; 0x02
    2942:	93 81       	ldd	r25, Z+3	; 0x03
    2944:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	f8 01       	movw	r30, r16
    294e:	91 83       	std	Z+1, r25	; 0x01
    2950:	80 83       	st	Z, r24
    2952:	de 01       	movw	r26, r28
    2954:	a9 5b       	subi	r26, 0xB9	; 185
    2956:	bf 4f       	sbci	r27, 0xFF	; 255
    2958:	fe 01       	movw	r30, r28
    295a:	e5 5b       	subi	r30, 0xB5	; 181
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	80 81       	ld	r24, Z
    2960:	91 81       	ldd	r25, Z+1	; 0x01
    2962:	8d 93       	st	X+, r24
    2964:	9c 93       	st	X, r25
    2966:	fe 01       	movw	r30, r28
    2968:	e9 5b       	subi	r30, 0xB9	; 185
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	80 81       	ld	r24, Z
    296e:	91 81       	ldd	r25, Z+1	; 0x01
    2970:	01 97       	sbiw	r24, 0x01	; 1
    2972:	f1 f7       	brne	.-4      	; 0x2970 <LCD_displayChar+0x30a>
    2974:	fe 01       	movw	r30, r28
    2976:	e9 5b       	subi	r30, 0xB9	; 185
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	91 83       	std	Z+1, r25	; 0x01
    297c:	80 83       	st	Z, r24

	   	TAKE_FTCOMMAND(DATA_OUTPUT_PINS,data);

     #else
		/*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS & 0x0F) | (data & 0xF0);*/
		TAKE_FTCOMMAND(DATA_OUTPUT_PINS,data);
    297e:	ab e3       	ldi	r26, 0x3B	; 59
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	eb e3       	ldi	r30, 0x3B	; 59
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	98 2f       	mov	r25, r24
    298a:	9f 70       	andi	r25, 0x0F	; 15
    298c:	fe 01       	movw	r30, r28
    298e:	ed 59       	subi	r30, 0x9D	; 157
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	80 81       	ld	r24, Z
    2994:	80 7f       	andi	r24, 0xF0	; 240
    2996:	89 2b       	or	r24, r25
    2998:	8c 93       	st	X, r24
    299a:	fe 01       	movw	r30, r28
    299c:	ed 5b       	subi	r30, 0xBD	; 189
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	a0 e8       	ldi	r26, 0x80	; 128
    29a6:	bf e3       	ldi	r27, 0x3F	; 63
    29a8:	80 83       	st	Z, r24
    29aa:	91 83       	std	Z+1, r25	; 0x01
    29ac:	a2 83       	std	Z+2, r26	; 0x02
    29ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b0:	8e 01       	movw	r16, r28
    29b2:	01 5c       	subi	r16, 0xC1	; 193
    29b4:	1f 4f       	sbci	r17, 0xFF	; 255
    29b6:	fe 01       	movw	r30, r28
    29b8:	ed 5b       	subi	r30, 0xBD	; 189
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	60 81       	ld	r22, Z
    29be:	71 81       	ldd	r23, Z+1	; 0x01
    29c0:	82 81       	ldd	r24, Z+2	; 0x02
    29c2:	93 81       	ldd	r25, Z+3	; 0x03
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	4a ef       	ldi	r20, 0xFA	; 250
    29ca:	54 e4       	ldi	r21, 0x44	; 68
    29cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	f8 01       	movw	r30, r16
    29d6:	80 83       	st	Z, r24
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	a2 83       	std	Z+2, r26	; 0x02
    29dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29de:	fe 01       	movw	r30, r28
    29e0:	ff 96       	adiw	r30, 0x3f	; 63
    29e2:	60 81       	ld	r22, Z
    29e4:	71 81       	ldd	r23, Z+1	; 0x01
    29e6:	82 81       	ldd	r24, Z+2	; 0x02
    29e8:	93 81       	ldd	r25, Z+3	; 0x03
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e8       	ldi	r20, 0x80	; 128
    29f0:	5f e3       	ldi	r21, 0x3F	; 63
    29f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29f6:	88 23       	and	r24, r24
    29f8:	2c f4       	brge	.+10     	; 0x2a04 <LCD_displayChar+0x39e>
		__ticks = 1;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	9e af       	std	Y+62, r25	; 0x3e
    2a00:	8d af       	std	Y+61, r24	; 0x3d
    2a02:	46 c0       	rjmp	.+140    	; 0x2a90 <LCD_displayChar+0x42a>
	else if (__tmp > 65535)
    2a04:	fe 01       	movw	r30, r28
    2a06:	ff 96       	adiw	r30, 0x3f	; 63
    2a08:	60 81       	ld	r22, Z
    2a0a:	71 81       	ldd	r23, Z+1	; 0x01
    2a0c:	82 81       	ldd	r24, Z+2	; 0x02
    2a0e:	93 81       	ldd	r25, Z+3	; 0x03
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	3f ef       	ldi	r19, 0xFF	; 255
    2a14:	4f e7       	ldi	r20, 0x7F	; 127
    2a16:	57 e4       	ldi	r21, 0x47	; 71
    2a18:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a1c:	18 16       	cp	r1, r24
    2a1e:	64 f5       	brge	.+88     	; 0x2a78 <LCD_displayChar+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a20:	fe 01       	movw	r30, r28
    2a22:	ed 5b       	subi	r30, 0xBD	; 189
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	60 81       	ld	r22, Z
    2a28:	71 81       	ldd	r23, Z+1	; 0x01
    2a2a:	82 81       	ldd	r24, Z+2	; 0x02
    2a2c:	93 81       	ldd	r25, Z+3	; 0x03
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	40 e2       	ldi	r20, 0x20	; 32
    2a34:	51 e4       	ldi	r21, 0x41	; 65
    2a36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	bc 01       	movw	r22, r24
    2a40:	cd 01       	movw	r24, r26
    2a42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	9e af       	std	Y+62, r25	; 0x3e
    2a4c:	8d af       	std	Y+61, r24	; 0x3d
    2a4e:	0f c0       	rjmp	.+30     	; 0x2a6e <LCD_displayChar+0x408>
    2a50:	88 ec       	ldi	r24, 0xC8	; 200
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	9c af       	std	Y+60, r25	; 0x3c
    2a56:	8b af       	std	Y+59, r24	; 0x3b
    2a58:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a5a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	f1 f7       	brne	.-4      	; 0x2a5c <LCD_displayChar+0x3f6>
    2a60:	9c af       	std	Y+60, r25	; 0x3c
    2a62:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a64:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a66:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	9e af       	std	Y+62, r25	; 0x3e
    2a6c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a70:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a72:	00 97       	sbiw	r24, 0x00	; 0
    2a74:	69 f7       	brne	.-38     	; 0x2a50 <LCD_displayChar+0x3ea>
    2a76:	16 c0       	rjmp	.+44     	; 0x2aa4 <LCD_displayChar+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a78:	fe 01       	movw	r30, r28
    2a7a:	ff 96       	adiw	r30, 0x3f	; 63
    2a7c:	60 81       	ld	r22, Z
    2a7e:	71 81       	ldd	r23, Z+1	; 0x01
    2a80:	82 81       	ldd	r24, Z+2	; 0x02
    2a82:	93 81       	ldd	r25, Z+3	; 0x03
    2a84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	9e af       	std	Y+62, r25	; 0x3e
    2a8e:	8d af       	std	Y+61, r24	; 0x3d
    2a90:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a92:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a94:	9a af       	std	Y+58, r25	; 0x3a
    2a96:	89 af       	std	Y+57, r24	; 0x39
    2a98:	89 ad       	ldd	r24, Y+57	; 0x39
    2a9a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <LCD_displayChar+0x436>
    2aa0:	9a af       	std	Y+58, r25	; 0x3a
    2aa2:	89 af       	std	Y+57, r24	; 0x39
     #endif

	/*wait tdpw to make enable =0 */
	_delay_ms(1);
	/* make enable =0*/
	Pin_clear(CTRL_OUTPUT_PINS,E);
    2aa4:	ab e3       	ldi	r26, 0x3B	; 59
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	eb e3       	ldi	r30, 0x3B	; 59
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	87 7f       	andi	r24, 0xF7	; 247
    2ab0:	8c 93       	st	X, r24
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	a0 e8       	ldi	r26, 0x80	; 128
    2ab8:	bf e3       	ldi	r27, 0x3F	; 63
    2aba:	8d ab       	std	Y+53, r24	; 0x35
    2abc:	9e ab       	std	Y+54, r25	; 0x36
    2abe:	af ab       	std	Y+55, r26	; 0x37
    2ac0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ac4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ac6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ac8:	98 ad       	ldd	r25, Y+56	; 0x38
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	4a ef       	ldi	r20, 0xFA	; 250
    2ad0:	54 e4       	ldi	r21, 0x44	; 68
    2ad2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	89 ab       	std	Y+49, r24	; 0x31
    2adc:	9a ab       	std	Y+50, r25	; 0x32
    2ade:	ab ab       	std	Y+51, r26	; 0x33
    2ae0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ae2:	69 a9       	ldd	r22, Y+49	; 0x31
    2ae4:	7a a9       	ldd	r23, Y+50	; 0x32
    2ae6:	8b a9       	ldd	r24, Y+51	; 0x33
    2ae8:	9c a9       	ldd	r25, Y+52	; 0x34
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e8       	ldi	r20, 0x80	; 128
    2af0:	5f e3       	ldi	r21, 0x3F	; 63
    2af2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2af6:	88 23       	and	r24, r24
    2af8:	2c f4       	brge	.+10     	; 0x2b04 <LCD_displayChar+0x49e>
		__ticks = 1;
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	98 ab       	std	Y+48, r25	; 0x30
    2b00:	8f a7       	std	Y+47, r24	; 0x2f
    2b02:	3f c0       	rjmp	.+126    	; 0x2b82 <LCD_displayChar+0x51c>
	else if (__tmp > 65535)
    2b04:	69 a9       	ldd	r22, Y+49	; 0x31
    2b06:	7a a9       	ldd	r23, Y+50	; 0x32
    2b08:	8b a9       	ldd	r24, Y+51	; 0x33
    2b0a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	3f ef       	ldi	r19, 0xFF	; 255
    2b10:	4f e7       	ldi	r20, 0x7F	; 127
    2b12:	57 e4       	ldi	r21, 0x47	; 71
    2b14:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b18:	18 16       	cp	r1, r24
    2b1a:	4c f5       	brge	.+82     	; 0x2b6e <LCD_displayChar+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b1c:	6d a9       	ldd	r22, Y+53	; 0x35
    2b1e:	7e a9       	ldd	r23, Y+54	; 0x36
    2b20:	8f a9       	ldd	r24, Y+55	; 0x37
    2b22:	98 ad       	ldd	r25, Y+56	; 0x38
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e2       	ldi	r20, 0x20	; 32
    2b2a:	51 e4       	ldi	r21, 0x41	; 65
    2b2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	bc 01       	movw	r22, r24
    2b36:	cd 01       	movw	r24, r26
    2b38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	98 ab       	std	Y+48, r25	; 0x30
    2b42:	8f a7       	std	Y+47, r24	; 0x2f
    2b44:	0f c0       	rjmp	.+30     	; 0x2b64 <LCD_displayChar+0x4fe>
    2b46:	88 ec       	ldi	r24, 0xC8	; 200
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	9e a7       	std	Y+46, r25	; 0x2e
    2b4c:	8d a7       	std	Y+45, r24	; 0x2d
    2b4e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b50:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	f1 f7       	brne	.-4      	; 0x2b52 <LCD_displayChar+0x4ec>
    2b56:	9e a7       	std	Y+46, r25	; 0x2e
    2b58:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b5c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	98 ab       	std	Y+48, r25	; 0x30
    2b62:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b64:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b66:	98 a9       	ldd	r25, Y+48	; 0x30
    2b68:	00 97       	sbiw	r24, 0x00	; 0
    2b6a:	69 f7       	brne	.-38     	; 0x2b46 <LCD_displayChar+0x4e0>
    2b6c:	14 c0       	rjmp	.+40     	; 0x2b96 <LCD_displayChar+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b6e:	69 a9       	ldd	r22, Y+49	; 0x31
    2b70:	7a a9       	ldd	r23, Y+50	; 0x32
    2b72:	8b a9       	ldd	r24, Y+51	; 0x33
    2b74:	9c a9       	ldd	r25, Y+52	; 0x34
    2b76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	98 ab       	std	Y+48, r25	; 0x30
    2b80:	8f a7       	std	Y+47, r24	; 0x2f
    2b82:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b84:	98 a9       	ldd	r25, Y+48	; 0x30
    2b86:	9c a7       	std	Y+44, r25	; 0x2c
    2b88:	8b a7       	std	Y+43, r24	; 0x2b
    2b8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	f1 f7       	brne	.-4      	; 0x2b8e <LCD_displayChar+0x528>
    2b92:	9c a7       	std	Y+44, r25	; 0x2c
    2b94:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/*start enabling again*/

		/* Enable =1 */
		Pin_output(CTRL_OUTPUT_PINS  ,E);
    2b96:	ab e3       	ldi	r26, 0x3B	; 59
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	eb e3       	ldi	r30, 0x3B	; 59
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	88 60       	ori	r24, 0x08	; 8
    2ba2:	8c 93       	st	X, r24
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	a0 e8       	ldi	r26, 0x80	; 128
    2baa:	bf e3       	ldi	r27, 0x3F	; 63
    2bac:	8f a3       	std	Y+39, r24	; 0x27
    2bae:	98 a7       	std	Y+40, r25	; 0x28
    2bb0:	a9 a7       	std	Y+41, r26	; 0x29
    2bb2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb4:	6f a1       	ldd	r22, Y+39	; 0x27
    2bb6:	78 a5       	ldd	r23, Y+40	; 0x28
    2bb8:	89 a5       	ldd	r24, Y+41	; 0x29
    2bba:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	4a ef       	ldi	r20, 0xFA	; 250
    2bc2:	54 e4       	ldi	r21, 0x44	; 68
    2bc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	8b a3       	std	Y+35, r24	; 0x23
    2bce:	9c a3       	std	Y+36, r25	; 0x24
    2bd0:	ad a3       	std	Y+37, r26	; 0x25
    2bd2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bd4:	6b a1       	ldd	r22, Y+35	; 0x23
    2bd6:	7c a1       	ldd	r23, Y+36	; 0x24
    2bd8:	8d a1       	ldd	r24, Y+37	; 0x25
    2bda:	9e a1       	ldd	r25, Y+38	; 0x26
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 e8       	ldi	r20, 0x80	; 128
    2be2:	5f e3       	ldi	r21, 0x3F	; 63
    2be4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2be8:	88 23       	and	r24, r24
    2bea:	2c f4       	brge	.+10     	; 0x2bf6 <LCD_displayChar+0x590>
		__ticks = 1;
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	9a a3       	std	Y+34, r25	; 0x22
    2bf2:	89 a3       	std	Y+33, r24	; 0x21
    2bf4:	3f c0       	rjmp	.+126    	; 0x2c74 <LCD_displayChar+0x60e>
	else if (__tmp > 65535)
    2bf6:	6b a1       	ldd	r22, Y+35	; 0x23
    2bf8:	7c a1       	ldd	r23, Y+36	; 0x24
    2bfa:	8d a1       	ldd	r24, Y+37	; 0x25
    2bfc:	9e a1       	ldd	r25, Y+38	; 0x26
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	3f ef       	ldi	r19, 0xFF	; 255
    2c02:	4f e7       	ldi	r20, 0x7F	; 127
    2c04:	57 e4       	ldi	r21, 0x47	; 71
    2c06:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c0a:	18 16       	cp	r1, r24
    2c0c:	4c f5       	brge	.+82     	; 0x2c60 <LCD_displayChar+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0e:	6f a1       	ldd	r22, Y+39	; 0x27
    2c10:	78 a5       	ldd	r23, Y+40	; 0x28
    2c12:	89 a5       	ldd	r24, Y+41	; 0x29
    2c14:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	40 e2       	ldi	r20, 0x20	; 32
    2c1c:	51 e4       	ldi	r21, 0x41	; 65
    2c1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	bc 01       	movw	r22, r24
    2c28:	cd 01       	movw	r24, r26
    2c2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	9a a3       	std	Y+34, r25	; 0x22
    2c34:	89 a3       	std	Y+33, r24	; 0x21
    2c36:	0f c0       	rjmp	.+30     	; 0x2c56 <LCD_displayChar+0x5f0>
    2c38:	88 ec       	ldi	r24, 0xC8	; 200
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	98 a3       	std	Y+32, r25	; 0x20
    2c3e:	8f 8f       	std	Y+31, r24	; 0x1f
    2c40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c42:	98 a1       	ldd	r25, Y+32	; 0x20
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <LCD_displayChar+0x5de>
    2c48:	98 a3       	std	Y+32, r25	; 0x20
    2c4a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c4e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	9a a3       	std	Y+34, r25	; 0x22
    2c54:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c56:	89 a1       	ldd	r24, Y+33	; 0x21
    2c58:	9a a1       	ldd	r25, Y+34	; 0x22
    2c5a:	00 97       	sbiw	r24, 0x00	; 0
    2c5c:	69 f7       	brne	.-38     	; 0x2c38 <LCD_displayChar+0x5d2>
    2c5e:	14 c0       	rjmp	.+40     	; 0x2c88 <LCD_displayChar+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c60:	6b a1       	ldd	r22, Y+35	; 0x23
    2c62:	7c a1       	ldd	r23, Y+36	; 0x24
    2c64:	8d a1       	ldd	r24, Y+37	; 0x25
    2c66:	9e a1       	ldd	r25, Y+38	; 0x26
    2c68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	9a a3       	std	Y+34, r25	; 0x22
    2c72:	89 a3       	std	Y+33, r24	; 0x21
    2c74:	89 a1       	ldd	r24, Y+33	; 0x21
    2c76:	9a a1       	ldd	r25, Y+34	; 0x22
    2c78:	9e 8f       	std	Y+30, r25	; 0x1e
    2c7a:	8d 8f       	std	Y+29, r24	; 0x1d
    2c7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	f1 f7       	brne	.-4      	; 0x2c80 <LCD_displayChar+0x61a>
    2c84:	9e 8f       	std	Y+30, r25	; 0x1e
    2c86:	8d 8f       	std	Y+29, r24	; 0x1d
		/*DATA_OUTPUT_PINS = (DATA_OUTPUT_PINS& 0xF0) | (data & 0x0F);*/
		  TAKE_SCCOMMAND(DATA_OUTPUT_PINS,data);

     #else
	        /*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS&0x0F)|((data&0x0F)<<4);*/
		     TAKE_SCCOMMAND(DATA_OUTPUT_PINS,data);
    2c88:	ab e3       	ldi	r26, 0x3B	; 59
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	eb e3       	ldi	r30, 0x3B	; 59
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	28 2f       	mov	r18, r24
    2c94:	2f 70       	andi	r18, 0x0F	; 15
    2c96:	fe 01       	movw	r30, r28
    2c98:	ed 59       	subi	r30, 0x9D	; 157
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	80 81       	ld	r24, Z
    2c9e:	88 2f       	mov	r24, r24
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	82 95       	swap	r24
    2ca4:	92 95       	swap	r25
    2ca6:	90 7f       	andi	r25, 0xF0	; 240
    2ca8:	98 27       	eor	r25, r24
    2caa:	80 7f       	andi	r24, 0xF0	; 240
    2cac:	98 27       	eor	r25, r24
    2cae:	82 2b       	or	r24, r18
    2cb0:	8c 93       	st	X, r24
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	a0 e8       	ldi	r26, 0x80	; 128
    2cb8:	bf e3       	ldi	r27, 0x3F	; 63
    2cba:	89 8f       	std	Y+25, r24	; 0x19
    2cbc:	9a 8f       	std	Y+26, r25	; 0x1a
    2cbe:	ab 8f       	std	Y+27, r26	; 0x1b
    2cc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc2:	69 8d       	ldd	r22, Y+25	; 0x19
    2cc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	4a ef       	ldi	r20, 0xFA	; 250
    2cd0:	54 e4       	ldi	r21, 0x44	; 68
    2cd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	8d 8b       	std	Y+21, r24	; 0x15
    2cdc:	9e 8b       	std	Y+22, r25	; 0x16
    2cde:	af 8b       	std	Y+23, r26	; 0x17
    2ce0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e8       	ldi	r20, 0x80	; 128
    2cf0:	5f e3       	ldi	r21, 0x3F	; 63
    2cf2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cf6:	88 23       	and	r24, r24
    2cf8:	2c f4       	brge	.+10     	; 0x2d04 <LCD_displayChar+0x69e>
		__ticks = 1;
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	9c 8b       	std	Y+20, r25	; 0x14
    2d00:	8b 8b       	std	Y+19, r24	; 0x13
    2d02:	3f c0       	rjmp	.+126    	; 0x2d82 <LCD_displayChar+0x71c>
	else if (__tmp > 65535)
    2d04:	6d 89       	ldd	r22, Y+21	; 0x15
    2d06:	7e 89       	ldd	r23, Y+22	; 0x16
    2d08:	8f 89       	ldd	r24, Y+23	; 0x17
    2d0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	3f ef       	ldi	r19, 0xFF	; 255
    2d10:	4f e7       	ldi	r20, 0x7F	; 127
    2d12:	57 e4       	ldi	r21, 0x47	; 71
    2d14:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d18:	18 16       	cp	r1, r24
    2d1a:	4c f5       	brge	.+82     	; 0x2d6e <LCD_displayChar+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2d1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	40 e2       	ldi	r20, 0x20	; 32
    2d2a:	51 e4       	ldi	r21, 0x41	; 65
    2d2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	bc 01       	movw	r22, r24
    2d36:	cd 01       	movw	r24, r26
    2d38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	9c 8b       	std	Y+20, r25	; 0x14
    2d42:	8b 8b       	std	Y+19, r24	; 0x13
    2d44:	0f c0       	rjmp	.+30     	; 0x2d64 <LCD_displayChar+0x6fe>
    2d46:	88 ec       	ldi	r24, 0xC8	; 200
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	9a 8b       	std	Y+18, r25	; 0x12
    2d4c:	89 8b       	std	Y+17, r24	; 0x11
    2d4e:	89 89       	ldd	r24, Y+17	; 0x11
    2d50:	9a 89       	ldd	r25, Y+18	; 0x12
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	f1 f7       	brne	.-4      	; 0x2d52 <LCD_displayChar+0x6ec>
    2d56:	9a 8b       	std	Y+18, r25	; 0x12
    2d58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	9c 8b       	std	Y+20, r25	; 0x14
    2d62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d64:	8b 89       	ldd	r24, Y+19	; 0x13
    2d66:	9c 89       	ldd	r25, Y+20	; 0x14
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	69 f7       	brne	.-38     	; 0x2d46 <LCD_displayChar+0x6e0>
    2d6c:	14 c0       	rjmp	.+40     	; 0x2d96 <LCD_displayChar+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d70:	7e 89       	ldd	r23, Y+22	; 0x16
    2d72:	8f 89       	ldd	r24, Y+23	; 0x17
    2d74:	98 8d       	ldd	r25, Y+24	; 0x18
    2d76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	9c 8b       	std	Y+20, r25	; 0x14
    2d80:	8b 8b       	std	Y+19, r24	; 0x13
    2d82:	8b 89       	ldd	r24, Y+19	; 0x13
    2d84:	9c 89       	ldd	r25, Y+20	; 0x14
    2d86:	98 8b       	std	Y+16, r25	; 0x10
    2d88:	8f 87       	std	Y+15, r24	; 0x0f
    2d8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d8c:	98 89       	ldd	r25, Y+16	; 0x10
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	f1 f7       	brne	.-4      	; 0x2d8e <LCD_displayChar+0x728>
    2d92:	98 8b       	std	Y+16, r25	; 0x10
    2d94:	8f 87       	std	Y+15, r24	; 0x0f

#endif
	        /*wait tdpw to make enable =0 */
	        	_delay_ms(1);
	        	/* make enable =0*/
	        	Pin_clear(CTRL_OUTPUT_PINS,E);
    2d96:	ab e3       	ldi	r26, 0x3B	; 59
    2d98:	b0 e0       	ldi	r27, 0x00	; 0
    2d9a:	eb e3       	ldi	r30, 0x3B	; 59
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	87 7f       	andi	r24, 0xF7	; 247
    2da2:	8c 93       	st	X, r24
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	a0 e8       	ldi	r26, 0x80	; 128
    2daa:	bf e3       	ldi	r27, 0x3F	; 63
    2dac:	8b 87       	std	Y+11, r24	; 0x0b
    2dae:	9c 87       	std	Y+12, r25	; 0x0c
    2db0:	ad 87       	std	Y+13, r26	; 0x0d
    2db2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	4a ef       	ldi	r20, 0xFA	; 250
    2dc2:	54 e4       	ldi	r21, 0x44	; 68
    2dc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	8f 83       	std	Y+7, r24	; 0x07
    2dce:	98 87       	std	Y+8, r25	; 0x08
    2dd0:	a9 87       	std	Y+9, r26	; 0x09
    2dd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd6:	78 85       	ldd	r23, Y+8	; 0x08
    2dd8:	89 85       	ldd	r24, Y+9	; 0x09
    2dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e8       	ldi	r20, 0x80	; 128
    2de2:	5f e3       	ldi	r21, 0x3F	; 63
    2de4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2de8:	88 23       	and	r24, r24
    2dea:	2c f4       	brge	.+10     	; 0x2df6 <LCD_displayChar+0x790>
		__ticks = 1;
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	9e 83       	std	Y+6, r25	; 0x06
    2df2:	8d 83       	std	Y+5, r24	; 0x05
    2df4:	3f c0       	rjmp	.+126    	; 0x2e74 <LCD_displayChar+0x80e>
	else if (__tmp > 65535)
    2df6:	6f 81       	ldd	r22, Y+7	; 0x07
    2df8:	78 85       	ldd	r23, Y+8	; 0x08
    2dfa:	89 85       	ldd	r24, Y+9	; 0x09
    2dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	3f ef       	ldi	r19, 0xFF	; 255
    2e02:	4f e7       	ldi	r20, 0x7F	; 127
    2e04:	57 e4       	ldi	r21, 0x47	; 71
    2e06:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e0a:	18 16       	cp	r1, r24
    2e0c:	4c f5       	brge	.+82     	; 0x2e60 <LCD_displayChar+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	40 e2       	ldi	r20, 0x20	; 32
    2e1c:	51 e4       	ldi	r21, 0x41	; 65
    2e1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	bc 01       	movw	r22, r24
    2e28:	cd 01       	movw	r24, r26
    2e2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	9e 83       	std	Y+6, r25	; 0x06
    2e34:	8d 83       	std	Y+5, r24	; 0x05
    2e36:	0f c0       	rjmp	.+30     	; 0x2e56 <LCD_displayChar+0x7f0>
    2e38:	88 ec       	ldi	r24, 0xC8	; 200
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	9c 83       	std	Y+4, r25	; 0x04
    2e3e:	8b 83       	std	Y+3, r24	; 0x03
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03
    2e42:	9c 81       	ldd	r25, Y+4	; 0x04
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <LCD_displayChar+0x7de>
    2e48:	9c 83       	std	Y+4, r25	; 0x04
    2e4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e50:	01 97       	sbiw	r24, 0x01	; 1
    2e52:	9e 83       	std	Y+6, r25	; 0x06
    2e54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e56:	8d 81       	ldd	r24, Y+5	; 0x05
    2e58:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5a:	00 97       	sbiw	r24, 0x00	; 0
    2e5c:	69 f7       	brne	.-38     	; 0x2e38 <LCD_displayChar+0x7d2>
    2e5e:	14 c0       	rjmp	.+40     	; 0x2e88 <LCD_displayChar+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e60:	6f 81       	ldd	r22, Y+7	; 0x07
    2e62:	78 85       	ldd	r23, Y+8	; 0x08
    2e64:	89 85       	ldd	r24, Y+9	; 0x09
    2e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	9e 83       	std	Y+6, r25	; 0x06
    2e72:	8d 83       	std	Y+5, r24	; 0x05
    2e74:	8d 81       	ldd	r24, Y+5	; 0x05
    2e76:	9e 81       	ldd	r25, Y+6	; 0x06
    2e78:	9a 83       	std	Y+2, r25	; 0x02
    2e7a:	89 83       	std	Y+1, r24	; 0x01
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	f1 f7       	brne	.-4      	; 0x2e80 <LCD_displayChar+0x81a>
    2e84:	9a 83       	std	Y+2, r25	; 0x02
    2e86:	89 83       	std	Y+1, r24	; 0x01
	        	/*wait th 13ns */
	        	_delay_ms(1);


}
    2e88:	cd 59       	subi	r28, 0x9D	; 157
    2e8a:	df 4f       	sbci	r29, 0xFF	; 255
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	f8 94       	cli
    2e90:	de bf       	out	0x3e, r29	; 62
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	cd bf       	out	0x3d, r28	; 61
    2e96:	cf 91       	pop	r28
    2e98:	df 91       	pop	r29
    2e9a:	1f 91       	pop	r17
    2e9c:	0f 91       	pop	r16
    2e9e:	08 95       	ret

00002ea0 <LCD_displayString>:




   void LCD_displayString(const char *Str)
   {
    2ea0:	df 93       	push	r29
    2ea2:	cf 93       	push	r28
    2ea4:	00 d0       	rcall	.+0      	; 0x2ea6 <LCD_displayString+0x6>
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	9a 83       	std	Y+2, r25	; 0x02
    2eac:	89 83       	std	Y+1, r24	; 0x01
    2eae:	0a c0       	rjmp	.+20     	; 0x2ec4 <LCD_displayString+0x24>

   	while((*Str) != '\0')
   	{
   		LCD_displayChar(*Str);
    2eb0:	e9 81       	ldd	r30, Y+1	; 0x01
    2eb2:	fa 81       	ldd	r31, Y+2	; 0x02
    2eb4:	80 81       	ld	r24, Z
    2eb6:	0e 94 33 13 	call	0x2666	; 0x2666 <LCD_displayChar>
   		Str++;
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ebe:	01 96       	adiw	r24, 0x01	; 1
    2ec0:	9a 83       	std	Y+2, r25	; 0x02
    2ec2:	89 83       	std	Y+1, r24	; 0x01


   void LCD_displayString(const char *Str)
   {

   	while((*Str) != '\0')
    2ec4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec8:	80 81       	ld	r24, Z
    2eca:	88 23       	and	r24, r24
    2ecc:	89 f7       	brne	.-30     	; 0x2eb0 <LCD_displayString+0x10>
   	{
   		LCD_displayChar(*Str);
   		Str++;
   	}
   }
    2ece:	0f 90       	pop	r0
    2ed0:	0f 90       	pop	r0
    2ed2:	cf 91       	pop	r28
    2ed4:	df 91       	pop	r29
    2ed6:	08 95       	ret

00002ed8 <LCD_gotoRawCol>:


   void LCD_gotoRawCol(unit8 row, unit8 col){
    2ed8:	df 93       	push	r29
    2eda:	cf 93       	push	r28
    2edc:	00 d0       	rcall	.+0      	; 0x2ede <LCD_gotoRawCol+0x6>
    2ede:	00 d0       	rcall	.+0      	; 0x2ee0 <LCD_gotoRawCol+0x8>
    2ee0:	0f 92       	push	r0
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	8a 83       	std	Y+2, r24	; 0x02
    2ee8:	6b 83       	std	Y+3, r22	; 0x03
	   unit8 address;
	   switch(row){
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
    2eec:	28 2f       	mov	r18, r24
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	3d 83       	std	Y+5, r19	; 0x05
    2ef2:	2c 83       	std	Y+4, r18	; 0x04
    2ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef8:	00 97       	sbiw	r24, 0x00	; 0
    2efa:	31 f0       	breq	.+12     	; 0x2f08 <LCD_gotoRawCol+0x30>
    2efc:	2c 81       	ldd	r18, Y+4	; 0x04
    2efe:	3d 81       	ldd	r19, Y+5	; 0x05
    2f00:	21 30       	cpi	r18, 0x01	; 1
    2f02:	31 05       	cpc	r19, r1
    2f04:	21 f0       	breq	.+8      	; 0x2f0e <LCD_gotoRawCol+0x36>
    2f06:	06 c0       	rjmp	.+12     	; 0x2f14 <LCD_gotoRawCol+0x3c>
	       case 0:
		      address=col;
    2f08:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	03 c0       	rjmp	.+6      	; 0x2f14 <LCD_gotoRawCol+0x3c>
		       break;
	       case 1:
		      address=0x40+col;
    2f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f10:	80 5c       	subi	r24, 0xC0	; 192
    2f12:	89 83       	std	Y+1, r24	; 0x01
	        }
	    LCD_sendCommand(address|CURSOR_MoveToFirstLoc);
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	80 68       	ori	r24, 0x80	; 128
    2f18:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_sendCommand>

	   }
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	08 95       	ret

00002f2c <LCD_IntToStr>:



void LCD_IntToStr(int data){
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	62 97       	sbiw	r28, 0x12	; 18
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	de bf       	out	0x3e, r29	; 62
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	cd bf       	out	0x3d, r28	; 61
    2f40:	9a 8b       	std	Y+18, r25	; 0x12
    2f42:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10);
    2f44:	89 89       	ldd	r24, Y+17	; 0x11
    2f46:	9a 89       	ldd	r25, Y+18	; 0x12
    2f48:	9e 01       	movw	r18, r28
    2f4a:	2f 5f       	subi	r18, 0xFF	; 255
    2f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f4e:	b9 01       	movw	r22, r18
    2f50:	4a e0       	ldi	r20, 0x0A	; 10
    2f52:	50 e0       	ldi	r21, 0x00	; 0
    2f54:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <itoa>
	LCD_displayString(buff);
    2f58:	ce 01       	movw	r24, r28
    2f5a:	01 96       	adiw	r24, 0x01	; 1
    2f5c:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_displayString>
}
    2f60:	62 96       	adiw	r28, 0x12	; 18
    2f62:	0f b6       	in	r0, 0x3f	; 63
    2f64:	f8 94       	cli
    2f66:	de bf       	out	0x3e, r29	; 62
    2f68:	0f be       	out	0x3f, r0	; 63
    2f6a:	cd bf       	out	0x3d, r28	; 61
    2f6c:	cf 91       	pop	r28
    2f6e:	df 91       	pop	r29
    2f70:	08 95       	ret

00002f72 <LCD_displayStrRowCol>:


void LCD_displayStrRowCol(unit8 row,unit8 col, char *Str){
    2f72:	df 93       	push	r29
    2f74:	cf 93       	push	r28
    2f76:	cd b7       	in	r28, 0x3d	; 61
    2f78:	de b7       	in	r29, 0x3e	; 62
    2f7a:	28 97       	sbiw	r28, 0x08	; 8
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	f8 94       	cli
    2f80:	de bf       	out	0x3e, r29	; 62
    2f82:	0f be       	out	0x3f, r0	; 63
    2f84:	cd bf       	out	0x3d, r28	; 61
    2f86:	8b 83       	std	Y+3, r24	; 0x03
    2f88:	6c 83       	std	Y+4, r22	; 0x04
    2f8a:	5e 83       	std	Y+6, r21	; 0x06
    2f8c:	4d 83       	std	Y+5, r20	; 0x05
	unit8 address,i=0;
    2f8e:	19 82       	std	Y+1, r1	; 0x01
		   switch(row){
    2f90:	8b 81       	ldd	r24, Y+3	; 0x03
    2f92:	28 2f       	mov	r18, r24
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	38 87       	std	Y+8, r19	; 0x08
    2f98:	2f 83       	std	Y+7, r18	; 0x07
    2f9a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f9c:	98 85       	ldd	r25, Y+8	; 0x08
    2f9e:	00 97       	sbiw	r24, 0x00	; 0
    2fa0:	31 f0       	breq	.+12     	; 0x2fae <LCD_displayStrRowCol+0x3c>
    2fa2:	2f 81       	ldd	r18, Y+7	; 0x07
    2fa4:	38 85       	ldd	r19, Y+8	; 0x08
    2fa6:	21 30       	cpi	r18, 0x01	; 1
    2fa8:	31 05       	cpc	r19, r1
    2faa:	21 f0       	breq	.+8      	; 0x2fb4 <LCD_displayStrRowCol+0x42>
    2fac:	06 c0       	rjmp	.+12     	; 0x2fba <LCD_displayStrRowCol+0x48>
		       case 0:
			      address=col;
    2fae:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb0:	8a 83       	std	Y+2, r24	; 0x02
    2fb2:	03 c0       	rjmp	.+6      	; 0x2fba <LCD_displayStrRowCol+0x48>
			       break;
		       case 1:
			      address=0x40+col;
    2fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb6:	80 5c       	subi	r24, 0xC0	; 192
    2fb8:	8a 83       	std	Y+2, r24	; 0x02
		        }
    LCD_sendCommand(address|CURSOR_MoveToFirstLoc);
    2fba:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbc:	80 68       	ori	r24, 0x80	; 128
    2fbe:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_sendCommand>
    2fc2:	10 c0       	rjmp	.+32     	; 0x2fe4 <LCD_displayStrRowCol+0x72>

	while((*Str) != '\0')
   	{
   		LCD_displayChar(Str[i]);
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	28 2f       	mov	r18, r24
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	8d 81       	ldd	r24, Y+5	; 0x05
    2fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fce:	fc 01       	movw	r30, r24
    2fd0:	e2 0f       	add	r30, r18
    2fd2:	f3 1f       	adc	r31, r19
    2fd4:	80 81       	ld	r24, Z
    2fd6:	0e 94 33 13 	call	0x2666	; 0x2666 <LCD_displayChar>
   		Str++;
    2fda:	8d 81       	ldd	r24, Y+5	; 0x05
    2fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fde:	01 96       	adiw	r24, 0x01	; 1
    2fe0:	9e 83       	std	Y+6, r25	; 0x06
    2fe2:	8d 83       	std	Y+5, r24	; 0x05
		       case 1:
			      address=0x40+col;
		        }
    LCD_sendCommand(address|CURSOR_MoveToFirstLoc);

	while((*Str) != '\0')
    2fe4:	ed 81       	ldd	r30, Y+5	; 0x05
    2fe6:	fe 81       	ldd	r31, Y+6	; 0x06
    2fe8:	80 81       	ld	r24, Z
    2fea:	88 23       	and	r24, r24
    2fec:	59 f7       	brne	.-42     	; 0x2fc4 <LCD_displayStrRowCol+0x52>
   	{
   		LCD_displayChar(Str[i]);
   		Str++;
   	}
}
    2fee:	28 96       	adiw	r28, 0x08	; 8
    2ff0:	0f b6       	in	r0, 0x3f	; 63
    2ff2:	f8 94       	cli
    2ff4:	de bf       	out	0x3e, r29	; 62
    2ff6:	0f be       	out	0x3f, r0	; 63
    2ff8:	cd bf       	out	0x3d, r28	; 61
    2ffa:	cf 91       	pop	r28
    2ffc:	df 91       	pop	r29
    2ffe:	08 95       	ret

00003000 <LCD_clearScreen>:


void LCD_clearScreen(void)
{
    3000:	df 93       	push	r29
    3002:	cf 93       	push	r28
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_LCD); //clear display
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_sendCommand>
}
    300e:	cf 91       	pop	r28
    3010:	df 91       	pop	r29
    3012:	08 95       	ret

00003014 <UART_Init>:
 *      Author: Rafaat
 */
#include "UART.h"

void UART_Init()
{
    3014:	df 93       	push	r29
    3016:	cf 93       	push	r28
    3018:	cd b7       	in	r28, 0x3d	; 61
    301a:	de b7       	in	r29, 0x3e	; 62
UCSRB |=1<<RXEN|1<<TXEN;
    301c:	aa e2       	ldi	r26, 0x2A	; 42
    301e:	b0 e0       	ldi	r27, 0x00	; 0
    3020:	ea e2       	ldi	r30, 0x2A	; 42
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	80 81       	ld	r24, Z
    3026:	88 61       	ori	r24, 0x18	; 24
    3028:	8c 93       	st	X, r24
UCSRC |=1<<UCSZ1|1<<UCSZ0|1<<URSEL;
    302a:	a0 e4       	ldi	r26, 0x40	; 64
    302c:	b0 e0       	ldi	r27, 0x00	; 0
    302e:	e0 e4       	ldi	r30, 0x40	; 64
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	80 81       	ld	r24, Z
    3034:	86 68       	ori	r24, 0x86	; 134
    3036:	8c 93       	st	X, r24
UBRRL = 0x33 ;
    3038:	e9 e2       	ldi	r30, 0x29	; 41
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	83 e3       	ldi	r24, 0x33	; 51
    303e:	80 83       	st	Z, r24
}
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	08 95       	ret

00003046 <UART_Send>:

void UART_Send(uint8 Char)
{
    3046:	df 93       	push	r29
    3048:	cf 93       	push	r28
    304a:	0f 92       	push	r0
    304c:	cd b7       	in	r28, 0x3d	; 61
    304e:	de b7       	in	r29, 0x3e	; 62
    3050:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA&(1<<UDRE)));
    3052:	eb e2       	ldi	r30, 0x2B	; 43
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	80 81       	ld	r24, Z
    3058:	88 2f       	mov	r24, r24
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	80 72       	andi	r24, 0x20	; 32
    305e:	90 70       	andi	r25, 0x00	; 0
    3060:	00 97       	sbiw	r24, 0x00	; 0
    3062:	b9 f3       	breq	.-18     	; 0x3052 <UART_Send+0xc>
	UDR=Char;
    3064:	ec e2       	ldi	r30, 0x2C	; 44
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	89 81       	ldd	r24, Y+1	; 0x01
    306a:	80 83       	st	Z, r24
}
    306c:	0f 90       	pop	r0
    306e:	cf 91       	pop	r28
    3070:	df 91       	pop	r29
    3072:	08 95       	ret

00003074 <UART_Recieve>:

uint8 UART_Recieve()
{
    3074:	df 93       	push	r29
    3076:	cf 93       	push	r28
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSRA&(1<<RXC)));
    307c:	eb e2       	ldi	r30, 0x2B	; 43
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	80 81       	ld	r24, Z
    3082:	88 23       	and	r24, r24
    3084:	dc f7       	brge	.-10     	; 0x307c <UART_Recieve+0x8>
	return UDR;
    3086:	ec e2       	ldi	r30, 0x2C	; 44
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	80 81       	ld	r24, Z
}
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	08 95       	ret

00003092 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
unit8 KeyPad_getPressedKey(void){
    3092:	df 93       	push	r29
    3094:	cf 93       	push	r28
    3096:	00 d0       	rcall	.+0      	; 0x3098 <KeyPad_getPressedKey+0x6>
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62

	volatile unit8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    309c:	19 82       	std	Y+1, r1	; 0x01
    309e:	4d c0       	rjmp	.+154    	; 0x313a <KeyPad_getPressedKey+0xa8>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00100000<<col) ;
    30a0:	e4 e3       	ldi	r30, 0x34	; 52
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	28 2f       	mov	r18, r24
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	80 e2       	ldi	r24, 0x20	; 32
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	02 c0       	rjmp	.+4      	; 0x30b4 <KeyPad_getPressedKey+0x22>
    30b0:	88 0f       	add	r24, r24
    30b2:	99 1f       	adc	r25, r25
    30b4:	2a 95       	dec	r18
    30b6:	e2 f7       	brpl	.-8      	; 0x30b0 <KeyPad_getPressedKey+0x1e>
    30b8:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = ( ~(0b00100000<<col) &0xFC);
    30ba:	e5 e3       	ldi	r30, 0x35	; 53
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	89 81       	ldd	r24, Y+1	; 0x01
    30c0:	28 2f       	mov	r18, r24
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	80 e2       	ldi	r24, 0x20	; 32
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	02 2e       	mov	r0, r18
    30ca:	02 c0       	rjmp	.+4      	; 0x30d0 <KeyPad_getPressedKey+0x3e>
    30cc:	88 0f       	add	r24, r24
    30ce:	99 1f       	adc	r25, r25
    30d0:	0a 94       	dec	r0
    30d2:	e2 f7       	brpl	.-8      	; 0x30cc <KeyPad_getPressedKey+0x3a>
    30d4:	80 95       	com	r24
    30d6:	8c 7f       	andi	r24, 0xFC	; 252
    30d8:	80 83       	st	Z, r24

			for(row=2;row<N_row+2;row++) /* loop for rows */
    30da:	82 e0       	ldi	r24, 0x02	; 2
    30dc:	8a 83       	std	Y+2, r24	; 0x02
    30de:	27 c0       	rjmp	.+78     	; 0x312e <KeyPad_getPressedKey+0x9c>
			{
				if(Pin_is_clear(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
    30e0:	e3 e3       	ldi	r30, 0x33	; 51
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	28 2f       	mov	r18, r24
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	8a 81       	ldd	r24, Y+2	; 0x02
    30ec:	88 2f       	mov	r24, r24
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	a9 01       	movw	r20, r18
    30f2:	02 c0       	rjmp	.+4      	; 0x30f8 <KeyPad_getPressedKey+0x66>
    30f4:	55 95       	asr	r21
    30f6:	47 95       	ror	r20
    30f8:	8a 95       	dec	r24
    30fa:	e2 f7       	brpl	.-8      	; 0x30f4 <KeyPad_getPressedKey+0x62>
    30fc:	ca 01       	movw	r24, r20
    30fe:	81 70       	andi	r24, 0x01	; 1
    3100:	90 70       	andi	r25, 0x00	; 0
    3102:	00 97       	sbiw	r24, 0x00	; 0
    3104:	89 f4       	brne	.+34     	; 0x3128 <KeyPad_getPressedKey+0x96>
				{
					#if (N_col == 3)
						return (( (row-2)*N_col)+col+1);
    3106:	8a 81       	ldd	r24, Y+2	; 0x02
    3108:	28 2f       	mov	r18, r24
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	c9 01       	movw	r24, r18
    310e:	88 0f       	add	r24, r24
    3110:	99 1f       	adc	r25, r25
    3112:	82 0f       	add	r24, r18
    3114:	93 1f       	adc	r25, r19
    3116:	98 2f       	mov	r25, r24
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	89 0f       	add	r24, r25
    311c:	85 50       	subi	r24, 0x05	; 5

				}
			}
		}
	}	
}
    311e:	0f 90       	pop	r0
    3120:	0f 90       	pop	r0
    3122:	cf 91       	pop	r28
    3124:	df 91       	pop	r29
    3126:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = ( ~(0b00100000<<col) &0xFC);

			for(row=2;row<N_row+2;row++) /* loop for rows */
    3128:	8a 81       	ldd	r24, Y+2	; 0x02
    312a:	8f 5f       	subi	r24, 0xFF	; 255
    312c:	8a 83       	std	Y+2, r24	; 0x02
    312e:	8a 81       	ldd	r24, Y+2	; 0x02
    3130:	85 30       	cpi	r24, 0x05	; 5
    3132:	b0 f2       	brcs	.-84     	; 0x30e0 <KeyPad_getPressedKey+0x4e>
unit8 KeyPad_getPressedKey(void){

	volatile unit8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    3134:	89 81       	ldd	r24, Y+1	; 0x01
    3136:	8f 5f       	subi	r24, 0xFF	; 255
    3138:	89 83       	std	Y+1, r24	; 0x01
    313a:	89 81       	ldd	r24, Y+1	; 0x01
    313c:	83 30       	cpi	r24, 0x03	; 3
    313e:	08 f4       	brcc	.+2      	; 0x3142 <KeyPad_getPressedKey+0xb0>
    3140:	af cf       	rjmp	.-162    	; 0x30a0 <KeyPad_getPressedKey+0xe>
    3142:	ac cf       	rjmp	.-168    	; 0x309c <KeyPad_getPressedKey+0xa>

00003144 <__prologue_saves__>:
    3144:	2f 92       	push	r2
    3146:	3f 92       	push	r3
    3148:	4f 92       	push	r4
    314a:	5f 92       	push	r5
    314c:	6f 92       	push	r6
    314e:	7f 92       	push	r7
    3150:	8f 92       	push	r8
    3152:	9f 92       	push	r9
    3154:	af 92       	push	r10
    3156:	bf 92       	push	r11
    3158:	cf 92       	push	r12
    315a:	df 92       	push	r13
    315c:	ef 92       	push	r14
    315e:	ff 92       	push	r15
    3160:	0f 93       	push	r16
    3162:	1f 93       	push	r17
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	cd b7       	in	r28, 0x3d	; 61
    316a:	de b7       	in	r29, 0x3e	; 62
    316c:	ca 1b       	sub	r28, r26
    316e:	db 0b       	sbc	r29, r27
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	f8 94       	cli
    3174:	de bf       	out	0x3e, r29	; 62
    3176:	0f be       	out	0x3f, r0	; 63
    3178:	cd bf       	out	0x3d, r28	; 61
    317a:	09 94       	ijmp

0000317c <__epilogue_restores__>:
    317c:	2a 88       	ldd	r2, Y+18	; 0x12
    317e:	39 88       	ldd	r3, Y+17	; 0x11
    3180:	48 88       	ldd	r4, Y+16	; 0x10
    3182:	5f 84       	ldd	r5, Y+15	; 0x0f
    3184:	6e 84       	ldd	r6, Y+14	; 0x0e
    3186:	7d 84       	ldd	r7, Y+13	; 0x0d
    3188:	8c 84       	ldd	r8, Y+12	; 0x0c
    318a:	9b 84       	ldd	r9, Y+11	; 0x0b
    318c:	aa 84       	ldd	r10, Y+10	; 0x0a
    318e:	b9 84       	ldd	r11, Y+9	; 0x09
    3190:	c8 84       	ldd	r12, Y+8	; 0x08
    3192:	df 80       	ldd	r13, Y+7	; 0x07
    3194:	ee 80       	ldd	r14, Y+6	; 0x06
    3196:	fd 80       	ldd	r15, Y+5	; 0x05
    3198:	0c 81       	ldd	r16, Y+4	; 0x04
    319a:	1b 81       	ldd	r17, Y+3	; 0x03
    319c:	aa 81       	ldd	r26, Y+2	; 0x02
    319e:	b9 81       	ldd	r27, Y+1	; 0x01
    31a0:	ce 0f       	add	r28, r30
    31a2:	d1 1d       	adc	r29, r1
    31a4:	0f b6       	in	r0, 0x3f	; 63
    31a6:	f8 94       	cli
    31a8:	de bf       	out	0x3e, r29	; 62
    31aa:	0f be       	out	0x3f, r0	; 63
    31ac:	cd bf       	out	0x3d, r28	; 61
    31ae:	ed 01       	movw	r28, r26
    31b0:	08 95       	ret

000031b2 <itoa>:
    31b2:	fb 01       	movw	r30, r22
    31b4:	9f 01       	movw	r18, r30
    31b6:	e8 94       	clt
    31b8:	42 30       	cpi	r20, 0x02	; 2
    31ba:	c4 f0       	brlt	.+48     	; 0x31ec <itoa+0x3a>
    31bc:	45 32       	cpi	r20, 0x25	; 37
    31be:	b4 f4       	brge	.+44     	; 0x31ec <itoa+0x3a>
    31c0:	4a 30       	cpi	r20, 0x0A	; 10
    31c2:	29 f4       	brne	.+10     	; 0x31ce <itoa+0x1c>
    31c4:	97 fb       	bst	r25, 7
    31c6:	1e f4       	brtc	.+6      	; 0x31ce <itoa+0x1c>
    31c8:	90 95       	com	r25
    31ca:	81 95       	neg	r24
    31cc:	9f 4f       	sbci	r25, 0xFF	; 255
    31ce:	64 2f       	mov	r22, r20
    31d0:	77 27       	eor	r23, r23
    31d2:	0e 94 0a 19 	call	0x3214	; 0x3214 <__udivmodhi4>
    31d6:	80 5d       	subi	r24, 0xD0	; 208
    31d8:	8a 33       	cpi	r24, 0x3A	; 58
    31da:	0c f0       	brlt	.+2      	; 0x31de <itoa+0x2c>
    31dc:	89 5d       	subi	r24, 0xD9	; 217
    31de:	81 93       	st	Z+, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	00 97       	sbiw	r24, 0x00	; 0
    31e4:	a1 f7       	brne	.-24     	; 0x31ce <itoa+0x1c>
    31e6:	16 f4       	brtc	.+4      	; 0x31ec <itoa+0x3a>
    31e8:	5d e2       	ldi	r21, 0x2D	; 45
    31ea:	51 93       	st	Z+, r21
    31ec:	10 82       	st	Z, r1
    31ee:	c9 01       	movw	r24, r18
    31f0:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <strrev>

000031f4 <strrev>:
    31f4:	dc 01       	movw	r26, r24
    31f6:	fc 01       	movw	r30, r24
    31f8:	67 2f       	mov	r22, r23
    31fa:	71 91       	ld	r23, Z+
    31fc:	77 23       	and	r23, r23
    31fe:	e1 f7       	brne	.-8      	; 0x31f8 <strrev+0x4>
    3200:	32 97       	sbiw	r30, 0x02	; 2
    3202:	04 c0       	rjmp	.+8      	; 0x320c <strrev+0x18>
    3204:	7c 91       	ld	r23, X
    3206:	6d 93       	st	X+, r22
    3208:	70 83       	st	Z, r23
    320a:	62 91       	ld	r22, -Z
    320c:	ae 17       	cp	r26, r30
    320e:	bf 07       	cpc	r27, r31
    3210:	c8 f3       	brcs	.-14     	; 0x3204 <strrev+0x10>
    3212:	08 95       	ret

00003214 <__udivmodhi4>:
    3214:	aa 1b       	sub	r26, r26
    3216:	bb 1b       	sub	r27, r27
    3218:	51 e1       	ldi	r21, 0x11	; 17
    321a:	07 c0       	rjmp	.+14     	; 0x322a <__udivmodhi4_ep>

0000321c <__udivmodhi4_loop>:
    321c:	aa 1f       	adc	r26, r26
    321e:	bb 1f       	adc	r27, r27
    3220:	a6 17       	cp	r26, r22
    3222:	b7 07       	cpc	r27, r23
    3224:	10 f0       	brcs	.+4      	; 0x322a <__udivmodhi4_ep>
    3226:	a6 1b       	sub	r26, r22
    3228:	b7 0b       	sbc	r27, r23

0000322a <__udivmodhi4_ep>:
    322a:	88 1f       	adc	r24, r24
    322c:	99 1f       	adc	r25, r25
    322e:	5a 95       	dec	r21
    3230:	a9 f7       	brne	.-22     	; 0x321c <__udivmodhi4_loop>
    3232:	80 95       	com	r24
    3234:	90 95       	com	r25
    3236:	bc 01       	movw	r22, r24
    3238:	cd 01       	movw	r24, r26
    323a:	08 95       	ret

0000323c <_exit>:
    323c:	f8 94       	cli

0000323e <__stop_program>:
    323e:	ff cf       	rjmp	.-2      	; 0x323e <__stop_program>
